import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test001");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        objNodeImpl8.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        java.lang.String str21 = objNodeImpl18.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl25.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl25.copy();
        java.lang.Class<?> wildcardClass30 = objNodeImpl25.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass30);
        objNodeImpl8.setContent((java.lang.Object) annotatedElementNodeImpl32);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test002");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl32.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(objNodeImpl81);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test003");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj20 = objNodeImpl16.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass22 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        boolean boolean27 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl24);
        objNodeImpl44.setDepth(100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean54 = objNodeImpl50.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl50.copy();
        objNodeImpl50.setDepth((int) '#');
        boolean boolean58 = objNodeImpl50.isRoot();
        java.lang.Class<?> wildcardClass59 = objNodeImpl50.getClass();
        java.lang.Object obj60 = objNodeImpl50.getName();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.Object obj62 = objNodeImpl50.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test004");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.String str9 = objNodeImpl8.toString();
        java.lang.String str10 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Object obj19 = null;
        objNodeImpl14.setContent(obj19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl30.getParent();
        java.lang.Object obj35 = null;
        objNodeImpl30.setContent(obj35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.Class<?> wildcardClass52 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str78 = objNodeImpl63.toString();
        objNodeImpl63.setName("Node(#)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl44.setName("");
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList85 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(100)" + "'", str10.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList85);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test005");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.lang.Object obj15 = objNodeImpl3.getContent();
        java.lang.Object obj16 = objNodeImpl3.getName();
        java.lang.Object obj17 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl26.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl26.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        java.lang.Class<?> wildcardClass38 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl26.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Object obj46 = objNodeImpl26.getContent();
        objNodeImpl26.setName("Node(100)");
        java.lang.String str49 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        objNodeImpl58.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl58.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl58.setContent((java.lang.Object) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl58.copy();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl3.setDepth((int) (short) 100);
        java.lang.Object obj83 = objNodeImpl3.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(1.0)" + "'", obj17.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(Node(1.0))" + "'", str49.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl78);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(1.0)" + "'", obj83.equals("Node(1.0)"));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test006");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Class<?> wildcardClass36 = objNodeImpl31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj44 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setDepth((int) (short) 1);
        boolean boolean59 = objNodeImpl54.isRoot();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean61 = objNodeImpl54.isRoot();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl24.copy();
        boolean boolean64 = objNodeImpl63.isRoot();
        java.lang.Object obj65 = objNodeImpl63.getContent();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean67 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList75 = objNodeImpl69.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList75);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        boolean boolean78 = objNodeImpl76.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objNodeList75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test007");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.String str28 = objNodeImpl25.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str36 = objNodeImpl32.toString();
        java.lang.Object obj37 = objNodeImpl32.getContent();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.String str40 = objNodeImpl25.toString();
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj48 = objNodeImpl45.getName();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.String str50 = objNodeImpl8.toString();
        java.lang.Object obj51 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0f + "'", obj37.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test008");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl28.setName("");
        java.lang.Object obj86 = objNodeImpl28.getName();
        objNodeImpl28.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "" + "'", obj86.equals(""));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test009");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test010");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        objNodeImpl10.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = objNodeImpl10.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertNotNull(objNodeImpl68);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test011");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl3.setDepth((int) (byte) 100);
        boolean boolean18 = objNodeImpl3.isLeaf();
        boolean boolean19 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        boolean boolean27 = objNodeImpl23.isLeaf();
        java.lang.Object obj28 = objNodeImpl23.getContent();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        objNodeImpl33.setName("");
        objNodeImpl33.setName("Node(0)");
        boolean boolean42 = objNodeImpl33.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.String str58 = objNodeImpl54.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl54.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl63.getParent();
        java.lang.Object obj68 = null;
        objNodeImpl63.setContent(obj68);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl54.setName("");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl83.setContent((java.lang.Object) 1.0f);
        objNodeImpl81.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        objNodeImpl81.setDepth((int) (short) 100);
        boolean boolean89 = objNodeImpl81.isLeaf();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        java.lang.Object obj91 = objNodeImpl44.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl92 = objNodeImpl44.copy();
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl44);
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj95 = objNodeImpl23.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0f + "'", obj28.equals(1.0f));
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Node(1.0)" + "'", str58.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNull(objNode67);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 1.0f + "'", obj91.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl92);
        org.junit.Assert.assertTrue("'" + obj95 + "' != '" + "Node(100)" + "'", obj95.equals("Node(100)"));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test012");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl44.getParent();
        java.lang.Class<?> wildcardClass49 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl37.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj57 = objNodeImpl37.getContent();
        objNodeImpl37.setName("Node(100)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.Class<?> wildcardClass61 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str69 = objNodeImpl65.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl65.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl72.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl74.getParent();
        java.lang.Object obj79 = null;
        objNodeImpl74.setContent(obj79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj85 = objNodeImpl82.getName();
        objNodeImpl74.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = objNodeImpl82.copy();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl88);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl88);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertTrue("'" + obj85 + "' != '" + "Node(100)" + "'", obj85.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl88);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test013");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = null;
        objNodeImpl3.setParent(objNode26);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test014");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl10.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl10.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNode27);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test015");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        java.lang.String str49 = objNodeImpl36.toString();
        java.lang.String str50 = objNodeImpl36.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl36.getChildren();
        java.lang.Object obj52 = objNodeImpl36.getName();
        objNodeImpl36.setName("Node(Node(100))");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(1.0)" + "'", obj52.equals("Node(1.0)"));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test016");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass49 = objNodeImpl42.getClass();
        objNodeImpl42.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl55.getParent();
        java.lang.Class<?> wildcardClass60 = objNodeImpl55.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl62.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl70.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl78.setDepth((int) (short) 1);
        boolean boolean83 = objNodeImpl78.isRoot();
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean85 = objNodeImpl78.isRoot();
        boolean boolean86 = objNodeImpl78.isRoot();
        objNodeImpl62.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl42);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList76);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test017");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class<?> wildcardClass37 = obj35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl38.setName("Node(Node())");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test018");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        objNodeImpl10.setName("Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl41.copy();
        objNodeImpl48.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl48.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl55.getParent();
        java.lang.Class<?> wildcardClass60 = objNodeImpl55.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl55);
        java.lang.Object obj68 = objNodeImpl48.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl70.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl78.setDepth((int) (short) 1);
        boolean boolean83 = objNodeImpl78.isRoot();
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean85 = objNodeImpl78.isRoot();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean87 = objNodeImpl78.isLeaf();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(objNodeList76);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test019");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        java.lang.String str29 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        java.lang.Object obj38 = objNodeImpl33.getContent();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.lang.String str41 = objNodeImpl26.toString();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl26.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj48 = objNodeImpl45.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl45.copy();
        objNodeImpl45.setName("Node(1.0)");
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl45.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl45.getParent();
        objNodeImpl8.setContent((java.lang.Object) objNode55);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0f + "'", obj38.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeList53);
        org.junit.Assert.assertNotNull(objNode54);
        org.junit.Assert.assertNotNull(objNode55);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test020");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl3.getParent();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode4);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test021");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        boolean boolean22 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.String str37 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        java.lang.Object obj46 = objNodeImpl41.getContent();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.String str49 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.String str62 = objNodeImpl19.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = null;
        try {
            objNodeImpl19.addChild(objNode63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(Node(1.0))" + "'", str62.equals("Node(Node(1.0))"));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test022");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl12.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 0);
        objNodeImpl15.setName("Node(1.0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test023");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl16.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNull(objNode18);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test024");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setDepth((int) (short) 1);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str94 = objNodeImpl10.toString();
        java.lang.String str95 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Node(Node())" + "'", str94.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Node(Node())" + "'", str95.equals("Node(Node())"));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test025");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.Class<?> wildcardClass54 = objNodeImpl46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl59.getParent();
        java.lang.Object obj64 = null;
        objNodeImpl59.setContent(obj64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl59.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList79 = objNodeImpl73.getChildren();
        objNodeImpl73.setContent((java.lang.Object) '#');
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.lang.Class<?> wildcardClass83 = objNodeImpl73.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass83);
        objNodeImpl46.setContent((java.lang.Object) wildcardClass83);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList79);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test026");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl8.getParent();
        boolean boolean52 = objNodeImpl8.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test027");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl34.getChildren();
        boolean boolean45 = objNodeImpl34.isRoot();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test028");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        boolean boolean12 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        java.lang.Object obj22 = objNodeImpl21.getContent();
        boolean boolean23 = objNodeImpl21.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl26.getParent();
        boolean boolean34 = objNodeImpl26.isLeaf();
        java.lang.Class<?> wildcardClass35 = objNodeImpl26.getClass();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (byte) 100 + "'", obj22.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test029");
        org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable> serializableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable>((java.io.Serializable) 100.0f);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test030");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        boolean boolean32 = objNodeImpl28.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl28.copy();
        objNodeImpl28.setDepth((int) '#');
        boolean boolean36 = objNodeImpl28.isRoot();
        boolean boolean37 = objNodeImpl28.isLeaf();
        objNodeImpl28.setName("Node(-1)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass42 = objNodeList41.getClass();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test031");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean12 = objNodeImpl8.isLeaf();
        boolean boolean13 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl8.getParent();
        java.lang.String str15 = objNodeImpl8.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setDepth(0);
        java.lang.Object obj19 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setDepth((int) (short) 1);
        boolean boolean26 = objNodeImpl21.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.lang.String str35 = objNodeImpl31.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl31.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl31.setName("");
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl21.setName("Node(1.0)");
        java.lang.Object obj59 = objNodeImpl21.getName();
        boolean boolean60 = objNodeImpl21.isRoot();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(100)" + "'", obj19.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(1.0)" + "'", str35.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj59 + "' != '" + "Node(1.0)" + "'", obj59.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test032");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl43.copy();
        objNodeImpl43.setName("Node(#)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl44);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test033");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl44.getParent();
        java.lang.Class<?> wildcardClass49 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl37.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj57 = objNodeImpl37.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setDepth((int) (short) 1);
        boolean boolean72 = objNodeImpl67.isRoot();
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        boolean boolean74 = objNodeImpl67.isRoot();
        objNodeImpl37.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl37.copy();
        boolean boolean77 = objNodeImpl76.isRoot();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        java.lang.Class<?> wildcardClass79 = objNodeImpl76.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test034");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        java.lang.String str40 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.String str48 = objNodeImpl44.toString();
        java.lang.Object obj49 = objNodeImpl44.getContent();
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        objNodeImpl37.setDepth(1);
        boolean boolean54 = objNodeImpl37.isLeaf();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean56 = objNodeImpl10.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 1.0f + "'", obj49.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test035");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass25 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth((int) '#');
        boolean boolean28 = objNodeImpl10.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test036");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        java.lang.Object obj6 = objNodeImpl1.getName();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "Node(100)" + "'", obj6.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test037");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setName("Node(Node(1.0))");
        java.lang.Object obj6 = objNodeImpl1.getName();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class<?> wildcardClass9 = obj7.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass9);
        java.lang.String str11 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl10.copy();
        boolean boolean13 = objNodeImpl12.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) boolean13);
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "Node(Node(1.0))" + "'", obj6.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(class java.lang.Object)" + "'", str11.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test038");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl7.getParent();
        java.lang.Class<?> wildcardClass18 = objNode17.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertNotNull(objNode17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test039");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        java.lang.Object obj42 = objNodeImpl33.getContent();
        java.lang.Object obj43 = objNodeImpl33.getName();
        boolean boolean44 = objNodeImpl33.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test040");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass25 = objNodeImpl10.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl10.getChildren();
        java.lang.String str27 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(1.0)" + "'", str27.equals("Node(1.0)"));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test041");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        objNodeImpl38.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Class<?> wildcardClass50 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj58 = objNodeImpl38.getContent();
        objNodeImpl38.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl38.getChildren();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str64 = objNodeImpl38.toString();
        java.lang.Object obj65 = objNodeImpl38.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode73 = objNodeImpl69.getParent();
        java.lang.Class<?> wildcardClass74 = objNodeImpl69.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl69.copy();
        java.lang.Object obj76 = objNodeImpl69.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode77 = objNodeImpl69.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl69.copy();
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        boolean boolean80 = objNodeImpl69.isLeaf();
        objNodeImpl69.setDepth((int) '#');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNull(objNode41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(Node(1.0))" + "'", str64.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(objNodeImpl75);
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 1.0f + "'", obj76.equals(1.0f));
        org.junit.Assert.assertNull(objNode77);
        org.junit.Assert.assertNotNull(objNodeImpl78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test042");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        java.lang.Class<?> wildcardClass38 = objNodeImpl30.getClass();
        java.lang.Object obj39 = objNodeImpl30.getContent();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl30);
        java.lang.Object obj41 = objNodeImpl30.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (byte) 100 + "'", obj39.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + (byte) 100 + "'", obj41.equals((byte) 100));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test043");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList12);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test044");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl32.copy();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        boolean boolean43 = objNodeImpl40.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.String str48 = objNodeImpl45.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str56 = objNodeImpl52.toString();
        java.lang.Object obj57 = objNodeImpl52.getContent();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl52);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 1.0f + "'", obj57.equals(1.0f));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test045");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl1.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertNotNull(objNodeList16);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test046");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setContent((java.lang.Object) "");
        objNodeImpl19.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        java.lang.Object obj25 = objNodeImpl24.getContent();
        objNodeImpl24.setName("Node()");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl24.getChildren();
        java.lang.Object obj30 = objNodeImpl24.getName();
        boolean boolean31 = objNodeImpl24.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "" + "'", obj25.equals(""));
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node()" + "'", obj30.equals("Node()"));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test047");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        boolean boolean18 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        objNodeImpl27.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Class<?> wildcardClass39 = objNodeImpl34.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Object obj47 = objNodeImpl27.getContent();
        objNodeImpl27.setName("Node(100)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj51 = objNodeImpl27.getName();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test048");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        java.lang.Object obj28 = objNodeImpl19.getContent();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl19.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl31.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (byte) 100 + "'", obj28.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(objNodeList32);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test049");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Object obj48 = objNodeImpl47.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl47.copy();
        java.lang.String str52 = objNodeImpl47.toString();
        java.lang.String str53 = objNodeImpl47.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(Node(1.0))" + "'", str52.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(Node(1.0))" + "'", str53.equals("Node(Node(1.0))"));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test050");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass32 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>> objNodeImplNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>>(objNodeImpl8);
        java.lang.Object obj34 = objNodeImpl8.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNotNull(objNodeList35);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test051");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        java.lang.Object obj15 = objNodeImpl1.getName();
        boolean boolean16 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "Node(100)" + "'", obj15.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test052");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl3.getChildren();
        java.lang.Class<?> wildcardClass13 = objNodeList12.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test053");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Object obj26 = null;
        objNodeImpl21.setContent(obj26);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl21);
        objNodeImpl21.setDepth((int) 'a');
        objNodeImpl21.setName("Node(Node(Node(Node())))");
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode25);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test054");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Object obj15 = objNodeImpl10.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl10.getParent();
        boolean boolean17 = objNodeImpl10.isLeaf();
        objNodeImpl10.setName("Node(Node(Node(Node())))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "Node(100)" + "'", obj15.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test055");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        boolean boolean18 = objNodeImpl12.isLeaf();
        objNodeImpl12.setContent((java.lang.Object) (-1));
        java.lang.Object obj21 = objNodeImpl12.getName();
        boolean boolean22 = objNodeImpl12.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl12.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl12.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl12.copy();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl12.copy();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "Node(100)" + "'", obj21.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(objNodeImpl27);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test056");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        objNodeImpl39.setDepth((int) 'a');
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass43 = objNodeImpl39.getClass();
        boolean boolean44 = objNodeImpl39.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj46 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl1.copy();
        java.lang.Object obj48 = objNodeImpl1.getContent();
        objNodeImpl1.setName("Node(1.0)");
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test057");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        boolean boolean84 = objNodeImpl30.isLeaf();
        java.lang.String str85 = objNodeImpl30.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Node(1.0)" + "'", str85.equals("Node(1.0)"));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test058");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.Object obj40 = objNodeImpl11.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        boolean boolean45 = objNodeImpl42.isLeaf();
        java.lang.Object obj46 = objNodeImpl42.getContent();
        java.lang.Object obj47 = objNodeImpl42.getName();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl11.setDepth(0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(100)" + "'", obj47.equals("Node(100)"));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test059");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        boolean boolean19 = objNodeImpl8.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList21 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl8.getChildren();
        java.lang.Object obj23 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeList21);
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "hi!" + "'", obj23.equals("hi!"));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test060");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        java.lang.Object obj74 = objNodeImpl21.getContent();
        boolean boolean75 = objNodeImpl21.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl21.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + 1.0f + "'", obj74.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(objNode76);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test061");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl5.getParent();
        java.lang.String str9 = objNodeImpl5.toString();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test062");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl15.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        objNodeImpl15.setName("Node(1.0)");
        java.lang.Object obj24 = objNodeImpl15.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(1.0)" + "'", obj24.equals("Node(1.0)"));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test063");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl36.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNull(objNode44);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test064");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        boolean boolean13 = objNodeImpl12.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test065");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        java.lang.String str40 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.String str48 = objNodeImpl44.toString();
        java.lang.Object obj49 = objNodeImpl44.getContent();
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        objNodeImpl37.setDepth(1);
        boolean boolean54 = objNodeImpl37.isLeaf();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean56 = objNodeImpl37.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 1.0f + "'", obj49.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test066");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        boolean boolean51 = objNodeImpl8.isRoot();
        boolean boolean52 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test067");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl8.setName("Node(1)");
        java.lang.String str20 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test068");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.String str39 = objNodeImpl27.toString();
        java.lang.Object obj40 = objNodeImpl27.getContent();
        objNodeImpl27.setDepth((int) (short) 0);
        objNodeImpl8.setContent((java.lang.Object) (short) 0);
        objNodeImpl8.setDepth((int) (short) 100);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Node(1.0)" + "'", str39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test069");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        java.lang.Class<?> wildcardClass29 = objNodeImpl20.getClass();
        boolean boolean30 = objNodeImpl20.isLeaf();
        objNodeImpl20.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl20.copy();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl18.setName("Node(Node(1.0))");
        objNodeImpl7.setContent((java.lang.Object) "Node(Node(1.0))");
        objNodeImpl7.setName("Node(Node(class java.lang.Object))");
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objNodeImpl33);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test070");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl20.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl24.copy();
        java.lang.Object obj26 = objNodeImpl24.getName();
        java.lang.Object obj27 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl24.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl28.getChildren();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        boolean boolean31 = objNodeImpl9.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(1.0)" + "'", obj26.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test071");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl24.getParent();
        objNodeImpl24.setName("Node()");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl24.copy();
        java.lang.String str29 = objNodeImpl24.toString();
        objNodeImpl24.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl24.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl32);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test072");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        boolean boolean18 = objNodeImpl7.isLeaf();
        boolean boolean19 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl7.getParent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNode20);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test073");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        objNodeImpl21.setName("Node(Node(Node()))");
        objNodeImpl21.setName("Node(-1)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList79 = objNodeImpl21.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl21.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList79);
        org.junit.Assert.assertNotNull(objNodeList80);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test074");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl49.getChildren();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeList50);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test075");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl15.copy();
        boolean boolean18 = objNodeImpl15.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl22.getParent();
        java.lang.Class<?> wildcardClass27 = objNodeImpl22.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj32 = objNodeImpl29.getName();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass36 = objNodeImpl29.getClass();
        objNodeImpl29.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl49.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl57.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        boolean boolean70 = objNodeImpl65.isRoot();
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        boolean boolean72 = objNodeImpl65.isRoot();
        boolean boolean73 = objNodeImpl65.isRoot();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl29.copy();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        boolean boolean78 = objNodeImpl15.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList16);
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(100)" + "'", obj32.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test076");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        boolean boolean11 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        boolean boolean20 = objNodeImpl15.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl15.getParent();
        java.lang.String str22 = objNodeImpl15.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean25 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(1.0)" + "'", str22.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test077");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str66 = objNodeImpl60.toString();
        objNodeImpl60.setName("Node(Node(Node(Node())))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node()" + "'", str66.equals("Node()"));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test078");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.lang.String str9 = objNodeImpl1.toString();
        java.lang.Object obj10 = objNodeImpl1.getContent();
        objNodeImpl1.setName("Node(Node(100))");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (byte) 100 + "'", obj10.equals((byte) 100));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test079");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        boolean boolean13 = objNodeImpl1.isRoot();
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl16.getClass();
        java.lang.Class<?> wildcardClass25 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl16.getParent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setDepth((int) (short) 1);
        boolean boolean34 = objNodeImpl29.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl43.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl43.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl50.getParent();
        java.lang.Class<?> wildcardClass55 = objNodeImpl50.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj60 = objNodeImpl57.getName();
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl43.setContent((java.lang.Object) objNodeImpl50);
        java.lang.Object obj63 = objNodeImpl43.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList71 = objNodeImpl65.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setDepth((int) (short) 1);
        boolean boolean78 = objNodeImpl73.isRoot();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        boolean boolean80 = objNodeImpl73.isRoot();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = objNodeImpl43.copy();
        java.lang.Class<?> wildcardClass83 = objNodeImpl82.getClass();
        objNodeImpl82.setName("Node(-1)");
        objNodeImpl29.setContent((java.lang.Object) objNodeImpl82);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertNotNull(objNodeList71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objNodeImpl82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test080");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        objNodeImpl21.setName("Node(Node(Node()))");
        objNodeImpl21.setName("Node(-1)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList79 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList79);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList79);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test081");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        boolean boolean18 = objNodeImpl12.isLeaf();
        java.lang.Class<?> wildcardClass19 = objNodeImpl12.getClass();
        objNodeImpl3.setContent((java.lang.Object) wildcardClass19);
        java.lang.String str21 = objNodeImpl3.toString();
        boolean boolean22 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(class org.misha.beanutils.tree.impl.NodeImpl)" + "'", str21.equals("Node(class org.misha.beanutils.tree.impl.NodeImpl)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test082");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        boolean boolean19 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj24 = objNodeImpl21.getName();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        objNodeImpl34.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl41.getParent();
        java.lang.Class<?> wildcardClass46 = objNodeImpl41.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl34.setContent((java.lang.Object) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl55.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = objNodeImpl55.copy();
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.lang.Object obj61 = new java.lang.Object();
        java.lang.Class<?> wildcardClass62 = obj61.getClass();
        java.lang.Class<?> wildcardClass63 = obj61.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        boolean boolean72 = objNodeImpl68.isLeaf();
        boolean boolean73 = objNodeImpl68.isRoot();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl64.setDepth(100);
        objNodeImpl8.setContent((java.lang.Object) 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(100)" + "'", obj24.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNull(objNode45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(objNodeImpl59);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test083");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = objNodeImpl29.copy();
        boolean boolean31 = objNodeImpl30.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertNotNull(objNodeImpl30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test084");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.String str38 = objNodeImpl10.toString();
        java.lang.Object obj39 = null;
        objNodeImpl10.setContent(obj39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl42.copy();
        objNodeImpl49.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl49.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl56.getParent();
        java.lang.Class<?> wildcardClass61 = objNodeImpl56.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj66 = objNodeImpl63.getName();
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl49.setContent((java.lang.Object) objNodeImpl56);
        java.lang.Object obj69 = objNodeImpl49.getContent();
        objNodeImpl49.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl49.getParent();
        objNodeImpl49.setDepth((int) '#');
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl10.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(0)" + "'", str38.equals("Node(0)"));
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNull(objNode72);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test085");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setDepth(100);
        java.lang.Object obj6 = objNodeImpl1.getContent();
        objNodeImpl1.setName("Node(-1)");
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + (byte) 100 + "'", obj6.equals((byte) 100));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test086");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        java.lang.Object obj20 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        objNodeImpl24.setName("");
        objNodeImpl24.setName("Node(0)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl24.getChildren();
        objNodeImpl8.setContent((java.lang.Object) objNodeList33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList33);
        objNodeImpl35.setDepth((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertNotNull(objNodeList33);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test087");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) "Node(Node())");
        boolean boolean2 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test088");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        java.lang.Object obj42 = objNodeImpl33.getContent();
        objNodeImpl33.setName("");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test089");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class<?> wildcardClass34 = obj32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass34);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean43 = objNodeImpl39.isLeaf();
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl39.setName("Node(1.0)");
        java.lang.Object obj48 = objNodeImpl39.getName();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean50 = objNodeImpl8.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(1.0)" + "'", obj48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objNodeList51);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test090");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl20.copy();
        boolean boolean27 = objNodeImpl26.isRoot();
        java.lang.Object obj28 = objNodeImpl26.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str36 = objNodeImpl32.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl41.getParent();
        java.lang.Object obj46 = null;
        objNodeImpl41.setContent(obj46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str55 = objNodeImpl49.toString();
        java.lang.Class<?> wildcardClass56 = objNodeImpl49.getClass();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0f + "'", obj28.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNull(objNode45);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(1.0)" + "'", str55.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test091");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl43.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.String str55 = objNodeImpl52.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.lang.String str63 = objNodeImpl59.toString();
        java.lang.Object obj64 = objNodeImpl59.getContent();
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str67 = objNodeImpl52.toString();
        objNodeImpl52.setName("Node(#)");
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl52.setName("Node()");
        java.lang.Object obj73 = objNodeImpl52.getContent();
        objNodeImpl52.setDepth(0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl52.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(1.0)" + "'", str55.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(1.0)" + "'", str63.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 1.0f + "'", obj64.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj73 + "' != '" + 1.0f + "'", obj73.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode76);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test092");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl8.getParent();
        boolean boolean52 = objNodeImpl8.isLeaf();
        objNodeImpl8.setName("Node(-1)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test093");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.String str4 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        boolean boolean6 = objNodeImpl5.isLeaf();
        java.lang.Object obj7 = objNodeImpl5.getName();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(class java.lang.Object)" + "'", str4.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(class java.lang.Object)" + "'", obj7.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test094");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        java.lang.Object obj28 = objNodeImpl17.getName();
        boolean boolean29 = objNodeImpl17.isLeaf();
        java.lang.Object obj30 = objNodeImpl17.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test095");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl1.copy();
        objNodeImpl18.setName("Node(1.0)");
        java.lang.String str21 = objNodeImpl18.toString();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1)" + "'", str21.equals("Node(1)"));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test096");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        objNodeImpl7.setName("Node([])");
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test097");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl36.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl36.copy();
        java.lang.Object obj49 = objNodeImpl48.getName();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNode45);
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(1.0)" + "'", obj49.equals("Node(1.0)"));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test098");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        boolean boolean12 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        boolean boolean23 = objNodeImpl16.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl16.getChildren();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Class<?> wildcardClass36 = objNodeImpl27.getClass();
        boolean boolean37 = objNodeImpl27.isLeaf();
        objNodeImpl27.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl27.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl40.getChildren();
        objNodeImpl16.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj43 = objNodeImpl16.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test099");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        java.lang.Class<?> wildcardClass25 = objNodeImpl17.getClass();
        boolean boolean26 = objNodeImpl17.isLeaf();
        java.lang.Object obj27 = objNodeImpl17.getContent();
        objNodeImpl3.setContent(obj27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        objNodeImpl3.setDepth((int) 'a');
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (byte) 100 + "'", obj27.equals((byte) 100));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test100");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        java.lang.Object obj29 = objNodeImpl28.getContent();
        java.lang.String str30 = objNodeImpl28.toString();
        objNodeImpl28.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        boolean boolean40 = objNodeImpl34.isLeaf();
        objNodeImpl34.setContent((java.lang.Object) (-1));
        java.lang.Object obj43 = objNodeImpl34.getName();
        boolean boolean44 = objNodeImpl34.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl34.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl47.getChildren();
        objNodeImpl47.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        java.lang.String str60 = objNodeImpl57.toString();
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl47.setName("Node(#)");
        objNodeImpl34.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = objNodeImpl47.copy();
        boolean boolean66 = objNodeImpl47.isLeaf();
        objNodeImpl47.setDepth((int) (short) 0);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl47.setName("Node(0.0)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(Node(1.0))" + "'", str30.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(objNodeList53);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Node(1.0)" + "'", str60.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test101");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setDepth(1);
        objNodeImpl42.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl42.getParent();
        objNodeImpl8.setParent(objNode61);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl66.getParent();
        java.lang.Class<?> wildcardClass71 = objNodeImpl66.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj76 = objNodeImpl73.getName();
        objNodeImpl66.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        objNodeImpl73.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode80 = objNodeImpl73.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList81 = objNodeImpl73.getChildren();
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl73);
        objNodeImpl73.setDepth((int) (byte) -1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode61);
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "Node(100)" + "'", obj76.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode80);
        org.junit.Assert.assertNotNull(objNodeList81);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test102");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        objNodeImpl39.setDepth((int) 'a');
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass43 = objNodeImpl39.getClass();
        boolean boolean44 = objNodeImpl39.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj46 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl1.copy();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(objNodeImpl48);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test103");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        boolean boolean18 = objNodeImpl7.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl7.getChildren();
        objNodeImpl7.setName("Node(Node())");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.String str31 = objNodeImpl27.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl27.getParent();
        boolean boolean33 = objNodeImpl27.isRoot();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl23.getParent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(1.0)" + "'", str31.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(objNode37);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test104");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean44 = objNodeImpl1.isLeaf();
        boolean boolean45 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass47 = objNodeImpl46.getClass();
        java.lang.Object obj48 = objNodeImpl46.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (-1) + "'", obj48.equals((-1)));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test105");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj24 = objNodeImpl3.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test106");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl1.setDepth(0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl1.getChildren();
        objNodeImpl1.setDepth(0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objNodeList50);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test107");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl12.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 0);
        objNodeImpl15.setDepth((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test108");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.String str42 = objNodeImpl39.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        java.lang.Object obj51 = objNodeImpl46.getContent();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str54 = objNodeImpl39.toString();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl39.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl58.copy();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj66 = objNodeImpl58.getName();
        objNodeImpl58.setName("Node(class java.lang.Object)");
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj70 = objNodeImpl58.getContent();
        objNodeImpl58.setDepth((int) (short) 100);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(1.0)" + "'", str54.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(1.0)" + "'", obj66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 1.0f + "'", obj70.equals(1.0f));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test109");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean22 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl3.getChildren();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList23);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test110");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl32.copy();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl40.copy();
        objNodeImpl47.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        objNodeImpl58.setDepth((int) 'a');
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.String str62 = objNodeImpl47.toString();
        boolean boolean63 = objNodeImpl47.isLeaf();
        java.lang.Object obj64 = objNodeImpl47.getName();
        objNodeImpl47.setName("Node(Node(1.0))");
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.Object obj68 = objNodeImpl47.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node()" + "'", str62.equals("Node()"));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "" + "'", obj68.equals(""));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test111");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        boolean boolean41 = objNodeImpl34.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test112");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        boolean boolean56 = objNodeImpl52.isLeaf();
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl52.getParent();
        java.lang.String str59 = objNodeImpl52.toString();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl47.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl61);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test113");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        java.lang.Object obj6 = objNodeImpl1.getContent();
        objNodeImpl1.setName("Node([])");
        java.lang.Object obj9 = objNodeImpl1.getContent();
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test114");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl8.getChildren();
        boolean boolean28 = objNodeImpl8.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl8.getChildren();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeList29);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test115");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.String str14 = objNodeImpl11.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl11.getChildren();
        objNodeImpl11.setDepth((int) (byte) 10);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1.0)" + "'", str14.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList16);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test116");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl26.getParent();
        java.lang.Class<?> wildcardClass31 = objNodeImpl26.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setDepth((int) (short) 1);
        boolean boolean54 = objNodeImpl49.isRoot();
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        boolean boolean56 = objNodeImpl49.isRoot();
        boolean boolean57 = objNodeImpl49.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList66 = objNodeImpl62.getChildren();
        java.lang.Object obj67 = new java.lang.Object();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        java.lang.Class<?> wildcardClass69 = obj67.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass69);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl72.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        boolean boolean78 = objNodeImpl74.isLeaf();
        boolean boolean79 = objNodeImpl74.isRoot();
        objNodeImpl70.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        objNodeImpl74.setName("Node(1.0)");
        java.lang.Object obj83 = objNodeImpl74.getName();
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj87 = objNodeImpl33.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList66);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(1.0)" + "'", obj83.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj87 + "' != '" + "Node(100)" + "'", obj87.equals("Node(100)"));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test117");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Object obj27 = objNodeImpl9.getName();
        objNodeImpl9.setDepth((int) (short) 10);
        java.lang.Object obj30 = objNodeImpl9.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test118");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        java.lang.Object obj45 = objNodeImpl36.getContent();
        java.lang.Object obj46 = objNodeImpl36.getContent();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 1.0f + "'", obj45.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test119");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        boolean boolean11 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        boolean boolean20 = objNodeImpl15.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl15.getParent();
        java.lang.String str22 = objNodeImpl15.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.Object obj25 = objNodeImpl1.getName();
        boolean boolean26 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(1.0)" + "'", str22.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test120");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test121");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        objNodeImpl8.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        java.lang.String str21 = objNodeImpl18.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setName("Node()");
        java.lang.Object obj26 = objNodeImpl8.getName();
        objNodeImpl8.setDepth((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node()" + "'", obj26.equals("Node()"));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test122");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl8.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        java.lang.Class<?> wildcardClass58 = objNodeImpl50.getClass();
        boolean boolean59 = objNodeImpl50.isLeaf();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList69 = objNodeImpl63.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = objNodeImpl63.copy();
        java.lang.Class<?> wildcardClass71 = objNodeImpl63.getClass();
        java.lang.Class<?> wildcardClass72 = objNodeImpl63.getClass();
        boolean boolean73 = objNodeImpl63.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = objNodeImpl63.copy();
        java.lang.String str75 = objNodeImpl74.toString();
        objNodeImpl50.setContent((java.lang.Object) objNodeImpl74);
        java.lang.Class<?> wildcardClass77 = objNodeImpl50.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(objNodeList69);
        org.junit.Assert.assertNotNull(objNodeImpl70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeImpl74);
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Node(100)" + "'", str75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test123");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        java.lang.Object obj16 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl11.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        java.lang.Object obj29 = objNodeImpl19.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.String str43 = objNodeImpl40.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.String str51 = objNodeImpl47.toString();
        java.lang.Object obj52 = objNodeImpl47.getContent();
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl40.setDepth(1);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.lang.Object obj58 = objNodeImpl40.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl40.getChildren();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.lang.Object obj62 = objNodeImpl5.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl5.getChildren();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (byte) 100 + "'", obj29.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Node(1.0)" + "'", str51.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 1.0f + "'", obj52.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(100)" + "'", obj58.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(1.0)" + "'", obj62.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList63);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test124");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.Class<?> wildcardClass59 = objNodeImpl47.getClass();
        java.lang.Object obj60 = objNodeImpl47.getName();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.Object obj62 = objNodeImpl47.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl66.getParent();
        java.lang.Object obj71 = null;
        objNodeImpl66.setContent(obj71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj77 = objNodeImpl74.getName();
        objNodeImpl66.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList86 = objNodeImpl80.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = objNodeImpl80.copy();
        objNodeImpl87.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode90 = objNodeImpl87.getParent();
        objNodeImpl74.setContent((java.lang.Object) objNodeImpl87);
        java.lang.Class<?> wildcardClass92 = objNodeImpl74.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl93 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl74);
        boolean boolean94 = objNodeImpl93.isLeaf();
        java.lang.Object obj95 = objNodeImpl93.getName();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl93);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode97 = objNodeImpl47.getParent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + 1.0f + "'", obj62.equals(1.0f));
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "Node(100)" + "'", obj77.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList86);
        org.junit.Assert.assertNotNull(objNodeImpl87);
        org.junit.Assert.assertNull(objNode90);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + obj95 + "' != '" + "Node(Node(Node()))" + "'", obj95.equals("Node(Node(Node()))"));
        org.junit.Assert.assertNull(objNode97);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test125");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        boolean boolean18 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        objNodeImpl27.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Class<?> wildcardClass39 = objNodeImpl34.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Object obj47 = objNodeImpl27.getContent();
        objNodeImpl27.setName("Node(100)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean51 = objNodeImpl27.isRoot();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test126");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = objNodeImpl29.copy();
        objNodeImpl29.setName("Node(1)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertNotNull(objNodeImpl30);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test127");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        java.lang.Class<?> wildcardClass76 = objNodeImpl62.getClass();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test128");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        java.lang.Class<?> wildcardClass25 = objNodeImpl17.getClass();
        boolean boolean26 = objNodeImpl17.isLeaf();
        java.lang.Object obj27 = objNodeImpl17.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl17.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl17.getChildren();
        objNodeImpl17.setDepth((int) (short) 100);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + (byte) 100 + "'", obj27.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList28);
        org.junit.Assert.assertNotNull(objNodeList29);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test129");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        boolean boolean23 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Object obj40 = objNodeImpl35.getContent();
        java.lang.Object obj41 = objNodeImpl35.getName();
        objNodeImpl8.setContent(obj41);
        java.lang.String str43 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(Node(100))" + "'", str43.equals("Node(Node(100))"));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test130");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.String str42 = objNodeImpl39.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        java.lang.Object obj51 = objNodeImpl46.getContent();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str54 = objNodeImpl39.toString();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl39.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl58.copy();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj66 = objNodeImpl58.getName();
        objNodeImpl58.setName("Node(class java.lang.Object)");
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl58.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode71 = objNodeImpl58.getParent();
        boolean boolean72 = objNodeImpl58.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(1.0)" + "'", str54.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(1.0)" + "'", obj66.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode70);
        org.junit.Assert.assertNotNull(objNode71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test131");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl8.getChildren();
        boolean boolean32 = objNodeImpl8.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList33);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objNodeList33);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test132");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.Class<?> wildcardClass59 = objNodeImpl47.getClass();
        java.lang.Object obj60 = objNodeImpl47.getName();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setName("Node(Node(Node()))");
        java.lang.Object obj64 = objNodeImpl33.getContent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 1.0f + "'", obj64.equals(1.0f));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test133");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Class<?> wildcardClass27 = objNodeImpl17.getClass();
        objNodeImpl17.setName("Node(#)");
        java.lang.Object obj30 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl17.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(#)" + "'", obj30.equals("Node(#)"));
        org.junit.Assert.assertNotNull(objNodeImpl31);
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test134");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl8);
        boolean boolean11 = objNodeImpl8.isRoot();
        java.lang.Object obj12 = objNodeImpl8.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "Node(100)" + "'", obj12.equals("Node(100)"));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test135");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        objNodeImpl35.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl35.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl35.setContent((java.lang.Object) objNodeImpl42);
        java.lang.Object obj55 = objNodeImpl35.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl57.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        boolean boolean70 = objNodeImpl65.isRoot();
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        boolean boolean72 = objNodeImpl65.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        boolean boolean74 = objNodeImpl35.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList82 = objNodeImpl76.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl84.setDepth((int) (short) 1);
        boolean boolean89 = objNodeImpl84.isRoot();
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean91 = objNodeImpl84.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode92 = objNodeImpl84.getParent();
        objNodeImpl84.setDepth((int) (short) 1);
        java.lang.Object obj95 = objNodeImpl84.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(objNodeList82);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(objNode92);
        org.junit.Assert.assertTrue("'" + obj95 + "' != '" + "Node(100)" + "'", obj95.equals("Node(100)"));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test136");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str62 = objNodeImpl8.toString();
        java.lang.Object obj63 = objNodeImpl8.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode65 = objNodeImpl8.getParent();
        boolean boolean66 = objNodeImpl8.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(Node(1.0))" + "'", str62.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + obj63 + "' != '" + "Node(100)" + "'", obj63.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode64);
        org.junit.Assert.assertNotNull(objNode65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test137");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl29.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl40.copy();
        objNodeImpl47.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl47.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl54.getParent();
        java.lang.Class<?> wildcardClass59 = objNodeImpl54.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj64 = objNodeImpl61.getName();
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl68.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl68.copy();
        objNodeImpl75.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl75.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode86 = objNodeImpl82.getParent();
        java.lang.Class<?> wildcardClass87 = objNodeImpl82.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj92 = objNodeImpl89.getName();
        objNodeImpl82.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl89);
        objNodeImpl75.setContent((java.lang.Object) objNodeImpl82);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl75);
        objNodeImpl29.setContent((java.lang.Object) objNodeImpl75);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList97 = objNodeImpl75.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeImpl75);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertNull(objNode86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + obj92 + "' != '" + "Node(100)" + "'", obj92.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList97);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test138");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl15.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.Object obj22 = objNodeImpl15.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test139");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        objNodeImpl25.setContent((java.lang.Object) objNodeImpl27);
        objNodeImpl25.setDepth((int) (byte) 0);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj40 = objNodeImpl37.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl37.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl41.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl42);
        boolean boolean44 = objNodeImpl43.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl47.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = objNodeImpl47.copy();
        objNodeImpl54.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode57 = objNodeImpl54.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode65 = objNodeImpl61.getParent();
        java.lang.Class<?> wildcardClass66 = objNodeImpl61.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj71 = objNodeImpl68.getName();
        objNodeImpl61.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl54.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Object obj74 = objNodeImpl54.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList82 = objNodeImpl76.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl84.setDepth((int) (short) 1);
        boolean boolean89 = objNodeImpl84.isRoot();
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean91 = objNodeImpl84.isRoot();
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl93 = objNodeImpl54.copy();
        java.lang.String str94 = objNodeImpl93.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = objNodeImpl93.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl96 = objNodeImpl93.copy();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl96);
        objNodeImpl25.setContent((java.lang.Object) objNodeImpl96);
        java.lang.Object obj99 = objNodeImpl96.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(objNodeList53);
        org.junit.Assert.assertNotNull(objNodeImpl54);
        org.junit.Assert.assertNull(objNode57);
        org.junit.Assert.assertNull(objNode65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "Node(100)" + "'", obj71.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(objNodeList82);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(objNodeImpl93);
        org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Node(Node(1.0))" + "'", str94.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeImpl95);
        org.junit.Assert.assertNotNull(objNodeImpl96);
        org.junit.Assert.assertTrue("'" + obj99 + "' != '" + "Node(Node(1.0))" + "'", obj99.equals("Node(Node(1.0))"));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test140");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl43.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl43.getChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertNotNull(objNodeList47);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test141");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        objNodeImpl10.setDepth((int) ' ');
        boolean boolean68 = objNodeImpl10.isLeaf();
        java.lang.String str69 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test142");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl33.getParent();
        boolean boolean43 = objNodeImpl33.isLeaf();
        boolean boolean44 = objNodeImpl33.isRoot();
        boolean boolean45 = objNodeImpl33.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test143");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj20 = objNodeImpl16.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass22 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test144");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Class<?> wildcardClass21 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.lang.String str28 = objNodeImpl16.toString();
        java.lang.Object obj29 = objNodeImpl16.getContent();
        objNodeImpl16.setName("Node(Node())");
        boolean boolean32 = objNodeImpl16.isRoot();
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.String str34 = objNodeImpl16.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl43.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.String str55 = objNodeImpl52.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.lang.String str63 = objNodeImpl59.toString();
        java.lang.Object obj64 = objNodeImpl59.getContent();
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str67 = objNodeImpl52.toString();
        objNodeImpl36.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList69 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl36);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl16.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Node(1.0)" + "'", str34.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(1.0)" + "'", str55.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(1.0)" + "'", str63.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 1.0f + "'", obj64.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList69);
        org.junit.Assert.assertNull(objNode72);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test145");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Class<?> wildcardClass41 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList42);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeList42);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test146");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl29);
        boolean boolean39 = objNodeImpl29.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl29.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(objNode40);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test147");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl3.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl17);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test148");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        boolean boolean17 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        boolean boolean32 = objNodeImpl27.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean34 = objNodeImpl27.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str43 = objNodeImpl39.toString();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl39.setDepth((int) (byte) 100);
        boolean boolean47 = objNodeImpl39.isRoot();
        boolean boolean48 = objNodeImpl39.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl39.getChildren();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj51 = objNodeImpl9.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test149");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setName("Node(1.0)");
        java.lang.Object obj28 = objNodeImpl10.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(1.0)" + "'", obj28.equals("Node(1.0)"));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test150");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        java.lang.Object obj45 = objNodeImpl36.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl36.getParent();
        java.lang.Object obj47 = objNodeImpl36.getContent();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 1.0f + "'", obj45.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 1.0f + "'", obj47.equals(1.0f));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test151");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "Node(#)");
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test152");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Object obj8 = objNodeImpl3.getContent();
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl3.setName("Node(1.0)");
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test153");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        java.lang.String str28 = objNodeImpl17.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(#)" + "'", str28.equals("Node(#)"));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test154");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj47 = objNodeImpl38.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl38);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl53.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl53.copy();
        objNodeImpl53.setDepth((int) '#');
        objNodeImpl53.setName("Node(100)");
        boolean boolean63 = objNodeImpl53.isRoot();
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 1.0f + "'", obj47.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test155");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl11.copy();
        boolean boolean38 = objNodeImpl37.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test156");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass28 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        java.lang.Class<?> wildcardClass38 = objNodeImpl30.getClass();
        java.lang.Class<?> wildcardClass39 = objNodeImpl30.getClass();
        boolean boolean40 = objNodeImpl30.isLeaf();
        objNodeImpl30.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl30.copy();
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl30);
        java.lang.Object obj45 = objNodeImpl30.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + (byte) 100 + "'", obj45.equals((byte) 100));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test157");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl6.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl6.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        java.lang.String str18 = objNodeImpl15.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str26 = objNodeImpl22.toString();
        java.lang.Object obj27 = objNodeImpl22.getContent();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl6.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str30 = objNodeImpl15.toString();
        objNodeImpl15.setName("Node(1.0)");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str34 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(1.0)" + "'", str18.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Node(1.0)" + "'", str26.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(1.0)" + "'", str30.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Node(1.0)" + "'", str34.equals("Node(1.0)"));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test158");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        boolean boolean18 = objNodeImpl7.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl7.getChildren();
        objNodeImpl7.setName("Node(Node())");
        boolean boolean22 = objNodeImpl7.isRoot();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test159");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl27.getChildren();
        java.lang.Object obj39 = objNodeImpl27.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test160");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setDepth((int) (short) 1);
        boolean boolean23 = objNodeImpl18.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        java.lang.Object obj25 = objNodeImpl18.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl29.getParent();
        java.lang.Class<?> wildcardClass34 = objNodeImpl29.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        objNodeImpl29.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl29);
        java.lang.Object obj42 = objNodeImpl29.getName();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl18);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 1.0f + "'", obj25.equals(1.0f));
        org.junit.Assert.assertNull(objNode33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test161");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(objNodeImpl39);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test162");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl32.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl32.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl68);
        java.lang.Object obj81 = objNodeImpl61.getContent();
        objNodeImpl61.setName("Node(100)");
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList86 = objNodeImpl32.getChildren();
        objNodeImpl32.setName("Node(100)");
        java.lang.Object obj89 = new java.lang.Object();
        java.lang.Class<?> wildcardClass90 = obj89.getClass();
        java.lang.Class<?> wildcardClass91 = obj89.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl92 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass91);
        java.lang.String str93 = objNodeImpl92.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl94 = objNodeImpl92.copy();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl92);
        objNodeImpl32.setName("Node(#)");
        java.lang.String str98 = objNodeImpl32.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(objNodeList86);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + str93 + "' != '" + "Node(class java.lang.Object)" + "'", str93.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl94);
        org.junit.Assert.assertTrue("'" + str98 + "' != '" + "Node(Node(1.0))" + "'", str98.equals("Node(Node(1.0))"));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test163");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        boolean boolean12 = objNodeImpl3.isLeaf();
        java.lang.Object obj13 = objNodeImpl3.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl3.getChildren();
        boolean boolean15 = objNodeImpl3.isRoot();
        java.lang.Object obj16 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl3.getParent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (byte) 100 + "'", obj13.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + (byte) 100 + "'", obj16.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode17);
        org.junit.Assert.assertNotNull(objNode18);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test164");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        objNodeImpl39.setDepth((int) 'a');
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass43 = objNodeImpl39.getClass();
        boolean boolean44 = objNodeImpl39.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj46 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl1.copy();
        java.lang.Object obj48 = objNodeImpl1.getContent();
        java.lang.String str49 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass50 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test165");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test166");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.String str4 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass6 = objNodeImpl5.getClass();
        boolean boolean7 = objNodeImpl5.isRoot();
        boolean boolean8 = objNodeImpl5.isRoot();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(class java.lang.Object)" + "'", str4.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test167");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList13 = objNodeImpl7.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl7.copy();
        objNodeImpl14.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl14.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Class<?> wildcardClass26 = objNodeImpl21.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl14.setContent((java.lang.Object) objNodeImpl21);
        java.lang.Object obj34 = objNodeImpl14.getContent();
        objNodeImpl14.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl14.getParent();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class<?> wildcardClass40 = obj38.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass40);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        boolean boolean49 = objNodeImpl45.isLeaf();
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl45.setName("Node(1.0)");
        java.lang.Object obj54 = objNodeImpl45.getName();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        boolean boolean57 = objNodeImpl14.isRoot();
        java.lang.Object obj58 = objNodeImpl14.getContent();
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeList13);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(1.0)" + "'", obj54.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(obj58);
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test168");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl15.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str22 = objNodeImpl15.toString();
        java.lang.Object obj23 = objNodeImpl15.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl15.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(1.0)" + "'", str22.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl24);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test169");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl18.getParent();
        java.lang.Class<?> wildcardClass23 = objNodeImpl18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj28 = objNodeImpl25.getName();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        objNodeImpl25.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass32 = objNodeImpl25.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        boolean boolean37 = objNodeImpl34.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl40.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.String str52 = objNodeImpl49.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.lang.String str60 = objNodeImpl56.toString();
        java.lang.Object obj61 = objNodeImpl56.getContent();
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str64 = objNodeImpl49.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        java.lang.String str72 = objNodeImpl68.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode73 = objNodeImpl68.getParent();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl34.setContent((java.lang.Object) objNodeImpl68);
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.Class<?> wildcardClass77 = objNodeImpl25.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode79 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(1.0)" + "'", str52.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Node(1.0)" + "'", str60.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + 1.0f + "'", obj61.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(1.0)" + "'", str64.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Node(1.0)" + "'", str72.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode73);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(objNode79);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test170");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.String str4 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass6 = objNodeImpl5.getClass();
        boolean boolean7 = objNodeImpl5.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl5.getParent();
        java.lang.Object obj9 = objNodeImpl5.getName();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(class java.lang.Object)" + "'", str4.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "Node(class java.lang.Object)" + "'", obj9.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test171");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.String str42 = objNodeImpl39.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        java.lang.Object obj51 = objNodeImpl46.getContent();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str54 = objNodeImpl39.toString();
        objNodeImpl39.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Object obj65 = null;
        objNodeImpl60.setContent(obj65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj71 = objNodeImpl68.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setDepth((int) (short) 1);
        boolean boolean79 = objNodeImpl74.isRoot();
        objNodeImpl60.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl74.copy();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl9.setName("Node(Node(100))");
        objNodeImpl9.setName("Node()");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(1.0)" + "'", str54.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "Node(100)" + "'", obj71.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objNodeImpl81);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test172");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl36.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNull(objNode45);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test173");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str48 = objNodeImpl38.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(100)" + "'", str48.equals("Node(100)"));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test174");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setName("Node(1)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test175");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl8.getParent();
        java.lang.String str44 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(class java.lang.Object)" + "'", str44.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test176");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl6.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl6.copy();
        objNodeImpl13.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl13.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Class<?> wildcardClass25 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        objNodeImpl13.setContent((java.lang.Object) objNodeImpl20);
        java.lang.Object obj33 = objNodeImpl13.getContent();
        objNodeImpl13.setName("Node(100)");
        objNodeImpl13.setDepth((int) (short) -1);
        objNodeImpl13.setName("Node(#)");
        java.lang.String str40 = objNodeImpl13.toString();
        objNodeImpl13.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass43 = objNodeImpl13.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl47.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl47.copy();
        objNodeImpl47.setDepth((int) '#');
        boolean boolean55 = objNodeImpl47.isRoot();
        java.lang.Class<?> wildcardClass56 = objNodeImpl47.getClass();
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.Class<?> wildcardClass58 = objNodeImpl13.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(Node(1.0))" + "'", str40.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test177");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setContent((java.lang.Object) "");
        objNodeImpl19.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        java.lang.Object obj25 = objNodeImpl24.getContent();
        objNodeImpl24.setName("Node()");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl24.getChildren();
        java.lang.Object obj30 = objNodeImpl24.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "" + "'", obj25.equals(""));
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node()" + "'", obj30.equals("Node()"));
        org.junit.Assert.assertNotNull(objNodeImpl31);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test178");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Class<?> wildcardClass48 = objNodeImpl43.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj53 = objNodeImpl50.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        objNodeImpl36.setContent((java.lang.Object) objNodeImpl43);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl8.copy();
        boolean boolean58 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "Node(100)" + "'", obj53.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test179");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl11.getChildren();
        boolean boolean13 = objNodeImpl11.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test180");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.Object obj26 = new java.lang.Object();
        java.lang.Class<?> wildcardClass27 = obj26.getClass();
        java.lang.Class<?> wildcardClass28 = obj26.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass28);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean37 = objNodeImpl33.isLeaf();
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl29.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl33.getParent();
        boolean boolean44 = objNodeImpl33.isLeaf();
        objNodeImpl20.setContent((java.lang.Object) boolean44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str78 = objNodeImpl63.toString();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = objNodeImpl63.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj85 = objNodeImpl82.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = objNodeImpl82.copy();
        objNodeImpl82.setName("Node(1.0)");
        objNodeImpl80.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList90 = objNodeImpl82.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode91 = objNodeImpl82.getParent();
        objNodeImpl20.addChild(objNode91);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNode42);
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl80);
        org.junit.Assert.assertTrue("'" + obj85 + "' != '" + "Node(100)" + "'", obj85.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl86);
        org.junit.Assert.assertNotNull(objNodeList90);
        org.junit.Assert.assertNotNull(objNode91);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test181");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl1.setDepth(0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        java.lang.Class<?> wildcardClass62 = objNodeImpl54.getClass();
        java.lang.Class<?> wildcardClass63 = objNodeImpl54.getClass();
        boolean boolean64 = objNodeImpl54.isLeaf();
        objNodeImpl54.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = objNodeImpl54.copy();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = objNodeImpl52.copy();
        boolean boolean70 = objNodeImpl52.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objNodeImpl67);
        org.junit.Assert.assertNotNull(objNodeImpl69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test182");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl8.isLeaf();
        boolean boolean10 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Class<?> wildcardClass19 = objNodeImpl14.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj24 = objNodeImpl21.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl14.setName("");
        java.lang.Class<?> wildcardClass28 = objNodeImpl14.getClass();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.Object obj30 = new java.lang.Object();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        java.lang.Class<?> wildcardClass32 = obj30.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass32);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl33.copy();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        java.lang.Object obj48 = objNodeImpl38.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode57 = objNodeImpl53.getParent();
        java.lang.Object obj58 = null;
        objNodeImpl53.setContent(obj58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj64 = objNodeImpl61.getName();
        objNodeImpl53.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList73 = objNodeImpl67.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = objNodeImpl67.copy();
        objNodeImpl74.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode77 = objNodeImpl74.getParent();
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl74);
        java.lang.Class<?> wildcardClass79 = objNodeImpl61.getClass();
        java.lang.Object obj80 = objNodeImpl61.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean88 = objNodeImpl82.isLeaf();
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl82);
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        java.lang.Class<?> wildcardClass92 = objNodeImpl82.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(100)" + "'", obj24.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertNull(objNode57);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList73);
        org.junit.Assert.assertNotNull(objNodeImpl74);
        org.junit.Assert.assertNull(objNode77);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test183");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl62.setDepth(0);
        java.lang.Class<?> wildcardClass78 = objNodeImpl62.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        boolean boolean86 = objNodeImpl82.isLeaf();
        boolean boolean87 = objNodeImpl82.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = objNodeImpl82.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = objNodeImpl88.copy();
        objNodeImpl62.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl89);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objNodeImpl88);
        org.junit.Assert.assertNotNull(objNodeImpl89);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test184");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl6.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl6.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        java.lang.String str18 = objNodeImpl15.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str26 = objNodeImpl22.toString();
        java.lang.Object obj27 = objNodeImpl22.getContent();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl6.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str30 = objNodeImpl15.toString();
        objNodeImpl15.setName("Node(1.0)");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.Object obj34 = objNodeImpl1.getContent();
        boolean boolean35 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(1.0)" + "'", str18.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Node(1.0)" + "'", str26.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(1.0)" + "'", str30.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test185");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl43.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.String str55 = objNodeImpl52.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.lang.String str63 = objNodeImpl59.toString();
        java.lang.Object obj64 = objNodeImpl59.getContent();
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str67 = objNodeImpl52.toString();
        objNodeImpl52.setName("Node(#)");
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl33.setName("");
        java.lang.Class<?> wildcardClass73 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass73);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(1.0)" + "'", str55.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(1.0)" + "'", str63.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + 1.0f + "'", obj64.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test186");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        boolean boolean37 = objNodeImpl36.isLeaf();
        boolean boolean38 = objNodeImpl36.isRoot();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl36);
        objNodeImpl36.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl36.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNodeImpl42);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test187");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl34.getParent();
        boolean boolean42 = objNodeImpl34.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNode41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test188");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        boolean boolean13 = objNodeImpl1.isRoot();
        java.lang.Object obj14 = objNodeImpl1.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test189");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl15.copy();
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList16);
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(Node(1.0))" + "'", obj18.equals("Node(Node(1.0))"));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test190");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl3.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeList18.getClass();
        java.lang.Class<?> wildcardClass20 = objNodeList18.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test191");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setDepth((int) (short) 1);
        boolean boolean58 = objNodeImpl53.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList67 = objNodeImpl61.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = objNodeImpl61.copy();
        objNodeImpl68.setDepth((int) 'a');
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList73 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode74 = objNodeImpl41.getParent();
        boolean boolean75 = objNodeImpl41.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl41.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNodeList67);
        org.junit.Assert.assertNotNull(objNodeImpl68);
        org.junit.Assert.assertNotNull(objNodeList73);
        org.junit.Assert.assertNotNull(objNode74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objNodeList76);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test192");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        objNodeImpl1.setDepth((int) '#');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test193");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        boolean boolean83 = objNodeImpl79.isLeaf();
        boolean boolean84 = objNodeImpl79.isRoot();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        java.lang.Object obj86 = objNodeImpl79.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + 1.0f + "'", obj86.equals(1.0f));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test194");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl1.setDepth((int) (short) 10);
        boolean boolean15 = objNodeImpl1.isRoot();
        java.lang.Object obj16 = new java.lang.Object();
        java.lang.Class<?> wildcardClass17 = obj16.getClass();
        java.lang.Class<?> wildcardClass18 = obj16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        boolean boolean27 = objNodeImpl23.isLeaf();
        boolean boolean28 = objNodeImpl23.isRoot();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        objNodeImpl23.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl23.getParent();
        boolean boolean33 = objNodeImpl23.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setDepth((int) (short) 1);
        objNodeImpl35.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl35.copy();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl23.setDepth((int) 'a');
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl23.getParent();
        java.lang.Class<?> wildcardClass47 = objNode46.getClass();
        objNodeImpl1.setContent((java.lang.Object) wildcardClass47);
        boolean boolean49 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNode32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test195");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setDepth((int) (short) 1);
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl13.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Class<?> wildcardClass50 = objNodeImpl32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl32);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl13);
        java.lang.Object obj54 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList91 = objNodeImpl84.getChildren();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.Object obj93 = objNodeImpl84.getContent();
        boolean boolean94 = objNodeImpl84.isRoot();
        java.lang.String str95 = objNodeImpl84.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertNotNull(objNodeList91);
        org.junit.Assert.assertTrue("'" + obj93 + "' != '" + 1.0f + "'", obj93.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Node(1.0)" + "'", str95.equals("Node(1.0)"));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test196");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList29);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList29);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test197");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        boolean boolean29 = objNodeImpl28.isLeaf();
        boolean boolean30 = objNodeImpl28.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Class<?> wildcardClass39 = objNodeImpl34.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl34.setName("");
        java.lang.Class<?> wildcardClass48 = objNodeImpl34.getClass();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        java.lang.Class<?> wildcardClass52 = obj50.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl53.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl53.copy();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl34.getChildren();
        objNodeImpl1.setContent((java.lang.Object) objNodeList57);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertNotNull(objNodeList57);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test198");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(a)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test199");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl12.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl12.copy();
        java.lang.Class<?> wildcardClass15 = objNodeImpl12.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(100)" + "'", str13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test200");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        boolean boolean13 = objNodeImpl1.isRoot();
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Class<?> wildcardClass24 = objNodeImpl19.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj29 = objNodeImpl26.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl26.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl34.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setDepth((int) (short) 1);
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean49 = objNodeImpl42.isRoot();
        boolean boolean50 = objNodeImpl42.isRoot();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl26.setDepth(10);
        java.lang.String str54 = objNodeImpl26.toString();
        java.lang.Object obj55 = null;
        objNodeImpl26.setContent(obj55);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList64 = objNodeImpl58.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = objNodeImpl58.copy();
        objNodeImpl65.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl65.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl72.getParent();
        java.lang.Class<?> wildcardClass77 = objNodeImpl72.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj82 = objNodeImpl79.getName();
        objNodeImpl72.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        objNodeImpl65.setContent((java.lang.Object) objNodeImpl72);
        java.lang.Object obj85 = objNodeImpl65.getContent();
        objNodeImpl65.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode88 = objNodeImpl65.getParent();
        objNodeImpl65.setDepth((int) '#');
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.Class<?> wildcardClass92 = objNodeImpl65.getClass();
        objNodeImpl65.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl65);
        objNodeImpl1.setName("Node(0.0)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(0)" + "'", str54.equals("Node(0)"));
        org.junit.Assert.assertNotNull(objNodeList64);
        org.junit.Assert.assertNotNull(objNodeImpl65);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNull(objNode76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + obj82 + "' != '" + "Node(100)" + "'", obj82.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertNull(objNode88);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test201");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl6.setContent((java.lang.Object) 1.0f);
        java.lang.String str9 = objNodeImpl6.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.String str17 = objNodeImpl13.toString();
        java.lang.Object obj18 = objNodeImpl13.getContent();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl21.setDepth(100);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl21.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        java.lang.String str73 = objNodeImpl72.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl77.setContent((java.lang.Object) 1.0f);
        objNodeImpl75.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl77);
        boolean boolean81 = objNodeImpl77.isLeaf();
        boolean boolean82 = objNodeImpl77.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl77.getParent();
        java.lang.String str84 = objNodeImpl77.toString();
        objNodeImpl72.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl77);
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl77);
        objNodeImpl77.setName("hi!");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0f + "'", obj18.equals(1.0f));
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Node(Node(1.0))" + "'", str73.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertTrue("'" + str84 + "' != '" + "Node(1.0)" + "'", str84.equals("Node(1.0)"));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test202");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl10.copy();
        objNodeImpl20.setDepth((int) (byte) 10);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objNodeImpl20);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test203");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        java.lang.Object obj8 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl1.getParent();
        boolean boolean10 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "hi!" + "'", obj8.equals("hi!"));
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test204");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Class<?> wildcardClass36 = objNodeImpl31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj44 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setDepth((int) (short) 1);
        boolean boolean59 = objNodeImpl54.isRoot();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean61 = objNodeImpl54.isRoot();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl24.copy();
        boolean boolean64 = objNodeImpl63.isRoot();
        java.lang.Object obj65 = objNodeImpl63.getContent();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean67 = objNodeImpl9.isRoot();
        objNodeImpl9.setDepth((int) '4');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = objNodeImpl9.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objNodeImpl70);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test205");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl12.setName("Node(#)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        boolean boolean22 = objNodeImpl16.isLeaf();
        objNodeImpl16.setContent((java.lang.Object) (-1));
        java.lang.Object obj25 = objNodeImpl16.getName();
        boolean boolean26 = objNodeImpl16.isRoot();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test206");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass38 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl42.copy();
        objNodeImpl42.setDepth((int) '#');
        boolean boolean50 = objNodeImpl42.isRoot();
        java.lang.Class<?> wildcardClass51 = objNodeImpl42.getClass();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl42.getChildren();
        objNodeImpl42.setName("Node([])");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(objNodeList53);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test207");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl19.setDepth((int) (byte) 1);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test208");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl3.copy();
        java.lang.Object obj13 = objNodeImpl3.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test209");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl11.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl31.getParent();
        boolean boolean39 = objNodeImpl31.isLeaf();
        java.lang.Class<?> wildcardClass40 = objNodeImpl31.getClass();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl31);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Object obj50 = null;
        objNodeImpl45.setContent(obj50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj56 = objNodeImpl53.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl59.copy();
        objNodeImpl66.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl66.getParent();
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl66);
        objNodeImpl53.setName("hi!");
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean74 = objNodeImpl53.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode82 = objNodeImpl78.getParent();
        java.lang.Object obj83 = null;
        objNodeImpl78.setContent(obj83);
        objNodeImpl78.setName("Node(1.0)");
        objNodeImpl78.setDepth(100);
        boolean boolean89 = objNodeImpl78.isRoot();
        objNodeImpl53.setContent((java.lang.Object) boolean89);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "Node(100)" + "'", obj56.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(objNode82);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test210");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 1);
        boolean boolean28 = objNodeImpl10.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        java.lang.Class<?> wildcardClass39 = objNodeImpl31.getClass();
        java.lang.Class<?> wildcardClass40 = objNodeImpl31.getClass();
        boolean boolean41 = objNodeImpl31.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        boolean boolean49 = objNodeImpl45.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl45.copy();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj56 = objNodeImpl53.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl53.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl57.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl58.getChildren();
        objNodeImpl45.setContent((java.lang.Object) objNodeImpl58);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class<?> wildcardClass64 = obj62.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl65.copy();
        java.lang.Object obj67 = objNodeImpl65.getName();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNode29);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "Node(100)" + "'", obj56.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "Node(class java.lang.Object)" + "'", obj67.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test211");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        boolean boolean29 = objNodeImpl20.isLeaf();
        java.lang.Object obj30 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl20.getChildren();
        boolean boolean32 = objNodeImpl20.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl9.getParent();
        java.lang.Object obj36 = objNodeImpl9.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (byte) 100 + "'", obj30.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 1.0f + "'", obj36.equals(1.0f));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test212");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl3.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test213");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean47 = objNodeImpl8.isLeaf();
        java.lang.Object obj48 = objNodeImpl8.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test214");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        java.lang.Class<?> wildcardClass16 = objNodeImpl8.getClass();
        boolean boolean17 = objNodeImpl8.isLeaf();
        java.lang.Object obj18 = objNodeImpl8.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        boolean boolean20 = objNodeImpl8.isRoot();
        java.lang.Object obj21 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl8.getParent();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + (byte) 100 + "'", obj21.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode22);
        org.junit.Assert.assertNotNull(objNode23);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test215");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Class<?> wildcardClass48 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl49);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl50.getChildren();
        java.lang.Class<?> wildcardClass52 = objNodeList51.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test216");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.String str48 = objNodeImpl45.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str56 = objNodeImpl52.toString();
        java.lang.Object obj57 = objNodeImpl52.getContent();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        java.lang.Class<?> wildcardClass64 = obj62.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass64);
        objNodeImpl52.setContent((java.lang.Object) wildcardClass64);
        java.lang.String str67 = objNodeImpl52.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList75 = objNodeImpl69.getChildren();
        objNodeImpl69.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        java.lang.String str82 = objNodeImpl79.toString();
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        objNodeImpl69.setName("Node(#)");
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode87 = objNodeImpl52.getParent();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl52.setName("Node(Node(1))");
        java.lang.Object obj91 = objNodeImpl52.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 1.0f + "'", obj57.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(class java.lang.Object)" + "'", str67.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList75);
        org.junit.Assert.assertTrue("'" + str82 + "' != '" + "Node(1.0)" + "'", str82.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode87);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + "Node(Node(1))" + "'", obj91.equals("Node(Node(1))"));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test217");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl1.copy();
        java.lang.String str50 = objNodeImpl49.toString();
        java.lang.Object obj51 = objNodeImpl49.getContent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl49.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl63.setDepth(1);
        objNodeImpl63.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode82 = objNodeImpl63.getParent();
        java.lang.Object obj83 = objNodeImpl63.getName();
        objNodeImpl49.setContent(obj83);
        boolean boolean85 = objNodeImpl49.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode82);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(100)" + "'", obj83.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test218");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        boolean boolean29 = objNodeImpl20.isLeaf();
        java.lang.Object obj30 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl20.getChildren();
        boolean boolean32 = objNodeImpl20.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.Object obj34 = objNodeImpl20.getContent();
        objNodeImpl20.setDepth((int) (byte) 100);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (byte) 100 + "'", obj30.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + (byte) 100 + "'", obj34.equals((byte) 100));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test219");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass28 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = null;
        objNodeImpl8.setParent(objNode29);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test220");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl9.copy();
        boolean boolean23 = objNodeImpl9.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test221");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.String str16 = objNodeImpl12.toString();
        java.lang.Object obj17 = objNodeImpl12.getContent();
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str44 = objNodeImpl29.toString();
        objNodeImpl29.setName("Node(#)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj51 = objNodeImpl50.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl50);
        java.lang.String str53 = objNodeImpl50.toString();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0f + "'", obj17.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(100)" + "'", str53.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode55);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test222");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean44 = objNodeImpl1.isLeaf();
        boolean boolean45 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl1.copy();
        java.lang.Object obj47 = objNodeImpl46.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        boolean boolean55 = objNodeImpl49.isLeaf();
        objNodeImpl49.setContent((java.lang.Object) (-1));
        java.lang.Object obj58 = objNodeImpl49.getName();
        boolean boolean59 = objNodeImpl49.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl63.getParent();
        java.lang.Object obj68 = null;
        objNodeImpl63.setContent(obj68);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList83 = objNodeImpl77.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = objNodeImpl77.copy();
        objNodeImpl84.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode87 = objNodeImpl84.getParent();
        objNodeImpl71.setContent((java.lang.Object) objNodeImpl84);
        java.lang.Class<?> wildcardClass89 = objNodeImpl71.getClass();
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl91 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl49);
        boolean boolean92 = objNodeImpl49.isLeaf();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(-1)" + "'", obj47.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(100)" + "'", obj58.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(objNode67);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList83);
        org.junit.Assert.assertNotNull(objNodeImpl84);
        org.junit.Assert.assertNull(objNode87);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test223");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.Object obj38 = objNodeImpl10.getName();
        objNodeImpl10.setName("Node(#)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl60.setDepth((int) (short) 1);
        boolean boolean65 = objNodeImpl60.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList66 = objNodeImpl60.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl70.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl79.getParent();
        java.lang.Object obj84 = null;
        objNodeImpl79.setContent(obj84);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl87.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj90 = objNodeImpl87.getName();
        objNodeImpl79.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        objNodeImpl70.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        objNodeImpl70.setName("");
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl57.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        boolean boolean97 = objNodeImpl60.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objNodeList66);
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertTrue("'" + obj90 + "' != '" + "Node(100)" + "'", obj90.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test224");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        objNodeImpl11.setDepth((int) (byte) -1);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test225");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.lang.Object obj15 = objNodeImpl3.getContent();
        java.lang.Object obj16 = objNodeImpl3.getName();
        try {
            java.lang.String str17 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test226");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        objNodeImpl1.setName("");
        objNodeImpl1.setName("hi!");
        boolean boolean16 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test227");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.Object obj38 = objNodeImpl10.getName();
        objNodeImpl10.setName("Node(1.0)");
        objNodeImpl10.setName("hi!");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test228");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("");
        objNodeImpl9.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl23.getParent();
        java.lang.Class<?> wildcardClass28 = objNodeImpl23.getClass();
        boolean boolean29 = objNodeImpl23.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl23.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl23.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl32.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNotNull(objNodeImpl34);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test229");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        java.lang.Class<?> wildcardClass26 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth(0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test230");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl33.copy();
        java.lang.Object obj43 = objNodeImpl42.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(1.0)" + "'", obj43.equals("Node(1.0)"));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test231");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj47 = objNodeImpl38.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl38.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 1.0f + "'", obj47.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl48);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test232");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        boolean boolean22 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.String str37 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        java.lang.Object obj46 = objNodeImpl41.getContent();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.String str49 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl19.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl62);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl62.getParent();
        java.lang.Object obj65 = objNodeImpl62.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test233");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean35 = objNodeImpl33.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test234");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeImpl8.getClass();
        java.lang.Object obj20 = null;
        objNodeImpl8.setContent(obj20);
        java.lang.Object obj22 = objNodeImpl8.getContent();
        java.lang.Class<?> wildcardClass23 = objNodeImpl8.getClass();
        java.lang.Object obj24 = objNodeImpl8.getName();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(100)" + "'", obj24.equals("Node(100)"));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test235");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Class<?> wildcardClass23 = objNodeImpl19.getClass();
        boolean boolean24 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        boolean boolean32 = objNodeImpl26.isLeaf();
        objNodeImpl26.setContent((java.lang.Object) (-1));
        java.lang.Object obj35 = objNodeImpl26.getName();
        boolean boolean36 = objNodeImpl26.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Class<?> wildcardClass66 = objNodeImpl48.getClass();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl48.setName("Node(1.0)");
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.lang.Class<?> wildcardClass71 = objNodeImpl19.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test236");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        java.lang.String str31 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl11.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node())" + "'", str31.equals("Node(Node())"));
        org.junit.Assert.assertNotNull(objNode32);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test237");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        boolean boolean13 = objNodeImpl1.isRoot();
        boolean boolean14 = objNodeImpl1.isLeaf();
        java.lang.Object obj15 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + obj15 + "' != '" + (byte) 100 + "'", obj15.equals((byte) 100));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test238");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl6);
        java.lang.Object obj8 = objNodeImpl7.getContent();
        boolean boolean9 = objNodeImpl7.isLeaf();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test239");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        boolean boolean9 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        objNodeImpl11.setDepth((int) (short) -1);
        objNodeImpl11.setName("Node(Node(1.0))");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(objNodeImpl11);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test240");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        java.lang.String str19 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Node(hi!)" + "'", str19.equals("Node(hi!)"));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test241");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        boolean boolean29 = objNodeImpl21.isRoot();
        boolean boolean30 = objNodeImpl21.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl21);
        objNodeImpl21.setName("Node(class java.lang.Object)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test242");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Object obj36 = null;
        objNodeImpl31.setContent(obj36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj42 = objNodeImpl39.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl45.copy();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setDepth((int) (short) 1);
        boolean boolean69 = objNodeImpl64.isRoot();
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        boolean boolean71 = objNodeImpl64.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl64.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        java.lang.String str80 = objNodeImpl76.toString();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl76.setDepth((int) (byte) 100);
        java.lang.Object obj84 = objNodeImpl76.getContent();
        objNodeImpl45.setContent(obj84);
        java.lang.Class<?> wildcardClass86 = obj84.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj84 + "' != '" + 1.0f + "'", obj84.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test243");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = null;
        try {
            objNodeImpl24.addChild(objNode29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test244");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        objNodeImpl39.setDepth((int) 'a');
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass43 = objNodeImpl39.getClass();
        boolean boolean44 = objNodeImpl39.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl39.getParent();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objNode46);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test245");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) 'a');
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass77 = objNodeImpl17.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        boolean boolean82 = objNodeImpl79.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl79.getParent();
        java.lang.Class<?> wildcardClass84 = objNodeImpl79.getClass();
        objNodeImpl17.setContent((java.lang.Object) wildcardClass84);
        java.lang.Object obj86 = objNodeImpl17.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "Node(100)" + "'", obj86.equals("Node(100)"));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test246");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        boolean boolean22 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.String str37 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        java.lang.Object obj46 = objNodeImpl41.getContent();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.String str49 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl19.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList71 = objNodeImpl65.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl65.copy();
        objNodeImpl72.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl79.getParent();
        java.lang.Class<?> wildcardClass84 = objNodeImpl79.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl86.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj89 = objNodeImpl86.getName();
        objNodeImpl79.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl86);
        objNodeImpl72.setContent((java.lang.Object) objNodeImpl79);
        java.lang.Object obj92 = objNodeImpl72.getContent();
        objNodeImpl72.setName("Node(100)");
        java.lang.String str95 = objNodeImpl72.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList96 = objNodeImpl72.getChildren();
        objNodeImpl72.setDepth((int) 'a');
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertNotNull(objNodeList71);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + obj89 + "' != '" + "Node(100)" + "'", obj89.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Node(Node(1.0))" + "'", str95.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList96);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test247");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class<?> wildcardClass37 = obj35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl38.setDepth(100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setDepth((int) (short) 1);
        boolean boolean66 = objNodeImpl61.isRoot();
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        boolean boolean68 = objNodeImpl61.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        objNodeImpl71.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.lang.String str77 = objNodeImpl73.toString();
        objNodeImpl61.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.lang.Class<?> wildcardClass79 = objNodeImpl61.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = objNodeImpl61.copy();
        java.lang.Object obj81 = objNodeImpl80.getContent();
        java.lang.Object obj82 = objNodeImpl80.getName();
        java.lang.Object obj83 = objNodeImpl80.getContent();
        boolean boolean84 = objNodeImpl80.isRoot();
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl80);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertTrue("'" + str77 + "' != '" + "Node(1.0)" + "'", str77.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(objNodeImpl80);
        org.junit.Assert.assertTrue("'" + obj81 + "' != '" + 1.0f + "'", obj81.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj82 + "' != '" + "Node(1.0)" + "'", obj82.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + 1.0f + "'", obj83.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test248");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj25 = objNodeImpl19.getName();
        java.lang.Object obj26 = objNodeImpl19.getContent();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test249");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl43.copy();
        java.lang.Object obj47 = null;
        objNodeImpl46.setContent(obj47);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl46);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test250");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        objNodeImpl43.setDepth((int) '#');
        java.lang.Object obj46 = objNodeImpl43.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "Node(Node(Node()))" + "'", obj46.equals("Node(Node(Node()))"));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test251");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        boolean boolean30 = objNodeImpl11.isLeaf();
        java.lang.Object obj31 = objNodeImpl11.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test252");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass5 = objNodeImpl1.getClass();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl10.getParent();
        java.lang.Class<?> wildcardClass15 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl17.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean40 = objNodeImpl33.isRoot();
        boolean boolean41 = objNodeImpl33.isRoot();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl17.setDepth(10);
        java.lang.Object obj45 = objNodeImpl17.getContent();
        java.lang.Object obj46 = objNodeImpl17.getName();
        objNodeImpl1.setContent(obj46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl1.copy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + (byte) 0 + "'", obj45.equals((byte) 0));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "Node(100)" + "'", obj46.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl48);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test253");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl12.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl12.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl12.getChildren();
        objNodeImpl12.setDepth((int) '4');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl12.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(100)" + "'", str13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl18);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test254");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl16.setDepth(100);
        objNodeImpl16.setName("");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test255");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        objNodeImpl9.setDepth((int) 'a');
        java.lang.Class<?> wildcardClass30 = objNodeImpl9.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test256");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Class<?> wildcardClass8 = obj6.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl13.isLeaf();
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl13.setName("Node(1.0)");
        java.lang.Object obj22 = objNodeImpl13.getName();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        java.lang.Class<?> wildcardClass26 = obj24.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass26);
        java.lang.String str28 = objNodeImpl27.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass30 = objNodeImpl29.getClass();
        java.lang.String str31 = objNodeImpl29.toString();
        objNodeImpl29.setName("Node(0.0)");
        java.lang.String str34 = objNodeImpl29.toString();
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(1.0)" + "'", obj22.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(class java.lang.Object)" + "'", str28.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(class java.lang.Object)" + "'", str31.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Node(class java.lang.Object)" + "'", str34.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test257");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setDepth((int) (short) 1);
        objNodeImpl20.setDepth((int) (byte) 100);
        java.lang.String str27 = objNodeImpl20.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj30 = objNodeImpl29.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        java.lang.Object obj60 = objNodeImpl40.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList68 = objNodeImpl62.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = objNodeImpl62.copy();
        objNodeImpl69.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl69.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode80 = objNodeImpl76.getParent();
        java.lang.Class<?> wildcardClass81 = objNodeImpl76.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl83.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj86 = objNodeImpl83.getName();
        objNodeImpl76.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        objNodeImpl69.setContent((java.lang.Object) objNodeImpl76);
        java.lang.Object obj89 = objNodeImpl69.getContent();
        objNodeImpl69.setName("Node(100)");
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(1.0)" + "'", str27.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertNotNull(objNodeList68);
        org.junit.Assert.assertNotNull(objNodeImpl69);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNull(objNode80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "Node(100)" + "'", obj86.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj89);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test258");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setName("Node(100)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Class<?> wildcardClass21 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        objNodeImpl23.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean46 = objNodeImpl39.isRoot();
        boolean boolean47 = objNodeImpl39.isRoot();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean49 = objNodeImpl39.isLeaf();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test259");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) '4');
        boolean boolean2 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test260");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Object obj36 = null;
        objNodeImpl31.setContent(obj36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj42 = objNodeImpl39.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl45.copy();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        boolean boolean55 = objNodeImpl45.isLeaf();
        objNodeImpl45.setName("Node(100)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test261");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        boolean boolean8 = objNodeImpl3.isLeaf();
        boolean boolean9 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test262");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl11.getChildren();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        java.lang.Class<?> wildcardClass31 = objNodeImpl11.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test263");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        java.lang.Object obj29 = objNodeImpl28.getContent();
        boolean boolean30 = objNodeImpl28.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl28.getParent();
        boolean boolean32 = objNodeImpl28.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test264");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        boolean boolean50 = objNodeImpl49.isRoot();
        java.lang.String str51 = objNodeImpl49.toString();
        java.lang.String str52 = objNodeImpl49.toString();
        java.lang.Object obj53 = objNodeImpl49.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Node(Node(1.0))" + "'", str51.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(Node(1.0))" + "'", str52.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(obj53);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test265");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl40.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl46.copy();
        objNodeImpl53.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl53.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Class<?> wildcardClass65 = objNodeImpl60.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl60);
        java.lang.Object obj73 = objNodeImpl53.getContent();
        objNodeImpl53.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl53.getParent();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        java.lang.Class<?> wildcardClass79 = obj77.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean88 = objNodeImpl84.isLeaf();
        boolean boolean89 = objNodeImpl84.isRoot();
        objNodeImpl80.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setName("Node(1.0)");
        java.lang.Object obj93 = objNodeImpl84.getName();
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode97 = objNodeImpl35.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNull(objNode76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + obj93 + "' != '" + "Node(1.0)" + "'", obj93.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode97);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test266");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl9.copy();
        java.lang.Object obj11 = objNodeImpl10.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str19 = objNodeImpl15.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl15.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl32.copy();
        java.lang.Object obj39 = objNodeImpl32.getContent();
        java.lang.Object obj40 = objNodeImpl32.getName();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl32.setDepth((int) (byte) 100);
        java.lang.Object obj44 = objNodeImpl32.getContent();
        boolean boolean45 = objNodeImpl32.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(1.0)" + "'", obj11.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Node(1.0)" + "'", str19.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 1.0f + "'", obj39.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + 1.0f + "'", obj44.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test267");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass13 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        objNodeImpl14.setName("Node(1)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objNodeImpl14);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test268");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        boolean boolean25 = objNodeImpl24.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl24.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        objNodeImpl28.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.String str41 = objNodeImpl38.toString();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl38.getChildren();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str45 = objNodeImpl38.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test269");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setDepth((int) (short) 1);
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl58);
        boolean boolean60 = objNodeImpl58.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test270");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        objNodeImpl5.setName("Node(100)");
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl5.getParent();
        objNodeImpl5.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        boolean boolean16 = objNodeImpl13.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList17 = objNodeImpl13.getChildren();
        boolean boolean18 = objNodeImpl13.isLeaf();
        objNodeImpl5.setContent((java.lang.Object) boolean18);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objNodeList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test271");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        boolean boolean29 = objNodeImpl20.isLeaf();
        java.lang.Object obj30 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl20.getChildren();
        boolean boolean32 = objNodeImpl20.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl36.copy();
        boolean boolean42 = objNodeImpl36.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (byte) 100 + "'", obj30.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objNodeImpl43);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test272");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj24 = new java.lang.Object();
        java.lang.Class<?> wildcardClass25 = obj24.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass25);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objNodeList28);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test273");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl47);
        java.lang.Object obj66 = objNodeImpl47.getName();
        java.lang.String str67 = objNodeImpl47.toString();
        objNodeImpl47.setDepth((int) (short) 100);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(Node(1.0))" + "'", obj66.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(Node(1.0))" + "'", str67.equals("Node(Node(1.0))"));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test274");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        objNodeImpl3.setName("Node(Node(1))");
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertNotNull(objNodeImpl5);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test275");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str20 = objNodeImpl9.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl9.copy();
        boolean boolean22 = objNodeImpl21.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(100)" + "'", str20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test276");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class<?> wildcardClass34 = obj32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass34);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean43 = objNodeImpl39.isLeaf();
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl39.setName("Node(1.0)");
        java.lang.Object obj48 = objNodeImpl39.getName();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean50 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) boolean50);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(1.0)" + "'", obj48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test277");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        objNodeImpl1.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass38 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl20);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass42 = objNodeImpl41.getClass();
        objNodeImpl41.setDepth((int) '#');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test278");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl42.copy();
        objNodeImpl49.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl49.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl56.getParent();
        java.lang.Class<?> wildcardClass61 = objNodeImpl56.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj66 = objNodeImpl63.getName();
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl49.setContent((java.lang.Object) objNodeImpl56);
        java.lang.Object obj69 = objNodeImpl49.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        objNodeImpl71.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList77 = objNodeImpl71.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl79.setDepth((int) (short) 1);
        boolean boolean84 = objNodeImpl79.isRoot();
        objNodeImpl71.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        boolean boolean86 = objNodeImpl79.isRoot();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = objNodeImpl49.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl49.setContent((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl49);
        java.lang.Class<?> wildcardClass93 = objNodeImpl33.getClass();
        objNodeImpl33.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl96 = objNodeImpl33.copy();
        objNodeImpl33.setDepth(0);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNotNull(objNodeList77);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(objNodeImpl88);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertNotNull(objNodeImpl96);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test279");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl20.copy();
        java.lang.Object obj27 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl20.getChildren();
        java.lang.Class<?> wildcardClass29 = objNodeList28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration> genericDeclarationNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration>((java.lang.reflect.GenericDeclaration) wildcardClass29);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test280");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl46.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode54);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test281");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNode10);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test282");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        java.lang.Object obj8 = objNodeImpl5.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl5.copy();
        java.lang.Object obj10 = objNodeImpl5.getName();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(1.0)" + "'", obj10.equals("Node(1.0)"));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test283");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setDepth((int) (short) 1);
        objNodeImpl28.setDepth((int) (byte) 100);
        objNodeImpl28.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl45.setContent((java.lang.Object) objNodeImpl52);
        java.lang.Object obj65 = objNodeImpl45.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList73 = objNodeImpl67.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl75.setDepth((int) (short) 1);
        boolean boolean80 = objNodeImpl75.isRoot();
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        boolean boolean82 = objNodeImpl75.isRoot();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = objNodeImpl45.copy();
        java.lang.Object obj85 = objNodeImpl84.getContent();
        objNodeImpl84.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl84);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertNotNull(objNodeList73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(objNodeImpl84);
        org.junit.Assert.assertNotNull(obj85);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test284");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeImpl8.getClass();
        java.lang.Object obj20 = null;
        objNodeImpl8.setContent(obj20);
        boolean boolean22 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test285");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.Object obj13 = objNodeImpl1.getContent();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj13);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList16);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (byte) 100 + "'", obj13.equals((byte) 100));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeList16);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test286");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test287");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        boolean boolean14 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl16.getClass();
        java.lang.Object obj25 = objNodeImpl16.getContent();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl6.setContent((java.lang.Object) objNodeImpl8);
        java.lang.Object obj28 = objNodeImpl6.getContent();
        java.lang.Object obj29 = objNodeImpl6.getName();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (byte) 100 + "'", obj25.equals((byte) 100));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(1.0)" + "'", obj29.equals("Node(1.0)"));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test288");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        java.lang.Class<?> wildcardClass34 = objNodeImpl26.getClass();
        java.lang.Class<?> wildcardClass35 = objNodeImpl26.getClass();
        boolean boolean36 = objNodeImpl26.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl26.copy();
        java.lang.String str38 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl37.copy();
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj41 = objNodeImpl39.getName();
        java.lang.String str42 = objNodeImpl39.toString();
        objNodeImpl39.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(100)" + "'", str38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(100)" + "'", str42.equals("Node(100)"));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test289");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        java.lang.Class<?> wildcardClass32 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.String str37 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        java.lang.Object obj46 = objNodeImpl41.getContent();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class<?> wildcardClass53 = obj51.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass53);
        objNodeImpl41.setContent((java.lang.Object) wildcardClass53);
        java.lang.String str56 = objNodeImpl41.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl41.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        boolean boolean65 = objNodeImpl61.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl61.copy();
        objNodeImpl61.setDepth((int) '#');
        boolean boolean69 = objNodeImpl61.isRoot();
        boolean boolean70 = objNodeImpl61.isLeaf();
        objNodeImpl61.setName("Node(-1)");
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl41);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(class java.lang.Object)" + "'", str56.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test290");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        java.lang.Object obj45 = objNodeImpl36.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl36.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl36.getClass();
        objNodeImpl36.setName("Node(0.0)");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 1.0f + "'", obj45.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test291");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl1.setName("Node(1.0)");
        java.lang.Object obj39 = objNodeImpl1.getName();
        objNodeImpl1.setDepth((int) (byte) 0);
        java.lang.Object obj42 = objNodeImpl1.getContent();
        java.lang.Object obj43 = new java.lang.Object();
        java.lang.Class<?> wildcardClass44 = obj43.getClass();
        java.lang.Class<?> wildcardClass45 = obj43.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass45);
        java.lang.String str47 = objNodeImpl46.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl46.copy();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl46);
        java.lang.Class<?> wildcardClass50 = objNodeImpl46.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(1.0)" + "'", obj39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(class java.lang.Object)" + "'", str47.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test292");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test293");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        boolean boolean29 = objNodeImpl20.isLeaf();
        java.lang.Object obj30 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl20.getChildren();
        boolean boolean32 = objNodeImpl20.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.Class<?> wildcardClass34 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl37.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl37.copy();
        objNodeImpl44.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl44.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl51.getParent();
        java.lang.Class<?> wildcardClass56 = objNodeImpl51.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        objNodeImpl51.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        objNodeImpl44.setContent((java.lang.Object) objNodeImpl51);
        java.lang.Object obj64 = objNodeImpl44.getContent();
        java.lang.String str65 = objNodeImpl44.toString();
        boolean boolean66 = objNodeImpl44.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (byte) 100 + "'", obj30.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNull(objNode55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(Node(1.0))" + "'", str65.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test294");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.Object obj62 = objNodeImpl60.getName();
        objNodeImpl60.setName("Node(100)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(Node(1.0))" + "'", obj62.equals("Node(Node(1.0))"));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test295");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        java.lang.String str49 = objNodeImpl36.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl36.copy();
        java.lang.Class<?> wildcardClass52 = objNodeImpl51.getClass();
        boolean boolean53 = objNodeImpl51.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(objNode54);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test296");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl8.copy();
        java.lang.Object obj24 = objNodeImpl23.getName();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(class java.lang.Object)" + "'", obj24.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test297");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setDepth((int) (short) 1);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl10);
        objNodeImpl8.setDepth((int) (byte) 0);
        java.lang.Object obj18 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        boolean boolean26 = objNodeImpl20.isLeaf();
        objNodeImpl20.setContent((java.lang.Object) (-1));
        java.lang.Object obj29 = objNodeImpl20.getName();
        boolean boolean30 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl20.copy();
        boolean boolean32 = objNodeImpl20.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test298");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl20.copy();
        java.lang.Object obj27 = objNodeImpl20.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setDepth((int) (short) 1);
        objNodeImpl29.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj37 = objNodeImpl31.getContent();
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.lang.Class<?> wildcardClass39 = objNodeImpl20.getClass();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0f + "'", obj37.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test299");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setDepth((int) (byte) 100);
        objNodeImpl1.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList17 = objNodeImpl11.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl11.copy();
        objNodeImpl18.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl18.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Class<?> wildcardClass30 = objNodeImpl25.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl18.setContent((java.lang.Object) objNodeImpl25);
        java.lang.Object obj38 = objNodeImpl18.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setDepth((int) (short) 1);
        boolean boolean53 = objNodeImpl48.isRoot();
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        boolean boolean55 = objNodeImpl48.isRoot();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl18.copy();
        java.lang.Object obj58 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl57);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl57.getParent();
        org.junit.Assert.assertNotNull(objNodeList17);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNull(objNode62);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test300");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean44 = objNodeImpl1.isLeaf();
        boolean boolean45 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl1.copy();
        java.lang.String str47 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(-1)" + "'", str47.equals("Node(-1)"));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test301");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl6.setContent((java.lang.Object) 1.0f);
        java.lang.String str9 = objNodeImpl6.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.String str17 = objNodeImpl13.toString();
        java.lang.Object obj18 = objNodeImpl13.getContent();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl21.copy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0f + "'", obj18.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl22);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test302");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl7);
        boolean boolean15 = objNodeImpl7.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        boolean boolean23 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        java.lang.Object obj25 = objNodeImpl19.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        objNodeImpl27.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl35.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl35.copy();
        java.lang.Class<?> wildcardClass43 = objNodeImpl35.getClass();
        boolean boolean44 = objNodeImpl35.isLeaf();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl47.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = objNodeImpl47.copy();
        objNodeImpl54.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode57 = objNodeImpl54.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode65 = objNodeImpl61.getParent();
        java.lang.Class<?> wildcardClass66 = objNodeImpl61.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj71 = objNodeImpl68.getName();
        objNodeImpl61.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl54.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Object obj74 = objNodeImpl54.getContent();
        objNodeImpl54.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList77 = objNodeImpl54.getChildren();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl19);
        java.lang.String str81 = objNodeImpl19.toString();
        objNodeImpl7.setContent((java.lang.Object) str81);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 1.0f + "'", obj25.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objNodeList53);
        org.junit.Assert.assertNotNull(objNodeImpl54);
        org.junit.Assert.assertNull(objNode57);
        org.junit.Assert.assertNull(objNode65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "Node(100)" + "'", obj71.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertNotNull(objNodeList77);
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Node(1.0)" + "'", str81.equals("Node(1.0)"));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test303");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        boolean boolean55 = objNodeImpl45.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objNode54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test304");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl27);
        java.lang.String str40 = objNodeImpl27.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(100)" + "'", str40.equals("Node(100)"));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test305");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl34.getChildren();
        java.lang.Class<?> wildcardClass45 = objNodeList44.getClass();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test306");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.lang.String str9 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl5.getParent();
        boolean boolean11 = objNodeImpl5.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.String str14 = objNodeImpl13.toString();
        objNodeImpl13.setName("");
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(Node(1))" + "'", str14.equals("Node(Node(1))"));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test307");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        boolean boolean56 = objNodeImpl52.isLeaf();
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl52.getParent();
        java.lang.String str59 = objNodeImpl52.toString();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str61 = objNodeImpl52.toString();
        objNodeImpl52.setName("Node(Node(100))");
        java.lang.String str64 = objNodeImpl52.toString();
        java.lang.String str65 = objNodeImpl52.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(1.0)" + "'", str61.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(1.0)" + "'", str64.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test308");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        boolean boolean29 = objNodeImpl20.isLeaf();
        java.lang.Object obj30 = objNodeImpl20.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl20.getChildren();
        boolean boolean32 = objNodeImpl20.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.Class<?> wildcardClass34 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl20);
        boolean boolean36 = objNodeImpl35.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + (byte) 100 + "'", obj30.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test309");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str62 = objNodeImpl8.toString();
        java.lang.Object obj63 = objNodeImpl8.getName();
        boolean boolean64 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setDepth((int) (short) 1);
        boolean boolean71 = objNodeImpl66.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl66);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl74.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl74.copy();
        objNodeImpl81.setDepth((int) 'a');
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode86 = objNodeImpl66.getParent();
        boolean boolean87 = objNodeImpl66.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode88 = objNodeImpl66.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(Node(1.0))" + "'", str62.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + obj63 + "' != '" + "Node(100)" + "'", obj63.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(objNodeImpl81);
        org.junit.Assert.assertNotNull(objNode86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(objNode88);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test310");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        objNodeImpl3.setDepth((int) (byte) 0);
        boolean boolean18 = objNodeImpl3.isRoot();
        java.lang.Object obj19 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl3.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(100)" + "'", obj19.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl20);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test311");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl2 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Object obj3 = objNodeImpl1.getName();
        objNodeImpl1.setDepth((int) (byte) 10);
        java.lang.String str6 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + obj3 + "' != '" + "Node()" + "'", obj3.equals("Node()"));
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "Node()" + "'", str6.equals("Node()"));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test312");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Object obj36 = null;
        objNodeImpl31.setContent(obj36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj42 = objNodeImpl39.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl45.copy();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = objNodeImpl45.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        boolean boolean62 = objNodeImpl56.isLeaf();
        objNodeImpl56.setContent((java.lang.Object) (-1));
        java.lang.Object obj65 = objNodeImpl56.getName();
        boolean boolean66 = objNodeImpl56.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = objNodeImpl56.copy();
        java.lang.String str68 = objNodeImpl56.toString();
        boolean boolean69 = objNodeImpl56.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList79 = objNodeImpl73.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = objNodeImpl73.copy();
        java.lang.Class<?> wildcardClass81 = objNodeImpl73.getClass();
        java.lang.Class<?> wildcardClass82 = objNodeImpl73.getClass();
        boolean boolean83 = objNodeImpl73.isLeaf();
        objNodeImpl73.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = objNodeImpl73.copy();
        objNodeImpl71.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode92 = objNodeImpl89.getParent();
        boolean boolean93 = objNodeImpl89.isLeaf();
        objNodeImpl73.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl89);
        objNodeImpl56.setContent((java.lang.Object) objNodeImpl89);
        objNodeImpl45.setContent((java.lang.Object) objNodeImpl56);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertNotNull(objNodeImpl54);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(objNodeImpl67);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(-1)" + "'", str68.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(objNodeList79);
        org.junit.Assert.assertNotNull(objNodeImpl80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(objNodeImpl86);
        org.junit.Assert.assertNull(objNode92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test313");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setDepth((int) (short) 1);
        boolean boolean24 = objNodeImpl19.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl38.getParent();
        java.lang.Object obj43 = null;
        objNodeImpl38.setContent(obj43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl29.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl29.setName("");
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        boolean boolean56 = objNodeImpl16.isRoot();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode42);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test314");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj20 = objNodeImpl16.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl16.copy();
        java.lang.String str22 = objNodeImpl16.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl24.getChildren();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj34 = objNodeImpl31.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl31.copy();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList45 = objNodeImpl39.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl39.getParent();
        java.lang.Object obj47 = null;
        objNodeImpl39.setContent(obj47);
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl39.getChildren();
        objNodeImpl16.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl16.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(100)" + "'", str22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "Node(100)" + "'", obj34.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNodeList45);
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test315");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList17 = objNodeImpl10.getChildren();
        java.lang.String str18 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl22.getParent();
        java.lang.Object obj27 = null;
        objNodeImpl22.setContent(obj27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl43.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl43.getParent();
        objNodeImpl30.setContent((java.lang.Object) objNodeImpl43);
        java.lang.Class<?> wildcardClass48 = objNodeImpl30.getClass();
        java.lang.Object obj49 = objNodeImpl30.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl51.isLeaf();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.lang.Object obj60 = objNodeImpl51.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(0)" + "'", str18.equals("Node(0)"));
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + (byte) 100 + "'", obj60.equals((byte) 100));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test316");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        boolean boolean37 = objNodeImpl36.isLeaf();
        boolean boolean38 = objNodeImpl36.isRoot();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl3.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNodeList40);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test317");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        boolean boolean7 = objNodeImpl1.isRoot();
        java.lang.Object obj8 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "Node(100)" + "'", obj8.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode9);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test318");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        objNodeImpl8.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        java.lang.String str21 = objNodeImpl18.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl1.getParent();
        boolean boolean25 = objNodeImpl1.isRoot();
        java.lang.String str26 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Node(1.0)" + "'", str26.equals("Node(1.0)"));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test319");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        boolean boolean83 = objNodeImpl79.isLeaf();
        boolean boolean84 = objNodeImpl79.isRoot();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        objNodeImpl25.setName("Node()");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test320");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        boolean boolean37 = objNodeImpl36.isLeaf();
        boolean boolean38 = objNodeImpl36.isRoot();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass40 = objNodeImpl3.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl3.getChildren();
        java.lang.Class<?> wildcardClass42 = objNodeImpl3.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test321");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Class<?> wildcardClass66 = objNodeImpl48.getClass();
        java.lang.Object obj67 = objNodeImpl48.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        boolean boolean75 = objNodeImpl69.isLeaf();
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl80.setContent((java.lang.Object) 1.0f);
        objNodeImpl78.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl80);
        objNodeImpl78.setDepth((int) (short) 100);
        boolean boolean86 = objNodeImpl78.isLeaf();
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        objNodeImpl89.setDepth((int) (short) 1);
        boolean boolean94 = objNodeImpl89.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl89);
        objNodeImpl69.setContent((java.lang.Object) objNodeImpl95);
        java.lang.Class<?> wildcardClass97 = objNodeImpl69.getClass();
        objNodeImpl26.setContent((java.lang.Object) wildcardClass97);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test322");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl10.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl10.getParent();
        objNodeImpl10.setName("Node(0)");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode17);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNode19);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test323");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) 'a');
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = objNodeImpl33.copy();
        objNodeImpl77.setDepth(0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNotNull(objNodeImpl77);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test324");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        boolean boolean29 = objNodeImpl8.isLeaf();
        boolean boolean30 = objNodeImpl8.isLeaf();
        boolean boolean31 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl33.getChildren();
        java.lang.Object obj38 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl40.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl40.copy();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList54 = objNodeImpl48.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl48.getParent();
        java.lang.Object obj56 = null;
        objNodeImpl48.setContent(obj56);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0f + "'", obj38.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(objNodeList54);
        org.junit.Assert.assertNotNull(objNode55);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test325");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        objNodeImpl43.setDepth((int) '#');
        java.lang.String str46 = objNodeImpl43.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(Node(Node()))" + "'", str46.equals("Node(Node(Node()))"));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test326");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Class<?> wildcardClass26 = objNodeImpl21.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl28.setContent((java.lang.Object) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl28.getChildren();
        java.lang.String str36 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Class<?> wildcardClass66 = objNodeImpl48.getClass();
        java.lang.Object obj67 = objNodeImpl48.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        boolean boolean75 = objNodeImpl69.isLeaf();
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl28.setName("Node(1.0)");
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.lang.String str81 = objNodeImpl3.toString();
        objNodeImpl3.setName("Node(Node(Node()))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(0)" + "'", str36.equals("Node(0)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + str81 + "' != '" + "Node(1.0)" + "'", str81.equals("Node(1.0)"));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test327");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        boolean boolean37 = objNodeImpl36.isLeaf();
        boolean boolean38 = objNodeImpl36.isRoot();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl36);
        objNodeImpl36.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl36.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNull(objNode42);
        org.junit.Assert.assertNull(objNode43);
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test328");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Object obj8 = objNodeImpl3.getContent();
        objNodeImpl3.setDepth((int) (short) 1);
        java.lang.String str11 = objNodeImpl3.toString();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(1.0)" + "'", str11.equals("Node(1.0)"));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test329");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl28.setName("");
        java.lang.Class<?> wildcardClass86 = objNodeImpl28.getClass();
        java.lang.Object obj87 = null;
        objNodeImpl28.setContent(obj87);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test330");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 1);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl10.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList28);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test331");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        boolean boolean18 = objNodeImpl12.isLeaf();
        objNodeImpl12.setContent((java.lang.Object) (-1));
        java.lang.Object obj21 = objNodeImpl12.getName();
        boolean boolean22 = objNodeImpl12.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl12.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl12.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl12.copy();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        objNodeImpl35.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl35.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl35.setContent((java.lang.Object) objNodeImpl42);
        java.lang.Object obj55 = objNodeImpl35.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl57.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        boolean boolean70 = objNodeImpl65.isRoot();
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        boolean boolean72 = objNodeImpl65.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = objNodeImpl35.copy();
        java.lang.String str75 = objNodeImpl74.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl79.getParent();
        java.lang.Class<?> wildcardClass84 = objNodeImpl79.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl86.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj89 = objNodeImpl86.getName();
        objNodeImpl79.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl86);
        objNodeImpl74.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl86);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl92 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl74);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode93 = objNodeImpl92.getParent();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl92);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "Node(100)" + "'", obj21.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objNodeImpl74);
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Node(Node(1.0))" + "'", str75.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + obj89 + "' != '" + "Node(100)" + "'", obj89.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode93);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test332");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj11 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl8.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setDepth(100);
        java.lang.String str17 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(100)" + "'", obj11.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test333");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setDepth((int) (byte) 0);
        java.lang.Object obj11 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl13.isLeaf();
        objNodeImpl13.setContent((java.lang.Object) (-1));
        java.lang.Object obj22 = objNodeImpl13.getName();
        boolean boolean23 = objNodeImpl13.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl13.copy();
        boolean boolean25 = objNodeImpl13.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl1.getChildren();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test334");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean44 = objNodeImpl1.isLeaf();
        boolean boolean45 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass47 = objNodeImpl46.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl46.getChildren();
        java.lang.Class<?> wildcardClass49 = objNodeImpl46.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test335");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl3.getParent();
        java.lang.String str10 = objNodeImpl3.toString();
        objNodeImpl3.setName("Node(Node(1.0))");
        java.lang.String str13 = objNodeImpl3.toString();
        java.lang.String str14 = objNodeImpl3.toString();
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(1.0)" + "'", str10.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1.0)" + "'", str14.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test336");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        objNodeImpl1.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj16 = objNodeImpl13.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl17.copy();
        java.lang.Object obj19 = objNodeImpl17.getName();
        java.lang.Object obj20 = objNodeImpl17.getContent();
        java.lang.Object obj21 = objNodeImpl17.getName();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.setDepth((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(1.0)" + "'", obj19.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0f + "'", obj20.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "Node(1.0)" + "'", obj21.equals("Node(1.0)"));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test337");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setDepth((int) (short) 1);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.Class<?> wildcardClass94 = objNodeImpl10.getClass();
        java.lang.Object obj95 = objNodeImpl10.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertTrue("'" + obj95 + "' != '" + "Node(100)" + "'", obj95.equals("Node(100)"));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test338");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Object obj27 = objNodeImpl9.getName();
        objNodeImpl9.setDepth((int) (short) 10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl9.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList30);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test339");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl17.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean37 = objNodeImpl31.isLeaf();
        objNodeImpl31.setContent((java.lang.Object) (-1));
        java.lang.Object obj40 = objNodeImpl31.getName();
        boolean boolean41 = objNodeImpl31.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl31.copy();
        java.lang.String str43 = objNodeImpl31.toString();
        java.lang.Class<?> wildcardClass44 = objNodeImpl31.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList45 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl31.copy();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl31);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl31.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertNotNull(objNode28);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(-1)" + "'", str43.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objNodeList45);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertNotNull(objNodeImpl48);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test340");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        boolean boolean9 = objNodeImpl1.isLeaf();
        boolean boolean10 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        java.lang.Class<?> wildcardClass22 = objNodeImpl14.getClass();
        java.lang.Class<?> wildcardClass23 = objNodeImpl14.getClass();
        boolean boolean24 = objNodeImpl14.isLeaf();
        objNodeImpl14.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl14.copy();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl30.getParent();
        boolean boolean34 = objNodeImpl30.isLeaf();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl37.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl37.copy();
        java.lang.Class<?> wildcardClass45 = objNodeImpl37.getClass();
        java.lang.Class<?> wildcardClass46 = objNodeImpl37.getClass();
        boolean boolean47 = objNodeImpl37.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl37.copy();
        java.lang.String str49 = objNodeImpl48.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl48.copy();
        objNodeImpl30.setContent((java.lang.Object) objNodeImpl50);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl30);
        boolean boolean53 = objNodeImpl30.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNull(objNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(100)" + "'", str49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test341");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        java.lang.Object obj50 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList58 = objNodeImpl52.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = objNodeImpl52.copy();
        java.lang.Class<?> wildcardClass60 = objNodeImpl52.getClass();
        boolean boolean61 = objNodeImpl52.isLeaf();
        java.lang.Object obj62 = objNodeImpl52.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl52.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList64 = objNodeImpl52.getChildren();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl52.setName("");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (byte) 100 + "'", obj50.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList58);
        org.junit.Assert.assertNotNull(objNodeImpl59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + (byte) 100 + "'", obj62.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertNotNull(objNodeList64);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test342");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        java.lang.Object obj47 = objNodeImpl36.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl36.copy();
        boolean boolean49 = objNodeImpl36.isRoot();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 1.0f + "'", obj47.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test343");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl36.getParent();
        objNodeImpl36.setDepth((int) (byte) 1);
        boolean boolean47 = objNodeImpl36.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test344");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj20 = objNodeImpl16.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl16.copy();
        java.lang.String str22 = objNodeImpl16.toString();
        objNodeImpl16.setName("");
        java.lang.String str25 = objNodeImpl16.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(100)" + "'", str22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(100)" + "'", str25.equals("Node(100)"));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test345");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        boolean boolean47 = objNodeImpl44.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl49.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl49.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.String str61 = objNodeImpl58.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str69 = objNodeImpl65.toString();
        java.lang.Object obj70 = objNodeImpl65.getContent();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.String str73 = objNodeImpl58.toString();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj77 = objNodeImpl44.getContent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode79 = objNodeImpl23.getParent();
        java.lang.Class<?> wildcardClass80 = objNodeImpl23.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList55);
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(1.0)" + "'", str61.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 1.0f + "'", obj70.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Node(1.0)" + "'", str73.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test346");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl9.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeImpl9.getClass();
        boolean boolean20 = objNodeImpl9.isLeaf();
        java.lang.Object obj21 = objNodeImpl9.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + 1.0f + "'", obj21.equals(1.0f));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test347");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl9.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList21 = objNodeImpl9.getChildren();
        boolean boolean22 = objNodeImpl9.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertNotNull(objNodeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test348");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setDepth((int) (byte) 100);
        java.lang.String str8 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        boolean boolean16 = objNodeImpl10.isLeaf();
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        objNodeImpl10.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl10.copy();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl10.copy();
        java.lang.Class<?> wildcardClass23 = objNodeImpl10.getClass();
        objNodeImpl10.setName("Node(100)");
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test349");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.setName("");
        objNodeImpl3.setDepth(10);
        java.lang.String str30 = objNodeImpl3.toString();
        boolean boolean31 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(1.0)" + "'", str30.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test350");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        java.lang.Object obj13 = null;
        objNodeImpl8.setContent(obj13);
        objNodeImpl8.setDepth((int) '#');
        java.lang.Class<?> wildcardClass17 = objNodeImpl8.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test351");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setDepth((int) (short) 1);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl15.getChildren();
        objNodeImpl15.setName("Node(Node(1.0))");
        boolean boolean23 = objNodeImpl15.isLeaf();
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean25 = objNodeImpl7.isLeaf();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test352");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Class<?> wildcardClass7 = objNodeImpl5.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl11.getParent();
        java.lang.Object obj16 = null;
        objNodeImpl11.setContent(obj16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj22 = objNodeImpl19.getName();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setDepth((int) (short) 1);
        boolean boolean30 = objNodeImpl25.isRoot();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        boolean boolean33 = objNodeImpl32.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl32.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl34.getChildren();
        boolean boolean36 = objNodeImpl34.isLeaf();
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl5.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNull(objNode15);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(objNode38);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test353");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl1.copy();
        objNodeImpl1.setDepth((int) 'a');
        java.lang.Object obj19 = new java.lang.Object();
        java.lang.Class<?> wildcardClass20 = obj19.getClass();
        java.lang.Class<?> wildcardClass21 = obj19.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.String str36 = objNodeImpl33.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.lang.String str44 = objNodeImpl40.toString();
        java.lang.Object obj45 = objNodeImpl40.getContent();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str48 = objNodeImpl33.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str56 = objNodeImpl52.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode57 = objNodeImpl52.getParent();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl52.setDepth((int) (short) 1);
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl52.copy();
        boolean boolean63 = objNodeImpl52.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + 1.0f + "'", obj45.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode57);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test354");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl38.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl48.getParent();
        try {
            java.lang.Class<?> wildcardClass50 = objNode49.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertNull(objNode49);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test355");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        java.lang.Object obj16 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl11.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        java.lang.Object obj29 = objNodeImpl19.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.String str43 = objNodeImpl40.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.String str51 = objNodeImpl47.toString();
        java.lang.Object obj52 = objNodeImpl47.getContent();
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl40.setDepth(1);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.lang.Object obj58 = objNodeImpl40.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl40.getChildren();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl5.getChildren();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + (byte) 100 + "'", obj29.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "Node(1.0)" + "'", str51.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + 1.0f + "'", obj52.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(100)" + "'", obj58.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeList62);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test356");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.String str31 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.String str39 = objNodeImpl35.toString();
        java.lang.Object obj40 = objNodeImpl35.getContent();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.lang.String str43 = objNodeImpl28.toString();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl12);
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class<?> wildcardClass48 = obj46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl53.isLeaf();
        boolean boolean58 = objNodeImpl53.isRoot();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl53.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl53.getParent();
        objNodeImpl3.setParent(objNode62);
        java.lang.String str64 = objNodeImpl3.toString();
        boolean boolean65 = objNodeImpl3.isLeaf();
        boolean boolean66 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(1.0)" + "'", str31.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Node(1.0)" + "'", str39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNode62);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(Node(100))" + "'", str64.equals("Node(Node(100))"));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test357");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl47);
        java.lang.String str66 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) str66);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(Node(1.0))" + "'", str66.equals("Node(Node(1.0))"));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test358");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass28 = objNodeImpl8.getClass();
        java.lang.Class<?> wildcardClass29 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean46 = objNodeImpl39.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl39.getParent();
        objNodeImpl39.setName("Node(class java.lang.Object)");
        objNodeImpl39.setName("Node(1)");
        java.lang.Class<?> wildcardClass52 = objNodeImpl39.getClass();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test359");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class<?> wildcardClass30 = obj28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.String str57 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.lang.String str65 = objNodeImpl61.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl61.getParent();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl61.setDepth((int) (short) 1);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl31);
        boolean boolean72 = objNodeImpl31.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = objNodeImpl31.copy();
        java.lang.Class<?> wildcardClass74 = objNodeImpl73.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(objNodeImpl73);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test360");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.String str14 = objNodeImpl11.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.Object obj16 = objNodeImpl11.getContent();
        objNodeImpl11.setName("Node(Node(0))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1.0)" + "'", str14.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test361");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.lang.String str10 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(1.0)" + "'", str10.equals("Node(1.0)"));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test362");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl15.setName("");
        java.lang.Class<?> wildcardClass29 = objNodeImpl15.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean31 = objNodeImpl15.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test363");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl8.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl8.getClass();
        java.lang.Object obj45 = objNodeImpl8.getContent();
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class<?> wildcardClass48 = obj46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl49.getChildren();
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl49);
        objNodeImpl49.setDepth((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(objNodeList50);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test364");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl1.getChildren();
        boolean boolean35 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        java.lang.String str56 = objNodeImpl53.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str64 = objNodeImpl60.toString();
        java.lang.Object obj65 = objNodeImpl60.getContent();
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str68 = objNodeImpl53.toString();
        objNodeImpl37.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = objNodeImpl53.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl72.setName("Node(1.0)");
        objNodeImpl70.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.Object obj80 = objNodeImpl72.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl72.copy();
        boolean boolean82 = objNodeImpl72.isLeaf();
        objNodeImpl72.setDepth((int) (short) 1);
        java.lang.String str85 = objNodeImpl72.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl72);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl86);
        boolean boolean88 = objNodeImpl86.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(1.0)" + "'", str64.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + 1.0f + "'", obj65.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + obj80 + "' != '" + "Node(1.0)" + "'", obj80.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + str85 + "' != '" + "Node(1.0)" + "'", str85.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test365");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = objNodeImpl1.copy();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeImpl7);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test366");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Object obj8 = objNodeImpl3.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl11.getChildren();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeList12);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test367");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setDepth((int) 'a');
        java.lang.Class<?> wildcardClass23 = objNodeImpl20.getClass();
        java.lang.String str24 = objNodeImpl20.toString();
        boolean boolean25 = objNodeImpl20.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        boolean boolean34 = objNodeImpl28.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        java.lang.Class<?> wildcardClass44 = objNodeImpl36.getClass();
        java.lang.Object obj45 = objNodeImpl36.getContent();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl36.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        java.lang.Class<?> wildcardClass59 = objNodeImpl51.getClass();
        java.lang.Class<?> wildcardClass60 = objNodeImpl51.getClass();
        boolean boolean61 = objNodeImpl51.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl51.copy();
        java.lang.String str63 = objNodeImpl62.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = objNodeImpl62.copy();
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.String str70 = objNodeImpl67.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl72.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        java.lang.String str78 = objNodeImpl74.toString();
        java.lang.Object obj79 = objNodeImpl74.getContent();
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl87.setContent((java.lang.Object) 1.0f);
        objNodeImpl85.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        boolean boolean91 = objNodeImpl85.isLeaf();
        objNodeImpl74.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl85);
        objNodeImpl36.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl85);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl36);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode95 = objNodeImpl36.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Node(100)" + "'", str24.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + (byte) 100 + "'", obj45.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(100)" + "'", str63.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl64);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Node(1.0)" + "'", str70.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj79 + "' != '" + 1.0f + "'", obj79.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(objNode95);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test368");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        boolean boolean10 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test369");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl27);
        java.lang.String str30 = objNodeImpl29.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(Node([]))" + "'", str30.equals("Node(Node([]))"));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test370");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        boolean boolean16 = objNodeImpl15.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test371");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj28 = objNodeImpl25.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = objNodeImpl25.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl25.getParent();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        objNodeImpl3.setName("Node(Node(#))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(objNodeImpl30);
        org.junit.Assert.assertNull(objNode31);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test372");
        java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeIterable0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeIterable0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test373");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl68.setName("");
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl68.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode83);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test374");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        objNodeImpl35.setDepth((int) (short) 1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = null;
        objNodeImpl35.setParent(objNode42);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode39);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test375");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl47.copy();
        objNodeImpl47.setName("Node(100)");
        java.lang.Object obj53 = objNodeImpl47.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "Node(100)" + "'", obj53.equals("Node(100)"));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test376");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Object obj32 = null;
        objNodeImpl27.setContent(obj32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Object obj48 = null;
        objNodeImpl43.setContent(obj48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setDepth((int) (short) 1);
        boolean boolean62 = objNodeImpl57.isRoot();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass65 = objNodeImpl57.getClass();
        java.lang.Object obj66 = objNodeImpl57.getContent();
        objNodeImpl9.setContent(obj66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl9.getParent();
        boolean boolean69 = objNodeImpl9.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList70 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList70);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 1.0f + "'", obj66.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objNodeList70);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test377");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        boolean boolean32 = objNodeImpl27.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean34 = objNodeImpl27.isRoot();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl27.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl27.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode37);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test378");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Object obj15 = objNodeImpl10.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl10.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl10.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj15 + "' != '" + "Node(100)" + "'", obj15.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objNodeImpl18);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test379");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.String str9 = objNodeImpl8.toString();
        java.lang.String str10 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Object obj19 = null;
        objNodeImpl14.setContent(obj19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl30.getParent();
        java.lang.Object obj35 = null;
        objNodeImpl30.setContent(obj35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.Class<?> wildcardClass52 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str78 = objNodeImpl63.toString();
        objNodeImpl63.setName("Node(#)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl44.setName("");
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        objNodeImpl89.setDepth((int) (short) 1);
        objNodeImpl87.setContent((java.lang.Object) objNodeImpl89);
        objNodeImpl87.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl97 = objNodeImpl87.copy();
        java.lang.Object obj98 = objNodeImpl97.getContent();
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl97);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(100)" + "'", str10.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl97);
        org.junit.Assert.assertNotNull(obj98);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test380");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        boolean boolean84 = objNodeImpl30.isLeaf();
        java.lang.Object obj85 = objNodeImpl30.getName();
        java.lang.String str86 = objNodeImpl30.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + obj85 + "' != '" + "hi!" + "'", obj85.equals("hi!"));
        org.junit.Assert.assertTrue("'" + str86 + "' != '" + "Node(1.0)" + "'", str86.equals("Node(1.0)"));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test381");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        boolean boolean46 = objNodeImpl45.isRoot();
        java.lang.String str47 = objNodeImpl45.toString();
        objNodeImpl45.setName("Node(Node())");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(Node(Node(Node())))" + "'", str47.equals("Node(Node(Node(Node())))"));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test382");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.String str4 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setDepth((int) (short) 1);
        boolean boolean12 = objNodeImpl7.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList13 = objNodeImpl7.getChildren();
        java.lang.Object obj14 = objNodeImpl7.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl18.getParent();
        java.lang.Class<?> wildcardClass23 = objNodeImpl18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj28 = objNodeImpl25.getName();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl18);
        java.lang.Object obj31 = objNodeImpl18.getName();
        objNodeImpl7.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        objNodeImpl5.setContent((java.lang.Object) objNodeImpl18);
        objNodeImpl5.setName("Node(Node())");
        objNodeImpl5.setDepth((int) (short) 1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(class java.lang.Object)" + "'", str4.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeList13);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0f + "'", obj14.equals(1.0f));
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test383");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj10 = objNodeImpl7.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl7.copy();
        objNodeImpl11.setName("Node(100)");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNull(objNode15);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test384");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        boolean boolean84 = objNodeImpl30.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode85 = objNodeImpl30.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl86 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(objNode85);
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test385");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl33.copy();
        java.lang.Object obj45 = objNodeImpl33.getName();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test386");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str37 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl41.getParent();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl41.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl41.isRoot();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode53 = objNodeImpl41.getParent();
        objNodeImpl41.setName("Node(Node(100))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertNotNull(objNode53);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test387");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl32.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl32.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl68);
        java.lang.Object obj81 = objNodeImpl61.getContent();
        objNodeImpl61.setName("Node(100)");
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.Object obj86 = new java.lang.Object();
        java.lang.Class<?> wildcardClass87 = obj86.getClass();
        java.lang.Class<?> wildcardClass88 = obj86.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass88);
        java.lang.String str90 = objNodeImpl89.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl91 = objNodeImpl89.copy();
        java.lang.Class<?> wildcardClass92 = objNodeImpl91.getClass();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl91);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(wildcardClass88);
        org.junit.Assert.assertTrue("'" + str90 + "' != '" + "Node(class java.lang.Object)" + "'", str90.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test388");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = null;
        try {
            objNodeImpl17.addChild(objNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeImpl29);
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test389");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.Class<?> wildcardClass54 = objNodeImpl46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl46);
        java.lang.Object obj56 = objNodeImpl46.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 1.0f + "'", obj56.equals(1.0f));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test390");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        java.lang.Class<?> wildcardClass10 = objNodeImpl3.getClass();
        java.lang.Object obj11 = objNodeImpl3.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test391");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        java.lang.Object obj9 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "Node(100)" + "'", obj9.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNode11);
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test392");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        java.lang.Object obj28 = objNodeImpl19.getContent();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class<?> wildcardClass33 = obj31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl34.copy();
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl35);
        java.lang.String str37 = objNodeImpl19.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (byte) 100 + "'", obj28.equals((byte) 100));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(Node(class java.lang.Object))" + "'", str37.equals("Node(Node(class java.lang.Object))"));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test393");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Class<?> wildcardClass23 = objNodeImpl19.getClass();
        objNodeImpl19.setDepth((int) (short) 100);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        objNodeImpl35.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl35.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl35.setContent((java.lang.Object) objNodeImpl42);
        java.lang.Object obj55 = objNodeImpl35.getContent();
        objNodeImpl35.setName("Node(100)");
        objNodeImpl35.setDepth((int) (short) -1);
        objNodeImpl19.setContent((java.lang.Object) (short) -1);
        java.lang.Object obj61 = objNodeImpl19.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + (short) -1 + "'", obj61.equals((short) -1));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test394");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl35);
        java.lang.Object obj48 = objNodeImpl28.getContent();
        objNodeImpl28.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl28.getChildren();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.Class<?> wildcardClass78 = objNodeImpl63.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl63);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test395");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl3.getChildren();
        boolean boolean16 = objNodeImpl3.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test396");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        java.lang.Object obj8 = objNodeImpl5.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl5.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl9.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl9.getChildren();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertNull(objNode10);
        org.junit.Assert.assertNotNull(objNodeList11);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test397");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        objNodeImpl3.setDepth((int) (byte) 0);
        objNodeImpl3.setDepth(1);
        java.lang.Class<?> wildcardClass20 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Class<?> wildcardClass29 = objNodeImpl24.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj34 = objNodeImpl31.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl24.setName("");
        objNodeImpl24.setName("hi!");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl24.getParent();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "Node(100)" + "'", obj34.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode40);
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test398");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test399");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setDepth((int) (short) 1);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.Class<?> wildcardClass94 = objNodeImpl10.getClass();
        java.lang.Class<?> wildcardClass95 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl96 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test400");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        boolean boolean18 = objNodeImpl7.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl7.getChildren();
        objNodeImpl7.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl23.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl23.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Class<?> wildcardClass48 = objNodeImpl43.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj53 = objNodeImpl50.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        objNodeImpl36.setContent((java.lang.Object) objNodeImpl43);
        java.lang.Object obj56 = objNodeImpl36.getContent();
        objNodeImpl36.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl36.getParent();
        java.lang.Object obj60 = new java.lang.Object();
        java.lang.Class<?> wildcardClass61 = obj60.getClass();
        java.lang.Class<?> wildcardClass62 = obj60.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        boolean boolean71 = objNodeImpl67.isLeaf();
        boolean boolean72 = objNodeImpl67.isRoot();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl67.setName("Node(1.0)");
        java.lang.Object obj76 = objNodeImpl67.getName();
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode80 = objNodeImpl7.getParent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "Node(100)" + "'", obj53.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "Node(1.0)" + "'", obj76.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode80);
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test401");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.String str16 = objNodeImpl12.toString();
        java.lang.Object obj17 = objNodeImpl12.getContent();
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str44 = objNodeImpl29.toString();
        objNodeImpl29.setName("Node(#)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj51 = objNodeImpl50.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl50);
        java.lang.String str53 = objNodeImpl50.toString();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        java.lang.String str59 = objNodeImpl56.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str67 = objNodeImpl63.toString();
        java.lang.Object obj68 = objNodeImpl63.getContent();
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        boolean boolean80 = objNodeImpl74.isLeaf();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode82 = objNodeImpl63.getParent();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl63);
        objNodeImpl63.setName("Node(Node(100))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl87.setContent((java.lang.Object) 1.0f);
        boolean boolean90 = objNodeImpl87.isLeaf();
        java.lang.Class<?> wildcardClass91 = objNodeImpl87.getClass();
        boolean boolean92 = objNodeImpl87.isRoot();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl94 = objNodeImpl63.copy();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0f + "'", obj17.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(100)" + "'", str53.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 1.0f + "'", obj68.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objNode82);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(objNodeImpl94);
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test402");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        boolean boolean31 = objNodeImpl30.isLeaf();
        boolean boolean32 = objNodeImpl30.isRoot();
        java.lang.String str33 = objNodeImpl30.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(Node(Node()))" + "'", str33.equals("Node(Node(Node()))"));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test403");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Class<?> wildcardClass45 = objNodeImpl27.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl27.getChildren();
        java.lang.Object obj47 = objNodeImpl27.getName();
        java.lang.String str48 = objNodeImpl27.toString();
        objNodeImpl27.setDepth((int) (short) 0);
        objNodeImpl1.setContent((java.lang.Object) (short) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(100)" + "'", obj47.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node())" + "'", str48.equals("Node(Node())"));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test404");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl36.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(#)");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNode45);
        org.junit.Assert.assertNotNull(objNode46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(objNodeImpl48);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test405");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl10.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl20.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode21);
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test406");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj10 = objNodeImpl7.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl7.copy();
        objNodeImpl11.setName("Node(100)");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.Class<?> wildcardClass15 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test407");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        objNodeImpl39.setName("Node(-1)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl39.getChildren();
        objNodeImpl39.setDepth((int) (short) 10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(objNodeList42);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test408");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Class<?> wildcardClass26 = objNodeImpl21.getClass();
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean28 = objNodeImpl7.isLeaf();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test409");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        objNodeImpl3.setName("Node([])");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        java.lang.Object obj40 = objNodeImpl20.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setDepth((int) (short) 1);
        boolean boolean55 = objNodeImpl50.isRoot();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean57 = objNodeImpl50.isRoot();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean59 = objNodeImpl20.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl20.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        boolean boolean62 = objNodeImpl3.isRoot();
        java.lang.Class<?> wildcardClass63 = objNodeImpl3.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test410");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj48 = objNodeImpl38.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = null;
        try {
            objNodeImpl38.addChild(objNode49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test411");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj54 = objNodeImpl45.getName();
        java.lang.String str55 = objNodeImpl45.toString();
        boolean boolean56 = objNodeImpl45.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(100)" + "'", str55.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test412");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        java.lang.Object obj29 = objNodeImpl17.getName();
        java.lang.Object obj30 = objNodeImpl17.getName();
        java.lang.Object obj31 = objNodeImpl17.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + '#' + "'", obj31.equals('#'));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test413");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        java.lang.String str35 = objNodeImpl34.toString();
        objNodeImpl34.setName("Node(Node(Node()))");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(1.0)" + "'", str35.equals("Node(1.0)"));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test414");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl16.setDepth((int) (short) 10);
        java.lang.Object obj22 = objNodeImpl16.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl16.getParent();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test415");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl42.setName("");
        java.lang.String str56 = objNodeImpl42.toString();
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean58 = objNodeImpl42.isRoot();
        java.lang.String str59 = objNodeImpl42.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test416");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl3.getParent();
        java.lang.Object obj5 = objNodeImpl3.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode6 = objNodeImpl3.getParent();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + "Node(class java.lang.Object)" + "'", obj5.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNull(objNode6);
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test417");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        java.lang.String str49 = objNodeImpl36.toString();
        boolean boolean50 = objNodeImpl36.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl36.copy();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objNodeImpl51);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test418");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "hi!");
        java.lang.Class<?> wildcardClass2 = charSequenceNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test419");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl9.getParent();
        java.lang.Object obj14 = null;
        objNodeImpl9.setContent(obj14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setDepth((int) (short) 1);
        boolean boolean28 = objNodeImpl23.isRoot();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = objNodeImpl23.copy();
        boolean boolean31 = objNodeImpl30.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl30.copy();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = null;
        try {
            objNodeImpl1.addChild(objNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertNull(objNode13);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objNodeImpl32);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test420");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl7.copy();
        objNodeImpl16.setDepth((-1));
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test421");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setDepth((int) (short) 1);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl45.getChildren();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        objNodeImpl60.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test422");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.Object obj13 = objNodeImpl1.getContent();
        java.lang.String str14 = objNodeImpl1.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl1.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (byte) 100 + "'", obj13.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(100)" + "'", str14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode15);
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test423");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        boolean boolean9 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("Node(Node())");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setDepth((int) (short) 1);
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl13.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Class<?> wildcardClass50 = objNodeImpl32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl32);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.Object obj53 = objNodeImpl13.getContent();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 1.0f + "'", obj53.equals(1.0f));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test424");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setDepth((int) (short) 1);
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl58);
        boolean boolean60 = objNodeImpl32.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test425");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        boolean boolean12 = objNodeImpl1.isRoot();
        boolean boolean13 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test426");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        java.lang.Object obj28 = objNodeImpl19.getContent();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj31 = objNodeImpl19.getName();
        boolean boolean32 = objNodeImpl19.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (byte) 100 + "'", obj28.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test427");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList21 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl15.copy();
        objNodeImpl22.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl22.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl29.getParent();
        java.lang.Class<?> wildcardClass34 = objNodeImpl29.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        objNodeImpl29.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl22.setContent((java.lang.Object) objNodeImpl29);
        java.lang.Object obj42 = objNodeImpl22.getContent();
        java.lang.String str43 = objNodeImpl22.toString();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setName("Node(0)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertNotNull(objNodeList21);
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNull(objNode33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(Node(1.0))" + "'", str43.equals("Node(Node(1.0))"));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test428");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl10.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj22 = objNodeImpl21.getName();
        objNodeImpl21.setName("Node(1)");
        java.lang.Object obj25 = objNodeImpl21.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode17);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (byte) 100 + "'", obj25.equals((byte) 100));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test429");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl43.copy();
        java.lang.Object obj47 = objNodeImpl46.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(Node(Node()))" + "'", obj47.equals("Node(Node(Node()))"));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test430");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl3.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(objNode18);
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test431");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        objNodeImpl9.setDepth((int) 'a');
        java.lang.String str22 = objNodeImpl9.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(1.0)" + "'", str22.equals("Node(1.0)"));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test432");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj54 = objNodeImpl45.getName();
        java.lang.String str55 = objNodeImpl45.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl45);
        objNodeImpl45.setName("Node(#)");
        java.lang.Class<?> wildcardClass59 = objNodeImpl45.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(100)" + "'", str55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test433");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl36.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl44.getParent();
        java.lang.Object obj49 = null;
        objNodeImpl44.setContent(obj49);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Object obj65 = null;
        objNodeImpl60.setContent(obj65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj71 = objNodeImpl68.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setDepth((int) (short) 1);
        boolean boolean79 = objNodeImpl74.isRoot();
        objNodeImpl60.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        java.lang.Class<?> wildcardClass82 = objNodeImpl74.getClass();
        objNodeImpl36.setContent((java.lang.Object) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl74);
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode86 = objNodeImpl84.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNode86);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertTrue("'" + obj71 + "' != '" + "Node(100)" + "'", obj71.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(objNode86);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test434");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setDepth((int) (short) 1);
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl13.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Class<?> wildcardClass50 = objNodeImpl32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl32);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl13);
        java.lang.Object obj54 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl3.getParent();
        objNodeImpl3.setDepth((int) (byte) 0);
        java.lang.Object obj58 = null;
        objNodeImpl3.setContent(obj58);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(objNode55);
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test435");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setDepth(0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test436");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        java.lang.Object obj16 = objNodeImpl3.getContent();
        boolean boolean17 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl19.setDepth((int) (short) 100);
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        boolean boolean36 = objNodeImpl32.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl32.copy();
        objNodeImpl32.setDepth((int) '#');
        boolean boolean40 = objNodeImpl32.isRoot();
        boolean boolean41 = objNodeImpl32.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Object obj50 = null;
        objNodeImpl45.setContent(obj50);
        boolean boolean52 = objNodeImpl45.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl45.getChildren();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        objNodeImpl45.setDepth((int) '#');
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objNodeList53);
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test437");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("Node(Node(Node()))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test438");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        try {
            java.lang.Class<?> wildcardClass32 = objNode31.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test439");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        objNodeImpl3.setName("Node([])");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
        objNodeImpl11.setDepth((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl11);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test440");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        boolean boolean23 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Object obj40 = objNodeImpl35.getContent();
        java.lang.Object obj41 = objNodeImpl35.getName();
        objNodeImpl8.setContent(obj41);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl8.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode43);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test441");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        boolean boolean51 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl8.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(objNode52);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test442");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        boolean boolean13 = objNodeImpl1.isRoot();
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Class<?> wildcardClass16 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test443");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        java.lang.Object obj9 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (byte) 100 + "'", obj9.equals((byte) 100));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test444");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Object obj36 = null;
        objNodeImpl31.setContent(obj36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj42 = objNodeImpl39.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl45.copy();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl45.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNotNull(objNodeList55);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test445");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        objNodeImpl8.setDepth((int) 'a');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList19);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test446");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        boolean boolean14 = objNodeImpl8.isLeaf();
        objNodeImpl8.setContent((java.lang.Object) (-1));
        java.lang.Object obj17 = objNodeImpl8.getName();
        boolean boolean18 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl22.getParent();
        java.lang.Object obj27 = null;
        objNodeImpl22.setContent(obj27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl43.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl43.getParent();
        objNodeImpl30.setContent((java.lang.Object) objNodeImpl43);
        java.lang.Class<?> wildcardClass48 = objNodeImpl30.getClass();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl8);
        boolean boolean51 = objNodeImpl8.isLeaf();
        boolean boolean52 = objNodeImpl8.isLeaf();
        objNodeImpl6.setContent((java.lang.Object) boolean52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList54 = objNodeImpl6.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl6.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl6.copy();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(100)" + "'", obj17.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(objNodeList54);
        org.junit.Assert.assertNotNull(objNodeList55);
        org.junit.Assert.assertNotNull(objNodeImpl56);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test447");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        java.lang.Object obj28 = objNodeImpl19.getContent();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        java.lang.Class<?> wildcardClass33 = obj31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl34.copy();
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl35);
        objNodeImpl35.setDepth(1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl35.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (byte) 100 + "'", obj28.equals((byte) 100));
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeImpl39);
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test448");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setContent((java.lang.Object) "");
        objNodeImpl19.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        java.lang.Object obj25 = objNodeImpl24.getContent();
        objNodeImpl24.setName("Node()");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.Object obj29 = objNodeImpl1.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "" + "'", obj25.equals(""));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test449");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.String str16 = objNodeImpl12.toString();
        java.lang.Object obj17 = objNodeImpl12.getContent();
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str44 = objNodeImpl29.toString();
        objNodeImpl29.setName("Node(#)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str49 = objNodeImpl1.toString();
        objNodeImpl1.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        boolean boolean52 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0f + "'", obj17.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(100)" + "'", str49.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test450");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl9.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl39.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList40);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(objNodeList40);
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test451");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        boolean boolean26 = objNodeImpl20.isLeaf();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test452");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        boolean boolean9 = objNodeImpl1.isLeaf();
        boolean boolean10 = objNodeImpl1.isLeaf();
        objNodeImpl1.setDepth((-1));
        java.lang.Object obj13 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (byte) 100 + "'", obj13.equals((byte) 100));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test453");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean44 = objNodeImpl1.isLeaf();
        boolean boolean45 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl1.copy();
        java.lang.Object obj47 = objNodeImpl46.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + (-1) + "'", obj47.equals((-1)));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test454");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        java.lang.Object obj29 = objNodeImpl28.getContent();
        java.lang.String str30 = objNodeImpl28.toString();
        objNodeImpl28.setName("hi!");
        java.lang.String str33 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean41 = objNodeImpl35.isLeaf();
        objNodeImpl35.setContent((java.lang.Object) (-1));
        java.lang.Object obj44 = objNodeImpl35.getName();
        boolean boolean45 = objNodeImpl35.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode53 = objNodeImpl49.getParent();
        java.lang.Object obj54 = null;
        objNodeImpl49.setContent(obj54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj60 = objNodeImpl57.getName();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList69 = objNodeImpl63.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = objNodeImpl63.copy();
        objNodeImpl70.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode73 = objNodeImpl70.getParent();
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl70);
        java.lang.Class<?> wildcardClass75 = objNodeImpl57.getClass();
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl35);
        boolean boolean78 = objNodeImpl35.isLeaf();
        boolean boolean79 = objNodeImpl35.isLeaf();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList81 = objNodeImpl35.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(Node(1.0))" + "'", str30.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(Node(1.0))" + "'", str33.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(objNode53);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList69);
        org.junit.Assert.assertNotNull(objNodeImpl70);
        org.junit.Assert.assertNull(objNode73);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(objNodeList81);
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test455");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        objNodeImpl14.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.String str27 = objNodeImpl24.toString();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl14.setName("Node(#)");
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl14.copy();
        java.lang.Object obj33 = objNodeImpl32.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(1.0)" + "'", str27.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(#)" + "'", obj33.equals("Node(#)"));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test456");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl8.isLeaf();
        boolean boolean10 = objNodeImpl8.isRoot();
        java.lang.Object obj11 = objNodeImpl8.getName();
        boolean boolean12 = objNodeImpl8.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(100)" + "'", obj11.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test457");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        boolean boolean28 = objNodeImpl8.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = null;
        try {
            objNodeImpl8.addChild(objNode30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList29);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test458");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Object obj32 = null;
        objNodeImpl27.setContent(obj32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Object obj48 = null;
        objNodeImpl43.setContent(obj48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setDepth((int) (short) 1);
        boolean boolean62 = objNodeImpl57.isRoot();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass65 = objNodeImpl57.getClass();
        java.lang.Object obj66 = objNodeImpl57.getContent();
        objNodeImpl9.setContent(obj66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl9.getParent();
        boolean boolean69 = objNodeImpl9.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl9.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 1.0f + "'", obj66.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objNode70);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test459");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        java.lang.String str31 = objNodeImpl11.toString();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>> objNodeImplNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>>(objNodeImpl11);
        objNodeImpl11.setDepth(100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setDepth((int) (short) 1);
        boolean boolean41 = objNodeImpl36.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl36);
        objNodeImpl42.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl42.copy();
        java.lang.String str46 = objNodeImpl45.toString();
        objNodeImpl11.setContent((java.lang.Object) str46);
        objNodeImpl11.setName("Node(hi!)");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node())" + "'", str31.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(Node(1.0))" + "'", str46.equals("Node(Node(1.0))"));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test460");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl3.copy();
        java.lang.Object obj13 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl17.getParent();
        java.lang.Class<?> wildcardClass22 = objNodeImpl17.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl3.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode30);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test461");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl8.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        java.lang.Class<?> wildcardClass58 = objNodeImpl50.getClass();
        boolean boolean59 = objNodeImpl50.isLeaf();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList69 = objNodeImpl63.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = objNodeImpl63.copy();
        java.lang.Class<?> wildcardClass71 = objNodeImpl63.getClass();
        java.lang.Class<?> wildcardClass72 = objNodeImpl63.getClass();
        boolean boolean73 = objNodeImpl63.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = objNodeImpl63.copy();
        java.lang.String str75 = objNodeImpl74.toString();
        objNodeImpl50.setContent((java.lang.Object) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = objNodeImpl50.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(objNodeList69);
        org.junit.Assert.assertNotNull(objNodeImpl70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeImpl74);
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Node(100)" + "'", str75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl77);
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test462");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl6);
        boolean boolean8 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl7.copy();
        java.lang.Object obj10 = new java.lang.Object();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        java.lang.Class<?> wildcardClass12 = obj10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList21 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl15.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.String str27 = objNodeImpl24.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.lang.String str35 = objNodeImpl31.toString();
        java.lang.Object obj36 = objNodeImpl31.getContent();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str39 = objNodeImpl24.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.lang.String str47 = objNodeImpl43.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl43.getParent();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl43.setDepth((int) (short) 1);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl57.getParent();
        java.lang.Class<?> wildcardClass62 = objNodeImpl57.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj67 = objNodeImpl64.getName();
        objNodeImpl57.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        java.lang.Class<?> wildcardClass69 = objNodeImpl57.getClass();
        java.lang.Object obj70 = objNodeImpl57.getName();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList72 = objNodeImpl43.getChildren();
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        boolean boolean74 = objNodeImpl43.isLeaf();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objNodeList21);
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(1.0)" + "'", str27.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(1.0)" + "'", str35.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + 1.0f + "'", obj36.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Node(1.0)" + "'", str39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(1.0)" + "'", str47.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "Node(100)" + "'", obj67.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test463");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test464");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.String str48 = objNodeImpl27.toString();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>> objNodeImplNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>>(objNodeImpl27);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test465");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        objNodeImpl10.setDepth((int) (byte) 1);
        objNodeImpl10.setName("Node(Node(Node()))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test466");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        boolean boolean12 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        objNodeImpl30.setContent((java.lang.Object) '#');
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.lang.Class<?> wildcardClass40 = objNodeImpl16.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl16);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl1.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test467");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj25 = objNodeImpl3.getContent();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (byte) 100 + "'", obj25.equals((byte) 100));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test468");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        objNodeImpl10.setDepth((int) ' ');
        boolean boolean68 = objNodeImpl10.isLeaf();
        boolean boolean69 = objNodeImpl10.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test469");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Object obj8 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "Node(100)" + "'", obj8.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test470");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        objNodeImpl1.setName("");
        java.lang.String str7 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test471");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        boolean boolean48 = objNodeImpl47.isRoot();
        java.lang.Object obj49 = objNodeImpl47.getContent();
        java.lang.Object obj50 = objNodeImpl47.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(Node(1.0))" + "'", obj50.equals("Node(Node(1.0))"));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test472");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl3.setName("");
        objNodeImpl3.setName("Node(100)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl3.copy();
        java.lang.String str20 = objNodeImpl3.toString();
        java.lang.Class<?> wildcardClass21 = objNodeImpl3.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test473");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.setName("");
        objNodeImpl3.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl31.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl37.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl37.copy();
        objNodeImpl44.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl44.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl51.getParent();
        java.lang.Class<?> wildcardClass56 = objNodeImpl51.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        objNodeImpl51.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        objNodeImpl44.setContent((java.lang.Object) objNodeImpl51);
        java.lang.Object obj64 = objNodeImpl44.getContent();
        objNodeImpl44.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl44.getParent();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Class<?> wildcardClass70 = obj68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass70);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        boolean boolean79 = objNodeImpl75.isLeaf();
        boolean boolean80 = objNodeImpl75.isRoot();
        objNodeImpl71.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl75.setName("Node(1.0)");
        java.lang.Object obj84 = objNodeImpl75.getName();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Object obj88 = objNodeImpl35.getContent();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNull(objNode55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNull(objNode67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + obj84 + "' != '" + "Node(1.0)" + "'", obj84.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj88 + "' != '" + 1.0f + "'", obj88.equals(1.0f));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test474");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        boolean boolean11 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        boolean boolean19 = objNodeImpl15.isLeaf();
        boolean boolean20 = objNodeImpl15.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl15.getParent();
        java.lang.String str22 = objNodeImpl15.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.Object obj25 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "Node(1.0)" + "'", str22.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 1.0f + "'", obj25.equals(1.0f));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test475");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl38.copy();
        objNodeImpl48.setDepth((-1));
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl52.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl57);
        boolean boolean59 = objNodeImpl58.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl58.copy();
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl60);
        java.lang.String str62 = objNodeImpl60.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(Node(1.0))" + "'", str62.equals("Node(Node(1.0))"));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test476");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        java.lang.Object obj29 = objNodeImpl28.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean37 = objNodeImpl31.isLeaf();
        objNodeImpl31.setContent((java.lang.Object) (-1));
        java.lang.Object obj40 = objNodeImpl31.getName();
        boolean boolean41 = objNodeImpl31.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        objNodeImpl44.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.String str57 = objNodeImpl54.toString();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl44.setName("Node(#)");
        objNodeImpl31.setContent((java.lang.Object) objNodeImpl44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl44.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        objNodeImpl28.setContent((java.lang.Object) boolean63);
        objNodeImpl28.setDepth((int) (short) 100);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(Node(1.0))" + "'", obj29.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test477");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.setName("");
        objNodeImpl3.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl31.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl37.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl37.copy();
        objNodeImpl44.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl44.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl51.getParent();
        java.lang.Class<?> wildcardClass56 = objNodeImpl51.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        objNodeImpl51.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        objNodeImpl44.setContent((java.lang.Object) objNodeImpl51);
        java.lang.Object obj64 = objNodeImpl44.getContent();
        objNodeImpl44.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl44.getParent();
        java.lang.Object obj68 = new java.lang.Object();
        java.lang.Class<?> wildcardClass69 = obj68.getClass();
        java.lang.Class<?> wildcardClass70 = obj68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass70);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        boolean boolean79 = objNodeImpl75.isLeaf();
        boolean boolean80 = objNodeImpl75.isRoot();
        objNodeImpl71.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl75.setName("Node(1.0)");
        java.lang.Object obj84 = objNodeImpl75.getName();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Object obj88 = objNodeImpl35.getName();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNull(objNode55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertNull(objNode67);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + obj84 + "' != '" + "Node(1.0)" + "'", obj84.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj88 + "' != '" + "Node(1.0)" + "'", obj88.equals("Node(1.0)"));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test478");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl32.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl32.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl68);
        java.lang.Object obj81 = objNodeImpl61.getContent();
        objNodeImpl61.setName("Node(100)");
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList86 = objNodeImpl32.getChildren();
        boolean boolean87 = objNodeImpl32.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(objNodeList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test479");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl11.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl31.getParent();
        boolean boolean39 = objNodeImpl31.isLeaf();
        java.lang.Class<?> wildcardClass40 = objNodeImpl31.getClass();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl31);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Object obj50 = null;
        objNodeImpl45.setContent(obj50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj56 = objNodeImpl53.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl59.copy();
        objNodeImpl66.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl66.getParent();
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl66);
        objNodeImpl53.setName("hi!");
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl75.setDepth((int) (short) 1);
        objNodeImpl75.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl85.setContent((java.lang.Object) 1.0f);
        objNodeImpl83.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl85);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList89 = objNodeImpl83.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = objNodeImpl83.copy();
        java.lang.Class<?> wildcardClass91 = objNodeImpl83.getClass();
        boolean boolean92 = objNodeImpl83.isLeaf();
        objNodeImpl75.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        java.lang.String str94 = objNodeImpl83.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode95 = objNodeImpl83.getParent();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        java.lang.String str97 = objNodeImpl31.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "Node(100)" + "'", obj56.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(objNodeList89);
        org.junit.Assert.assertNotNull(objNodeImpl90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Node(100)" + "'", str94.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNode95);
        org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Node(100)" + "'", str97.equals("Node(100)"));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test480");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl17.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl17.getChildren();
        java.lang.String str30 = objNodeImpl17.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertNotNull(objNode28);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(#)" + "'", str30.equals("Node(#)"));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test481");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl7.getParent();
        java.lang.Object obj19 = objNodeImpl7.getContent();
        boolean boolean20 = objNodeImpl7.isLeaf();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + 1.0f + "'", obj19.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test482");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj16);
        boolean boolean18 = objNodeImpl17.isRoot();
        boolean boolean19 = objNodeImpl17.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test483");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj38 = objNodeImpl27.getContent();
        boolean boolean39 = objNodeImpl27.isRoot();
        boolean boolean40 = objNodeImpl27.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + (byte) 100 + "'", obj38.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test484");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl3.getParent();
        objNodeImpl3.setDepth(10);
        boolean boolean19 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl3.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(objNode20);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test485");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl9.getParent();
        java.lang.Object obj14 = null;
        objNodeImpl9.setContent(obj14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Object obj30 = null;
        objNodeImpl25.setContent(obj30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass47 = objNodeImpl39.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        boolean boolean50 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl1.copy();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertNull(objNode13);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objNodeImpl51);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test486");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl9.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl19);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test487");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class<?> wildcardClass37 = obj35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj50 = objNodeImpl38.getContent();
        java.lang.Object obj51 = new java.lang.Object();
        java.lang.Class<?> wildcardClass52 = obj51.getClass();
        java.lang.Class<?> wildcardClass53 = obj51.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setDepth((int) (short) 1);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl94 = objNodeImpl84.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = objNodeImpl84.copy();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertNotNull(objNodeImpl94);
        org.junit.Assert.assertNotNull(objNodeImpl95);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test488");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl42.setName("");
        java.lang.String str56 = objNodeImpl42.toString();
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.Class<?> wildcardClass58 = objNodeImpl35.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl35.getChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertNotNull(objNodeList59);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test489");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.Object obj36 = null;
        objNodeImpl10.setContent(obj36);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test490");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl11.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl31.getParent();
        boolean boolean39 = objNodeImpl31.isLeaf();
        java.lang.Class<?> wildcardClass40 = objNodeImpl31.getClass();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Class<?> wildcardClass42 = objNodeImpl31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl43.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNode38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test491");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl10.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNull(objNode11);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test492");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        boolean boolean28 = objNodeImpl9.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl9.copy();
        java.lang.Object obj30 = objNodeImpl29.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 1.0f + "'", obj30.equals(1.0f));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test493");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        objNodeImpl9.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.String str29 = objNodeImpl25.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl25.getParent();
        boolean boolean31 = objNodeImpl25.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl35.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl35.copy();
        java.lang.Class<?> wildcardClass43 = objNodeImpl35.getClass();
        objNodeImpl35.setName("");
        boolean boolean46 = objNodeImpl35.isRoot();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test494");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl3.getParent();
        java.lang.String str10 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(1.0)" + "'", str10.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl11);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test495");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        boolean boolean10 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl26.getParent();
        java.lang.Class<?> wildcardClass31 = objNodeImpl26.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl26);
        java.lang.Object obj39 = objNodeImpl19.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setDepth((int) (short) 1);
        boolean boolean54 = objNodeImpl49.isRoot();
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        boolean boolean56 = objNodeImpl49.isRoot();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str58 = objNodeImpl49.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl49.getParent();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Node(1.0)" + "'", str58.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode59);
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test496");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl8.getParent();
        objNodeImpl8.setName("Node(a)");
        boolean boolean41 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test497");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        objNodeImpl1.setDepth((int) '4');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl17.getParent();
        java.lang.Object obj22 = null;
        objNodeImpl17.setContent(obj22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj28 = objNodeImpl25.getName();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        java.lang.Object obj38 = null;
        objNodeImpl33.setContent(obj38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setDepth((int) (short) 1);
        boolean boolean52 = objNodeImpl47.isRoot();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.lang.Class<?> wildcardClass55 = objNodeImpl47.getClass();
        boolean boolean56 = objNodeImpl47.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList58 = objNodeImpl1.getChildren();
        java.lang.Object obj59 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objNodeList58);
        org.junit.Assert.assertTrue("'" + obj59 + "' != '" + (byte) 100 + "'", obj59.equals((byte) 100));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test498");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl34.getClass();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test499");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Object obj7 = objNodeImpl5.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl5.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl5.copy();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(1.0)" + "'", obj7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test500");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        objNodeImpl38.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Class<?> wildcardClass50 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj58 = objNodeImpl38.getContent();
        objNodeImpl38.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl38.getChildren();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Class<?> wildcardClass65 = objNodeImpl3.getClass();
        objNodeImpl3.setDepth((int) (short) -1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNull(objNode41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }
}

