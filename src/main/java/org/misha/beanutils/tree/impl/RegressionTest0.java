import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        java.lang.CharSequence charSequence0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>(charSequence0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeList7.getClass();
        java.lang.Class<?> wildcardClass9 = objNodeList7.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "");
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeList7);
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList7);
        java.lang.Class<?> wildcardClass9 = objNodeList7.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("hi!");
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.Object obj4 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj4);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(class java.lang.Object)" + "'", obj4.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList18);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = null;
        try {
            objNodeImpl24.addChild(objNode25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl2 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node(class java.lang.Object)");
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        objNodeImpl1.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = null;
        try {
            objNodeImpl1.addChild(objNode8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl35);
        java.lang.Object obj48 = objNodeImpl28.getContent();
        objNodeImpl28.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl28.getChildren();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl1.setName("hi!");
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeList51);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        java.lang.String str54 = objNodeImpl45.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(100)" + "'", str54.equals("Node(100)"));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        objNodeImpl9.setDepth((int) 'a');
        java.lang.Object obj30 = objNodeImpl9.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList22);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl11.getChildren();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        java.lang.Class<?> wildcardClass31 = obj30.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = null;
        try {
            objNodeImpl3.addChild(objNode10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(objNode9);
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = null;
        try {
            objNodeImpl45.addChild(objNode46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl55.copy();
        objNodeImpl62.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode65 = objNodeImpl62.getParent();
        objNodeImpl45.setContent((java.lang.Object) objNodeImpl62);
        objNodeImpl62.setName("Node(class java.lang.Object)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertNull(objNode65);
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>> strComparableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "Node(Node(Node()))");
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        boolean boolean35 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.setName("");
        objNodeImpl3.setDepth(10);
        java.lang.Object obj30 = objNodeImpl3.getName();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "" + "'", obj30.equals(""));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        java.lang.Object obj47 = objNodeImpl36.getName();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(1.0)" + "'", obj47.equals("Node(1.0)"));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl28.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode29);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl1.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Class<?> wildcardClass27 = objNodeImpl17.getClass();
        java.lang.String str28 = objNodeImpl17.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(#)" + "'", str28.equals("Node(#)"));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.String str28 = objNodeImpl25.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str36 = objNodeImpl32.toString();
        java.lang.Object obj37 = objNodeImpl32.getContent();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.String str40 = objNodeImpl25.toString();
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.Object obj44 = objNodeImpl25.getName();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0f + "'", obj37.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(#)" + "'", obj44.equals("Node(#)"));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        boolean boolean31 = objNodeImpl30.isLeaf();
        java.lang.Object obj32 = objNodeImpl30.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj32);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(Node(Node()))" + "'", obj32.equals("Node(Node(Node()))"));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        try {
            java.lang.String str12 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.Class<?> wildcardClass9 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.lang.Object obj0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node(Node())");
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        objNodeImpl3.setName("Node(100)");
        org.junit.Assert.assertNull(objNode7);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj43 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl3.copy();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(class java.lang.Object)" + "'", obj43.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl44);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable> serializableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable>((java.io.Serializable) 100L);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        java.lang.Class<?> wildcardClass20 = objNodeImpl12.getClass();
        java.lang.Class<?> wildcardClass21 = objNodeImpl12.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl12.getParent();
        objNodeImpl8.addChild(objNode22);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(objNode22);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList29);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        boolean boolean7 = objNodeImpl6.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl6.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(objNode8);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable> serializableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable>((java.io.Serializable) '#');
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList7);
        java.lang.Class<?> wildcardClass9 = objNodeIterableNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration> genericDeclarationNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration>((java.lang.reflect.GenericDeclaration) wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        try {
            java.lang.String str22 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl60.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertNotNull(objNode66);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        objNodeImpl1.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass38 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl20);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl41);
        java.lang.Class<?> wildcardClass43 = objNodeImpl41.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl17.copy();
        objNodeImpl29.setName("Node(Node())");
        boolean boolean32 = objNodeImpl29.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        java.lang.String str44 = objNodeImpl23.toString();
        java.lang.String str45 = objNodeImpl23.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(Node())" + "'", str44.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(Node())" + "'", str45.equals("Node(Node())"));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl50.getParent();
        java.lang.Object obj55 = null;
        objNodeImpl50.setContent(obj55);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl66.getParent();
        java.lang.Object obj71 = null;
        objNodeImpl66.setContent(obj71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj77 = objNodeImpl74.getName();
        objNodeImpl66.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl80.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setDepth((int) (short) 1);
        boolean boolean85 = objNodeImpl80.isRoot();
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl80);
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl80);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.String str89 = objNodeImpl38.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) str89);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "Node(100)" + "'", obj77.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Node(1.0)" + "'", str89.equals("Node(1.0)"));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        boolean boolean62 = objNodeImpl60.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass32 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass32);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList13 = objNodeImpl7.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl7.copy();
        objNodeImpl14.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl14.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Class<?> wildcardClass26 = objNodeImpl21.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl14.setContent((java.lang.Object) objNodeImpl21);
        java.lang.Object obj34 = objNodeImpl14.getContent();
        objNodeImpl14.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl14.getParent();
        java.lang.Object obj38 = new java.lang.Object();
        java.lang.Class<?> wildcardClass39 = obj38.getClass();
        java.lang.Class<?> wildcardClass40 = obj38.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass40);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        boolean boolean49 = objNodeImpl45.isLeaf();
        boolean boolean50 = objNodeImpl45.isRoot();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl45.setName("Node(1.0)");
        java.lang.Object obj54 = objNodeImpl45.getName();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        objNodeImpl5.setName("Node(class java.lang.Object)");
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeList13);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(1.0)" + "'", obj54.equals("Node(1.0)"));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl6);
        java.lang.String str8 = objNodeImpl7.toString();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(Node(1.0))" + "'", str8.equals("Node(Node(1.0))"));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl9.getChildren();
        java.lang.Class<?> wildcardClass24 = objNodeList23.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList15);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeList15);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList19);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeList19);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str66 = objNodeImpl10.toString();
        java.lang.Object obj67 = objNodeImpl10.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "Node(100)" + "'", obj67.equals("Node(100)"));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        objNodeImpl1.setName("");
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        java.lang.Object obj50 = objNodeImpl49.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(Node(1.0))" + "'", obj50.equals("Node(Node(1.0))"));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setName("Node(Node(1.0))");
        objNodeImpl1.setName("");
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node(Node(Node()))");
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Class<?> wildcardClass41 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNode42);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        objNodeImpl10.setName("Node(Node(1.0))");
        java.lang.Object obj40 = objNodeImpl10.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean12 = objNodeImpl8.isLeaf();
        boolean boolean13 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl8.getParent();
        java.lang.String str15 = objNodeImpl8.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str17 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl14.getChildren();
        java.lang.Class<?> wildcardClass16 = objNodeList15.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        boolean boolean28 = objNodeImpl10.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        try {
            java.lang.String str13 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>(objNode0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Object obj4 = objNodeImpl3.getName();
        java.lang.Object obj5 = objNodeImpl3.getName();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(Node(100))" + "'", obj4.equals("Node(Node(100))"));
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + "Node(Node(100))" + "'", obj5.equals("Node(Node(100))"));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        boolean boolean28 = objNodeImpl15.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setDepth((int) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass12 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node(-1)");
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setDepth(1);
        objNodeImpl42.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl42.getParent();
        objNodeImpl8.setParent(objNode61);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl8.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode61);
        org.junit.Assert.assertNotNull(objNode63);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setName("Node(1.0)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList38);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = null;
        try {
            objNodeImpl1.addChild(objNode34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl4 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass2);
        java.lang.Class<?> wildcardClass5 = typeNodeImpl4.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.Object obj40 = objNodeImpl11.getName();
        objNodeImpl11.setDepth((int) (byte) -1);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str37 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl41.getParent();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl41.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl41.isRoot();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.Class<?> wildcardClass52 = objNodeImpl41.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.String str20 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setDepth((int) (short) 1);
        boolean boolean25 = objNodeImpl20.isRoot();
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        boolean boolean27 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str36 = objNodeImpl32.toString();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl32.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.String str44 = objNodeImpl41.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.lang.String str52 = objNodeImpl48.toString();
        java.lang.Object obj53 = objNodeImpl48.getContent();
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.lang.Object obj58 = new java.lang.Object();
        java.lang.Class<?> wildcardClass59 = obj58.getClass();
        java.lang.Class<?> wildcardClass60 = obj58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass60);
        objNodeImpl48.setContent((java.lang.Object) wildcardClass60);
        java.lang.String str63 = objNodeImpl48.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList71 = objNodeImpl65.getChildren();
        objNodeImpl65.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.String str78 = objNodeImpl75.toString();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl65.setName("Node(#)");
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl48.getParent();
        objNodeImpl32.setParent(objNode83);
        objNodeImpl32.setName("Node(Node(Node()))");
        objNodeImpl1.setContent((java.lang.Object) "Node(Node(Node()))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(1.0)" + "'", str52.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + 1.0f + "'", obj53.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(class java.lang.Object)" + "'", str63.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList71);
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode83);
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Class<?> wildcardClass48 = objNodeImpl47.getClass();
        java.lang.Object obj49 = objNodeImpl47.getContent();
        java.lang.Class<?> wildcardClass50 = obj49.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.lang.String str9 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl5.getParent();
        boolean boolean11 = objNodeImpl5.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl5.getParent();
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNode13);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        boolean boolean12 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl1.copy();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>> strComparableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "Node(#)");
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.lang.reflect.GenericDeclaration genericDeclaration0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration> genericDeclarationNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration>(genericDeclaration0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        java.lang.Class<?> wildcardClass42 = objNodeImpl33.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl29.isRoot();
        boolean boolean39 = objNodeImpl29.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        boolean boolean15 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "Node(Node(1))");
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        boolean boolean7 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(objNode8);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        boolean boolean36 = objNodeImpl8.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList7);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList7);
        org.junit.Assert.assertNotNull(objNodeList7);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        java.lang.String str44 = objNodeImpl23.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl23.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(Node())" + "'", str44.equals("Node(Node())"));
        org.junit.Assert.assertNotNull(objNode45);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isRoot();
        boolean boolean18 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Object obj26 = null;
        objNodeImpl21.setContent(obj26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj32 = objNodeImpl29.getName();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl35.getChildren();
        objNodeImpl35.setContent((java.lang.Object) '#');
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.String str45 = objNodeImpl35.toString();
        boolean boolean46 = objNodeImpl35.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList54 = objNodeImpl48.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl48.copy();
        java.lang.Class<?> wildcardClass56 = objNodeImpl48.getClass();
        java.lang.Object obj57 = objNodeImpl48.getContent();
        objNodeImpl35.setContent((java.lang.Object) objNodeImpl48);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        boolean boolean60 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(100)" + "'", obj32.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(#)" + "'", str45.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(objNodeList54);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + (byte) 100 + "'", obj57.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Object obj32 = null;
        objNodeImpl27.setContent(obj32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Object obj48 = null;
        objNodeImpl43.setContent(obj48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setDepth((int) (short) 1);
        boolean boolean62 = objNodeImpl57.isRoot();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass65 = objNodeImpl57.getClass();
        java.lang.Object obj66 = objNodeImpl57.getContent();
        objNodeImpl9.setContent(obj66);
        java.lang.Object obj68 = objNodeImpl9.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 1.0f + "'", obj66.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 1.0f + "'", obj68.equals(1.0f));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.String str42 = objNodeImpl39.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        java.lang.Object obj51 = objNodeImpl46.getContent();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str54 = objNodeImpl39.toString();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl39.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl58.copy();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj66 = objNodeImpl58.getName();
        objNodeImpl58.setName("Node(class java.lang.Object)");
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl58.getParent();
        boolean boolean71 = objNodeImpl58.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(1.0)" + "'", str54.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(1.0)" + "'", obj66.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        java.lang.Object obj13 = null;
        objNodeImpl8.setContent(obj13);
        objNodeImpl8.setDepth((int) '#');
        objNodeImpl8.setName("Node([])");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl29);
        objNodeImpl38.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList10);
        java.lang.Class<?> wildcardClass12 = objNodeList10.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl1.copy();
        java.lang.String str50 = objNodeImpl49.toString();
        java.lang.Object obj51 = objNodeImpl49.getContent();
        boolean boolean52 = objNodeImpl49.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        objNodeImpl3.setName("Node(Node(Node()))");
        org.junit.Assert.assertNull(objNode7);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl8.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl8.getClass();
        java.lang.Object obj45 = objNodeImpl8.getContent();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        boolean boolean81 = objNodeImpl32.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList13 = objNodeImpl12.getChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNotNull(objNodeList13);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeCollection0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeCollection0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl34.getName();
        java.lang.Class<?> wildcardClass45 = objNodeImpl34.getClass();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        boolean boolean12 = objNodeImpl3.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl8.getParent();
        java.lang.Object obj32 = new java.lang.Object();
        java.lang.Class<?> wildcardClass33 = obj32.getClass();
        java.lang.Class<?> wildcardClass34 = obj32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass34);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        boolean boolean43 = objNodeImpl39.isLeaf();
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl39.setName("Node(1.0)");
        java.lang.Object obj48 = objNodeImpl39.getName();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl39.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(1.0)" + "'", obj48.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode50);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.String str30 = objNodeImpl11.toString();
        boolean boolean31 = objNodeImpl11.isRoot();
        java.lang.Object obj32 = objNodeImpl11.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(Node())" + "'", str30.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(100)" + "'", obj32.equals("Node(100)"));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl16.setDepth(100);
        boolean boolean22 = objNodeImpl16.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setDepth(100);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList6 = objNodeImpl1.getChildren();
        java.lang.Object obj7 = objNodeImpl1.getContent();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList6);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + (byte) 100 + "'", obj7.equals((byte) 100));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl16.getParent();
        java.lang.Object obj21 = null;
        objNodeImpl16.setContent(obj21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj27 = objNodeImpl24.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl37);
        java.lang.Class<?> wildcardClass42 = objNodeImpl24.getClass();
        java.lang.Object obj43 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        boolean boolean51 = objNodeImpl45.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl45);
        boolean boolean54 = objNodeImpl1.isLeaf();
        java.lang.Object obj55 = objNodeImpl1.getName();
        objNodeImpl1.setName("Node(Node(100))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + "Node(100)" + "'", obj27.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        java.lang.Class<?> wildcardClass6 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = null;
        try {
            objNodeImpl1.addChild(objNode7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl40.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl46.copy();
        objNodeImpl53.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl53.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Class<?> wildcardClass65 = objNodeImpl60.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl60);
        java.lang.Object obj73 = objNodeImpl53.getContent();
        objNodeImpl53.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl53.getParent();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        java.lang.Class<?> wildcardClass79 = obj77.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean88 = objNodeImpl84.isLeaf();
        boolean boolean89 = objNodeImpl84.isRoot();
        objNodeImpl80.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setName("Node(1.0)");
        java.lang.Object obj93 = objNodeImpl84.getName();
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.Object obj97 = objNodeImpl35.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNull(objNode76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + obj93 + "' != '" + "Node(1.0)" + "'", obj93.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj97 + "' != '" + (byte) 100 + "'", obj97.equals((byte) 100));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeImpl8.getClass();
        java.lang.Object obj20 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0f + "'", obj20.equals(1.0f));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        java.lang.Object obj28 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl37.getChildren();
        java.lang.String str48 = objNodeImpl37.toString();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean50 = objNodeImpl37.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) 'a');
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass77 = objNodeImpl17.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        boolean boolean82 = objNodeImpl79.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl79.getParent();
        java.lang.Class<?> wildcardClass84 = objNodeImpl79.getClass();
        objNodeImpl17.setContent((java.lang.Object) wildcardClass84);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode87 = objNodeImpl86.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(objNodeImpl86);
        org.junit.Assert.assertNull(objNode87);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        java.lang.Class<?> wildcardClass10 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass13 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl46.setName("Node(0)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.Class<?> wildcardClass7 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.lang.String str43 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(-1)" + "'", str43.equals("Node(-1)"));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.lang.Object obj15 = objNodeImpl3.getContent();
        java.lang.Object obj16 = objNodeImpl3.getName();
        java.lang.Object obj17 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl26.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl26.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        java.lang.Class<?> wildcardClass38 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl26.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Object obj46 = objNodeImpl26.getContent();
        objNodeImpl26.setName("Node(100)");
        java.lang.String str49 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        objNodeImpl58.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl58.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl58.setContent((java.lang.Object) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl58.copy();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl26.setName("Node(1)");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(1.0)" + "'", obj17.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(Node(1.0))" + "'", str49.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl78);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.setDepth((int) (short) 0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl19.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl7.copy();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeImpl18);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Class<?> wildcardClass23 = objNodeImpl19.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration> genericDeclarationNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration>((java.lang.reflect.GenericDeclaration) wildcardClass23);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) "Node(-1)");
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setDepth((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean20 = objNodeImpl9.isRoot();
        java.lang.Object obj21 = objNodeImpl9.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "Node(100)" + "'", obj21.equals("Node(100)"));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        boolean boolean43 = objNodeImpl36.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str47 = objNodeImpl38.toString();
        objNodeImpl38.setName("Node([])");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(1.0)" + "'", str47.equals("Node(1.0)"));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl9.getParent();
        java.lang.Object obj14 = null;
        objNodeImpl9.setContent(obj14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Object obj30 = null;
        objNodeImpl25.setContent(obj30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass47 = objNodeImpl39.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Class<?> wildcardClass49 = objNodeImpl39.getClass();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertNull(objNode13);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>> strComparableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "Node(1)");
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        boolean boolean81 = objNodeImpl11.isRoot();
        objNodeImpl11.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl87.setContent((java.lang.Object) 1.0f);
        objNodeImpl85.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        boolean boolean91 = objNodeImpl85.isLeaf();
        java.lang.Class<?> wildcardClass92 = objNodeImpl85.getClass();
        objNodeImpl85.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = objNodeImpl85.copy();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl95);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList97 = objNodeImpl95.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(objNodeImpl95);
        org.junit.Assert.assertNotNull(objNodeList97);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setName("Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl1);
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        java.lang.String str29 = objNodeImpl17.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(#)" + "'", str29.equals("Node(#)"));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean58 = objNodeImpl52.isLeaf();
        objNodeImpl52.setContent((java.lang.Object) (-1));
        java.lang.Object obj61 = objNodeImpl52.getName();
        boolean boolean62 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl52.copy();
        java.lang.String str64 = objNodeImpl52.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        boolean boolean66 = objNodeImpl8.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(-1)" + "'", str64.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass38 = objNodeImpl8.getClass();
        objNodeImpl8.setName("Node(Node(1.0))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "Node(Node())");
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl9.getParent();
        java.lang.Object obj14 = null;
        objNodeImpl9.setContent(obj14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Object obj30 = null;
        objNodeImpl25.setContent(obj30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass47 = objNodeImpl39.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        boolean boolean59 = objNodeImpl53.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl60.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertNull(objNode13);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode62);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl16.setDepth((int) (short) 10);
        java.lang.Class<?> wildcardClass22 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl33.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl33);
        boolean boolean45 = objNodeImpl44.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode13 = objNodeImpl9.getParent();
        java.lang.Object obj14 = null;
        objNodeImpl9.setContent(obj14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj20 = objNodeImpl17.getName();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Object obj30 = null;
        objNodeImpl25.setContent(obj30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj36 = objNodeImpl33.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setDepth((int) (short) 1);
        boolean boolean44 = objNodeImpl39.isRoot();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass47 = objNodeImpl39.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        boolean boolean59 = objNodeImpl53.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        objNodeImpl60.setName("Node(Node(1))");
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertNull(objNode13);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(objNodeImpl60);
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl34.getParent();
        objNodeImpl34.setDepth((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNode41);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        java.lang.Class<?> wildcardClass25 = objNodeImpl17.getClass();
        java.lang.Class<?> wildcardClass26 = objNodeImpl17.getClass();
        boolean boolean27 = objNodeImpl17.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        boolean boolean35 = objNodeImpl31.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl31.copy();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl31);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl40.getParent();
        boolean boolean48 = objNodeImpl40.isLeaf();
        java.lang.Class<?> wildcardClass49 = objNodeImpl40.getClass();
        boolean boolean50 = objNodeImpl40.isLeaf();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNode47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        java.lang.Object obj8 = objNodeImpl3.getContent();
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl3.setName("Node(1)");
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setName("Node(Node(1.0))");
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.lang.Class<?> wildcardClass12 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl1.getChildren();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objNodeList15);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl8.isLeaf();
        boolean boolean10 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Class<?> wildcardClass19 = objNodeImpl14.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj24 = objNodeImpl21.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl14.setName("");
        java.lang.Class<?> wildcardClass28 = objNodeImpl14.getClass();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.Object obj30 = objNodeImpl8.getName();
        objNodeImpl8.setName("Node(class java.lang.Object)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(100)" + "'", obj24.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl50.getParent();
        java.lang.Object obj55 = null;
        objNodeImpl50.setContent(obj55);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj61 = objNodeImpl58.getName();
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl66.getParent();
        java.lang.Object obj71 = null;
        objNodeImpl66.setContent(obj71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj77 = objNodeImpl74.getName();
        objNodeImpl66.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl80.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setDepth((int) (short) 1);
        boolean boolean85 = objNodeImpl80.isRoot();
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl80);
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl80);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList89 = objNodeImpl50.getChildren();
        try {
            java.lang.String str90 = objNodeImpl50.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "Node(100)" + "'", obj77.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objNodeList89);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.Object obj7 = objNodeImpl3.getContent();
        objNodeImpl3.setDepth((int) (short) 0);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 1.0f + "'", obj7.equals(1.0f));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        boolean boolean14 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = objNodeImpl18.copy();
        java.lang.Class<?> wildcardClass26 = objNodeImpl18.getClass();
        java.lang.Class<?> wildcardClass27 = objNodeImpl18.getClass();
        boolean boolean28 = objNodeImpl18.isLeaf();
        objNodeImpl18.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl18.copy();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl34.getParent();
        boolean boolean38 = objNodeImpl34.isLeaf();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl34.getParent();
        java.lang.String str42 = objNodeImpl34.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertNotNull(objNodeImpl25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNode41);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        boolean boolean25 = objNodeImpl24.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl24.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        objNodeImpl28.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.String str41 = objNodeImpl38.toString();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl38.getChildren();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl26.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "Node(100)");
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        java.lang.String str31 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        boolean boolean62 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class<?> wildcardClass30 = obj28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.String str57 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.lang.String str65 = objNodeImpl61.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl61.getParent();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl61.setDepth((int) (short) 1);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Class<?> wildcardClass72 = objNodeImpl31.getClass();
        boolean boolean73 = objNodeImpl31.isRoot();
        java.lang.Object obj74 = new java.lang.Object();
        java.lang.Class<?> wildcardClass75 = obj74.getClass();
        java.lang.Class<?> wildcardClass76 = obj74.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass76);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl77.getParent();
        java.lang.Object obj79 = objNodeImpl77.getName();
        objNodeImpl31.setContent(obj79);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode66);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertTrue("'" + obj79 + "' != '" + "Node(class java.lang.Object)" + "'", obj79.equals("Node(class java.lang.Object)"));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        boolean boolean27 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl38.setDepth((int) (short) 100);
        boolean boolean46 = objNodeImpl38.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl1.copy();
        boolean boolean50 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        boolean boolean48 = objNodeImpl47.isRoot();
        java.lang.Object obj49 = objNodeImpl47.getContent();
        java.lang.Object obj50 = objNodeImpl47.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertNotNull(obj50);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        objNodeImpl14.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl14);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.lang.String str23 = objNodeImpl9.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(100)" + "'", str23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl9.getParent();
        boolean boolean17 = objNodeImpl9.isLeaf();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        objNodeImpl39.setDepth((int) 'a');
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Class<?> wildcardClass43 = objNodeImpl39.getClass();
        boolean boolean44 = objNodeImpl39.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj46 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl1.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setName("Node(100)");
        boolean boolean13 = objNodeImpl3.isRoot();
        objNodeImpl3.setDepth((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        boolean boolean81 = objNodeImpl11.isRoot();
        objNodeImpl11.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl87.setContent((java.lang.Object) 1.0f);
        objNodeImpl85.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl87);
        boolean boolean91 = objNodeImpl85.isLeaf();
        java.lang.Class<?> wildcardClass92 = objNodeImpl85.getClass();
        objNodeImpl85.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = objNodeImpl85.copy();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl95);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode97 = objNodeImpl95.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertNotNull(objNodeImpl95);
        org.junit.Assert.assertNull(objNode97);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        boolean boolean48 = objNodeImpl45.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.String str62 = objNodeImpl59.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl66.setContent((java.lang.Object) 1.0f);
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        java.lang.String str70 = objNodeImpl66.toString();
        java.lang.Object obj71 = objNodeImpl66.getContent();
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.lang.String str74 = objNodeImpl59.toString();
        objNodeImpl59.setName("Node(1.0)");
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj79 = objNodeImpl34.getName();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(1.0)" + "'", str62.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Node(1.0)" + "'", str70.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj71 + "' != '" + 1.0f + "'", obj71.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj79 + "' != '" + "Node(1.0)" + "'", obj79.equals("Node(1.0)"));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class<?> wildcardClass30 = obj28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.String str57 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.lang.String str65 = objNodeImpl61.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl61.getParent();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl61.setDepth((int) (short) 1);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Class<?> wildcardClass72 = objNodeImpl31.getClass();
        boolean boolean73 = objNodeImpl31.isRoot();
        boolean boolean74 = objNodeImpl31.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode66);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass6 = objNodeList5.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Object obj8 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Class<?> wildcardClass17 = objNodeImpl12.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj22 = objNodeImpl19.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl12);
        java.lang.Object obj25 = objNodeImpl12.getName();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean28 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + 1.0f + "'", obj8.equals(1.0f));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setName("Node(100)");
        boolean boolean13 = objNodeImpl3.isRoot();
        java.lang.Object obj14 = objNodeImpl3.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0f + "'", obj14.equals(1.0f));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode15);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.lang.String str9 = objNodeImpl1.toString();
        java.lang.Object obj10 = objNodeImpl1.getContent();
        boolean boolean11 = objNodeImpl1.isLeaf();
        java.lang.Object obj12 = objNodeImpl1.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (byte) 100 + "'", obj10.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "Node(100)" + "'", obj12.equals("Node(100)"));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl3.setName("Node(100)");
        java.lang.String str20 = objNodeImpl3.toString();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(100)" + "'", str20.equals("Node(100)"));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.Object obj7 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        java.lang.Object obj14 = objNodeImpl9.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl9.getParent();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.Object obj17 = objNodeImpl3.getName();
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 1.0f + "'", obj7.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0f + "'", obj14.equals(1.0f));
        org.junit.Assert.assertNull(objNode15);
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(100)" + "'", obj17.equals("Node(100)"));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.Class<?> wildcardClass54 = objNodeImpl46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass54);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.Object obj7 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        java.lang.Object obj14 = objNodeImpl9.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl9.getParent();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.Object obj17 = null;
        objNodeImpl9.setContent(obj17);
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + 1.0f + "'", obj7.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + 1.0f + "'", obj14.equals(1.0f));
        org.junit.Assert.assertNull(objNode15);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.String str23 = objNodeImpl8.toString();
        boolean boolean24 = objNodeImpl8.isLeaf();
        java.lang.Object obj25 = objNodeImpl8.getName();
        java.lang.Object obj26 = objNodeImpl8.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node()" + "'", str23.equals("Node()"));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        java.lang.Object obj9 = objNodeImpl3.getContent();
        boolean boolean10 = objNodeImpl3.isLeaf();
        boolean boolean11 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Class<?> wildcardClass7 = objNodeImpl6.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl6.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl6.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode9);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.String str26 = objNodeImpl20.toString();
        java.lang.Object obj27 = objNodeImpl20.getContent();
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "Node(1.0)" + "'", str26.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj27 + "' != '" + 1.0f + "'", obj27.equals(1.0f));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeList7.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass8);
        java.lang.Object obj10 = objNodeImpl9.getContent();
        java.lang.String str11 = objNodeImpl9.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(class java.util.ArrayList)" + "'", str11.equals("Node(class java.util.ArrayList)"));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        java.lang.String str49 = objNodeImpl36.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl36.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl51.copy();
        objNodeImpl51.setName("Node(Node(Node()))");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNotNull(objNodeImpl52);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl33.copy();
        objNodeImpl42.setName("Node(Node())");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl8.isLeaf();
        boolean boolean10 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(objNode11);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl10.copy();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl16);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl3.setDepth((int) (byte) 100);
        boolean boolean18 = objNodeImpl3.isLeaf();
        boolean boolean19 = objNodeImpl3.isLeaf();
        try {
            java.lang.String str20 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeList7.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass8);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl9.getParent();
        objNodeImpl9.setDepth((int) 'a');
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(objNode10);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        boolean boolean32 = objNodeImpl27.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean34 = objNodeImpl27.isRoot();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj36 = objNodeImpl27.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        java.lang.Class<?> wildcardClass28 = objNodeImpl20.getClass();
        java.lang.Class<?> wildcardClass29 = objNodeImpl20.getClass();
        boolean boolean30 = objNodeImpl20.isLeaf();
        objNodeImpl20.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl20.copy();
        objNodeImpl18.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl18.setName("Node(Node(1.0))");
        objNodeImpl7.setContent((java.lang.Object) "Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        boolean boolean45 = objNodeImpl39.isLeaf();
        java.lang.Class<?> wildcardClass46 = objNodeImpl39.getClass();
        objNodeImpl39.setName("Node(class java.lang.Object)");
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl33.getParent();
        boolean boolean43 = objNodeImpl33.isLeaf();
        boolean boolean44 = objNodeImpl33.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl33.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(objNode45);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl3.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList10);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertNotNull(objNodeList10);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl22.setDepth(1);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.lang.Class<?> wildcardClass47 = objNodeImpl43.getClass();
        java.lang.Class<?> wildcardClass48 = objNodeImpl43.getClass();
        objNodeImpl22.setContent((java.lang.Object) wildcardClass48);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setDepth((int) (short) 1);
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl58);
        boolean boolean60 = objNodeImpl32.isLeaf();
        java.lang.Class<?> wildcardClass61 = objNodeImpl32.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl22.setDepth(1);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.Object obj40 = objNodeImpl22.getName();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        objNodeImpl38.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Class<?> wildcardClass50 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj58 = objNodeImpl38.getContent();
        objNodeImpl38.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl38.getChildren();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str64 = objNodeImpl38.toString();
        objNodeImpl38.setDepth((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNull(objNode41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(Node(1.0))" + "'", str64.equals("Node(Node(1.0))"));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        objNodeImpl1.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass38 = objNodeImpl20.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl20);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.lang.Object obj41 = objNodeImpl20.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.String str23 = objNodeImpl19.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(100)" + "'", str23.equals("Node(100)"));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        objNodeImpl1.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        java.lang.Object obj12 = objNodeImpl11.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (byte) 100 + "'", obj12.equals((byte) 100));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl3.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode22);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl6.setContent((java.lang.Object) 1.0f);
        java.lang.String str9 = objNodeImpl6.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.String str17 = objNodeImpl13.toString();
        java.lang.Object obj18 = objNodeImpl13.getContent();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean22 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0f + "'", obj18.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl3.setDepth(0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl8.getClass();
        boolean boolean10 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        java.lang.Object obj29 = objNodeImpl28.getContent();
        boolean boolean30 = objNodeImpl28.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl9.getParent();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNode20);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl21.getChildren();
        java.lang.Class<?> wildcardClass75 = objNodeList74.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(wildcardClass75);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Class<?> wildcardClass48 = objNodeImpl47.getClass();
        boolean boolean49 = objNodeImpl47.isRoot();
        java.lang.String str50 = objNodeImpl47.toString();
        java.lang.Object obj51 = objNodeImpl47.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(Node(1.0))" + "'", str50.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(Node(1.0))" + "'", obj51.equals("Node(Node(1.0))"));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl28.getParent();
        java.lang.Class<?> wildcardClass33 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Class<?> wildcardClass40 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj43 = objNodeImpl42.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl42);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl55.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        java.lang.String str75 = objNodeImpl71.toString();
        java.lang.Object obj76 = objNodeImpl71.getContent();
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        java.lang.String str79 = objNodeImpl64.toString();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl64.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl83.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj86 = objNodeImpl83.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = objNodeImpl83.copy();
        objNodeImpl83.setName("Node(1.0)");
        objNodeImpl81.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        java.lang.Object obj91 = objNodeImpl83.getName();
        objNodeImpl83.setName("Node(class java.lang.Object)");
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode95 = objNodeImpl83.getParent();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        objNodeImpl19.setName("Node()");
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Node(1.0)" + "'", str75.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 1.0f + "'", obj76.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Node(1.0)" + "'", str79.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl81);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "Node(100)" + "'", obj86.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl87);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + "Node(1.0)" + "'", obj91.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode95);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.Object obj40 = objNodeImpl11.getName();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setDepth((int) (byte) -1);
        objNodeImpl1.setDepth(1);
        boolean boolean12 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl6);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Class<?> wildcardClass18 = objNodeImpl9.getClass();
        boolean boolean19 = objNodeImpl9.isLeaf();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.Class<?> wildcardClass41 = obj39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass41);
        objNodeImpl29.setContent((java.lang.Object) wildcardClass41);
        java.lang.String str44 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        objNodeImpl46.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        java.lang.String str59 = objNodeImpl56.toString();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        objNodeImpl46.setName("Node(#)");
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl29.getParent();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl29.copy();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(class java.lang.Object)" + "'", str44.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode64);
        org.junit.Assert.assertNotNull(objNodeImpl66);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean12 = objNodeImpl8.isLeaf();
        boolean boolean13 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl8.getParent();
        java.lang.String str15 = objNodeImpl8.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl24.getParent();
        boolean boolean30 = objNodeImpl24.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Object obj32 = objNodeImpl31.getName();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl31.setName("Node(1.0)");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(1.0)" + "'", obj32.equals("Node(1.0)"));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode47 = objNodeImpl43.getParent();
        java.lang.Class<?> wildcardClass48 = objNodeImpl43.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj53 = objNodeImpl50.getName();
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl55.copy();
        java.lang.String str57 = objNodeImpl56.toString();
        objNodeImpl9.setContent((java.lang.Object) str57);
        objNodeImpl9.setDepth((int) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "Node(100)" + "'", obj53.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(Node(1.0))" + "'", str57.equals("Node(Node(1.0))"));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.String str38 = objNodeImpl10.toString();
        java.lang.Object obj39 = null;
        objNodeImpl10.setContent(obj39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl42.copy();
        objNodeImpl49.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl49.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl56.getParent();
        java.lang.Class<?> wildcardClass61 = objNodeImpl56.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj66 = objNodeImpl63.getName();
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl49.setContent((java.lang.Object) objNodeImpl56);
        java.lang.Object obj69 = objNodeImpl49.getContent();
        objNodeImpl49.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl49.getParent();
        objNodeImpl49.setDepth((int) '#');
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        try {
            java.lang.String str76 = objNodeImpl10.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(0)" + "'", str38.equals("Node(0)"));
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNull(objNode72);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl9.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl9.getChildren();
        java.lang.Object obj25 = objNodeImpl9.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (byte) 100 + "'", obj25.equals((byte) 100));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        java.lang.String str4 = objNodeImpl3.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList6 = objNodeImpl3.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl3.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeList7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(class java.lang.Object)" + "'", str4.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeList6);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.Class<?> wildcardClass59 = objNodeImpl47.getClass();
        java.lang.Object obj60 = objNodeImpl47.getName();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setDepth((int) (short) -1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        java.lang.Object obj11 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        java.lang.Object obj40 = objNodeImpl20.getContent();
        objNodeImpl20.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl20.getParent();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(100)" + "'", obj11.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNull(objNode43);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.String str9 = objNodeImpl8.toString();
        java.lang.String str10 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Object obj19 = null;
        objNodeImpl14.setContent(obj19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl30.getParent();
        java.lang.Object obj35 = null;
        objNodeImpl30.setContent(obj35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.Class<?> wildcardClass52 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str78 = objNodeImpl63.toString();
        objNodeImpl63.setName("Node(#)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl44.setName("");
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl8);
        java.lang.Class<?> wildcardClass86 = objNodeImpl85.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(100)" + "'", str10.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        boolean boolean13 = objNodeImpl1.isRoot();
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl1.copy();
        boolean boolean19 = objNodeImpl18.isRoot();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.lang.String str9 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        boolean boolean16 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl26.setDepth((int) 'a');
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl26.setDepth((int) (short) 10);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = null;
        try {
            objNodeImpl1.addChild(objNode33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Object obj48 = objNodeImpl47.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl47.copy();
        java.lang.Object obj51 = objNodeImpl47.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setDepth((int) (short) 1);
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl55);
        boolean boolean61 = objNodeImpl55.isRoot();
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.lang.String str63 = objNodeImpl47.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(Node(1.0))" + "'", str63.equals("Node(Node(1.0))"));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        java.lang.Object obj50 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl1.copy();
        java.lang.Object obj52 = objNodeImpl51.getName();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (byte) 100 + "'", obj50.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        java.lang.Object obj17 = null;
        objNodeImpl9.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        objNodeImpl27.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Class<?> wildcardClass39 = objNodeImpl34.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Object obj47 = objNodeImpl27.getContent();
        objNodeImpl27.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl27.getChildren();
        boolean boolean51 = objNodeImpl27.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl27.getParent();
        try {
            objNodeImpl9.addChild(objNode52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNull(objNode52);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj18 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl17);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl3.getParent();
        java.lang.Object obj22 = objNodeImpl3.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode21);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl10.copy();
        objNodeImpl10.setDepth((-1));
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertNotNull(objNodeImpl66);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.lang.Object obj11 = objNodeImpl3.getContent();
        boolean boolean12 = objNodeImpl3.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = objNodeImpl1.copy();
        java.lang.Object obj4 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl3.getParent();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl3);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + (byte) 100 + "'", obj4.equals((byte) 100));
        org.junit.Assert.assertNull(objNode5);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        boolean boolean14 = objNodeImpl3.isRoot();
        java.lang.Class<?> wildcardClass15 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass15);
        boolean boolean17 = objNodeImpl16.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl8.copy();
        java.lang.Object obj14 = objNodeImpl13.getContent();
        objNodeImpl13.setName("Node()");
        java.lang.Class<?> wildcardClass17 = objNodeImpl13.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "" + "'", obj14.equals(""));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl35);
        java.lang.Object obj48 = objNodeImpl28.getContent();
        objNodeImpl28.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl28.getChildren();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl28.setDepth((int) (byte) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj57 = objNodeImpl56.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl56.copy();
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl58);
        java.lang.Class<?> wildcardClass60 = objNodeImpl58.getClass();
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        java.lang.Class<?> wildcardClass80 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj83 = objNodeImpl82.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl82);
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        boolean boolean87 = objNodeImpl82.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(100)" + "'", obj83.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setName("Node(1.0)");
        java.lang.Class<?> wildcardClass38 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass38);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl1.getChildren();
        objNodeImpl1.setDepth((int) '4');
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList34);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        objNodeImpl3.setName("");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList10);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        java.lang.Object obj50 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList58 = objNodeImpl52.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = objNodeImpl52.copy();
        java.lang.Class<?> wildcardClass60 = objNodeImpl52.getClass();
        boolean boolean61 = objNodeImpl52.isLeaf();
        java.lang.Object obj62 = objNodeImpl52.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl52.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList64 = objNodeImpl52.getChildren();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList73 = objNodeImpl67.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl75.setDepth((int) (short) 1);
        boolean boolean80 = objNodeImpl75.isRoot();
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        boolean boolean82 = objNodeImpl75.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl75.getParent();
        objNodeImpl75.setDepth((int) (short) 1);
        boolean boolean86 = objNodeImpl75.isLeaf();
        java.lang.String str87 = objNodeImpl75.toString();
        objNodeImpl1.setContent((java.lang.Object) str87);
        java.lang.String str89 = objNodeImpl1.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (byte) 100 + "'", obj50.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList58);
        org.junit.Assert.assertNotNull(objNodeImpl59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + (byte) 100 + "'", obj62.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertNotNull(objNodeList64);
        org.junit.Assert.assertNotNull(objNodeList73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(objNode83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "Node(1.0)" + "'", str87.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Node(Node(1.0))" + "'", str89.equals("Node(Node(1.0))"));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl62.copy();
        java.lang.Object obj77 = objNodeImpl76.getContent();
        java.lang.Object obj78 = objNodeImpl76.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "hi!" + "'", obj77.equals("hi!"));
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "hi!" + "'", obj78.equals("hi!"));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        java.lang.Object obj16 = objNodeImpl3.getContent();
        boolean boolean17 = objNodeImpl3.isRoot();
        java.lang.Object obj18 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        boolean boolean26 = objNodeImpl20.isLeaf();
        objNodeImpl20.setContent((java.lang.Object) (-1));
        java.lang.Object obj29 = objNodeImpl20.getName();
        boolean boolean30 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl20.copy();
        java.lang.String str32 = objNodeImpl20.toString();
        boolean boolean33 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl37.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl37.copy();
        java.lang.Class<?> wildcardClass45 = objNodeImpl37.getClass();
        java.lang.Class<?> wildcardClass46 = objNodeImpl37.getClass();
        boolean boolean47 = objNodeImpl37.isLeaf();
        objNodeImpl37.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl37.copy();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl53.getParent();
        boolean boolean57 = objNodeImpl53.isLeaf();
        objNodeImpl37.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl53);
        java.lang.String str61 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "Node(100)" + "'", obj18.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(-1)" + "'", str32.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(Node(1.0))" + "'", str61.equals("Node(Node(1.0))"));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl24.getParent();
        boolean boolean26 = objNodeImpl24.isLeaf();
        boolean boolean27 = objNodeImpl24.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Class<?> wildcardClass36 = objNodeImpl31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj44 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setDepth((int) (short) 1);
        boolean boolean59 = objNodeImpl54.isRoot();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean61 = objNodeImpl54.isRoot();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl24.setDepth((int) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList72 = objNodeImpl66.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = objNodeImpl66.copy();
        java.lang.Class<?> wildcardClass74 = objNodeImpl66.getClass();
        boolean boolean75 = objNodeImpl66.isLeaf();
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        java.lang.Class<?> wildcardClass77 = objNodeImpl66.getClass();
        objNodeImpl66.setName("Node(Node(100))");
        objNodeImpl11.setContent((java.lang.Object) "Node(Node(100))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeList72);
        org.junit.Assert.assertNotNull(objNodeImpl73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        objNodeImpl3.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.String str19 = objNodeImpl18.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Node(Node(1.0))" + "'", str19.equals("Node(Node(1.0))"));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        java.lang.Object obj28 = new java.lang.Object();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        java.lang.Class<?> wildcardClass30 = obj28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.String str57 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.lang.String str65 = objNodeImpl61.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl61.getParent();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl61.setDepth((int) (short) 1);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Class<?> wildcardClass72 = objNodeImpl31.getClass();
        java.lang.Class<?> wildcardClass73 = objNodeImpl31.getClass();
        boolean boolean74 = objNodeImpl31.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode66);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setName("Node(100)");
        boolean boolean13 = objNodeImpl3.isRoot();
        objNodeImpl3.setDepth((-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        java.lang.reflect.Type type0 = null;
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>(type0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        try {
            java.lang.String str10 = objNodeImpl3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl24.getParent();
        objNodeImpl24.setName("Node()");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        objNodeImpl31.setName("");
        objNodeImpl24.setContent((java.lang.Object) "");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNull(objNode35);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setDepth((int) (short) 1);
        boolean boolean57 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj64 = objNodeImpl61.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl61.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode66 = objNodeImpl61.getParent();
        try {
            objNodeImpl32.addChild(objNode66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertNull(objNode66);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Object obj10 = objNodeImpl1.getContent();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + (byte) 100 + "'", obj10.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.String str16 = objNodeImpl12.toString();
        java.lang.Object obj17 = objNodeImpl12.getContent();
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str44 = objNodeImpl29.toString();
        objNodeImpl29.setName("Node(#)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj51 = objNodeImpl50.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl50);
        java.lang.String str53 = objNodeImpl50.toString();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        java.lang.String str59 = objNodeImpl56.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str67 = objNodeImpl63.toString();
        java.lang.Object obj68 = objNodeImpl63.getContent();
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        boolean boolean80 = objNodeImpl74.isLeaf();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode82 = objNodeImpl63.getParent();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl63);
        objNodeImpl63.setName("Node(Node(100))");
        boolean boolean86 = objNodeImpl63.isRoot();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + 1.0f + "'", obj17.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "Node(1.0)" + "'", str44.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(100)" + "'", str53.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "Node(1.0)" + "'", str59.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + 1.0f + "'", obj68.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(objNode82);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node(100)");
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl15.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj22 = objNodeImpl19.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList16);
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl4 = objNodeImpl3.copy();
        boolean boolean5 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl3);
        org.junit.Assert.assertNotNull(objNodeImpl4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.String str48 = objNodeImpl47.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        java.lang.Class<?> wildcardClass80 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj83 = objNodeImpl82.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl82);
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl82.setContent((java.lang.Object) 0.0f);
        java.lang.String str89 = objNodeImpl82.toString();
        boolean boolean90 = objNodeImpl82.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(Node(1.0))" + "'", str48.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(100)" + "'", obj83.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str89 + "' != '" + "Node(0.0)" + "'", str89.equals("Node(0.0)"));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        boolean boolean81 = objNodeImpl11.isRoot();
        objNodeImpl11.setName("");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList84 = objNodeImpl11.getChildren();
        java.lang.Class<?> wildcardClass85 = objNodeList84.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(objNodeList84);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.Object obj37 = objNodeImpl11.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl11.getParent();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "" + "'", obj37.equals(""));
        org.junit.Assert.assertNotNull(objNode38);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Object obj9 = objNodeImpl8.getContent();
        java.lang.Object obj10 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeList18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode21 = objNodeImpl20.getParent();
        objNodeImpl8.setParent(objNode21);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + (byte) 100 + "'", obj9.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNull(objNode21);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList17 = objNodeImpl10.getChildren();
        java.lang.String str18 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl22.getParent();
        java.lang.Object obj27 = null;
        objNodeImpl22.setContent(obj27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl43.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl43.getParent();
        objNodeImpl30.setContent((java.lang.Object) objNodeImpl43);
        java.lang.Class<?> wildcardClass48 = objNodeImpl30.getClass();
        java.lang.Object obj49 = objNodeImpl30.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl51.isLeaf();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl51.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(0)" + "'", str18.equals("Node(0)"));
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objNodeList60);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl62.copy();
        java.lang.Object obj77 = objNodeImpl76.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl81.setContent((java.lang.Object) 1.0f);
        objNodeImpl79.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        boolean boolean85 = objNodeImpl79.isLeaf();
        objNodeImpl79.setContent((java.lang.Object) (-1));
        java.lang.Object obj88 = objNodeImpl79.getName();
        boolean boolean89 = objNodeImpl79.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = objNodeImpl79.copy();
        objNodeImpl76.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "hi!" + "'", obj77.equals("hi!"));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + obj88 + "' != '" + "Node(100)" + "'", obj88.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objNodeImpl90);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        objNodeImpl3.setDepth((int) (byte) 0);
        boolean boolean18 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl33.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl33);
        java.lang.Object obj45 = objNodeImpl33.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertNotNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        java.lang.String str23 = objNodeImpl9.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl9.getChildren();
        boolean boolean25 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>> objNodeImplNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>>(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(100)" + "'", str23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl29.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl40.copy();
        objNodeImpl47.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl47.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl54.getParent();
        java.lang.Class<?> wildcardClass59 = objNodeImpl54.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj64 = objNodeImpl61.getName();
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl68.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl68.copy();
        objNodeImpl75.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl75.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode86 = objNodeImpl82.getParent();
        java.lang.Class<?> wildcardClass87 = objNodeImpl82.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj92 = objNodeImpl89.getName();
        objNodeImpl82.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl89);
        objNodeImpl75.setContent((java.lang.Object) objNodeImpl82);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl75);
        objNodeImpl29.setContent((java.lang.Object) objNodeImpl75);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode97 = objNodeImpl75.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeImpl75);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertNull(objNode86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + obj92 + "' != '" + "Node(100)" + "'", obj92.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode97);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        boolean boolean15 = objNodeImpl3.isRoot();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        boolean boolean9 = objNodeImpl1.isRoot();
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        boolean boolean4 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl3.copy();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objNodeImpl5);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        java.lang.String str31 = objNodeImpl11.toString();
        objNodeImpl11.setName("Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean41 = objNodeImpl37.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl37.copy();
        objNodeImpl37.setDepth((int) '#');
        boolean boolean45 = objNodeImpl37.isRoot();
        boolean boolean46 = objNodeImpl37.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl50.getParent();
        java.lang.Object obj55 = null;
        objNodeImpl50.setContent(obj55);
        boolean boolean57 = objNodeImpl50.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList58 = objNodeImpl50.getChildren();
        objNodeImpl37.setContent((java.lang.Object) objNodeImpl50);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = null;
        try {
            objNodeImpl37.addChild(objNode61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node())" + "'", str31.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(objNodeList58);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setDepth((int) (short) -1);
        objNodeImpl8.setName("Node(#)");
        java.lang.String str35 = objNodeImpl8.toString();
        objNodeImpl8.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(Node(1.0))" + "'", str35.equals("Node(Node(1.0))"));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.String> strNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.String>("Node()");
        java.lang.Class<?> wildcardClass2 = strNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl36.getChildren();
        objNodeImpl36.setName("Node(100)");
        objNodeImpl36.setName("Node()");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        java.lang.Object obj50 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList58 = objNodeImpl52.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = objNodeImpl52.copy();
        java.lang.Class<?> wildcardClass60 = objNodeImpl52.getClass();
        boolean boolean61 = objNodeImpl52.isLeaf();
        java.lang.Object obj62 = objNodeImpl52.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList63 = objNodeImpl52.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList64 = objNodeImpl52.getChildren();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl1.setDepth((int) (byte) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (byte) 100 + "'", obj50.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList58);
        org.junit.Assert.assertNotNull(objNodeImpl59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + (byte) 100 + "'", obj62.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList63);
        org.junit.Assert.assertNotNull(objNodeList64);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl11.getChildren();
        java.lang.Object obj31 = objNodeImpl11.getName();
        java.lang.String str32 = objNodeImpl11.toString();
        boolean boolean33 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl11.getParent();
        objNodeImpl11.setDepth((int) (short) 10);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(Node())" + "'", str32.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objNode34);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.lang.Object obj15 = objNodeImpl3.getContent();
        java.lang.Object obj16 = objNodeImpl3.getName();
        java.lang.Object obj17 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl26.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl26.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        java.lang.Class<?> wildcardClass38 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl26.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Object obj46 = objNodeImpl26.getContent();
        objNodeImpl26.setName("Node(100)");
        java.lang.String str49 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        objNodeImpl58.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl58.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl58.setContent((java.lang.Object) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl58.copy();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl3.setDepth((int) (short) 100);
        boolean boolean83 = objNodeImpl3.isLeaf();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(1.0)" + "'", obj17.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(Node(1.0))" + "'", str49.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl22.setDepth(1);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.Object obj40 = objNodeImpl22.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl22.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList41);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList41);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl41.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNode51);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode6 = objNodeImpl1.getParent();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertNull(objNode6);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        objNodeImpl38.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Class<?> wildcardClass50 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj58 = objNodeImpl38.getContent();
        objNodeImpl38.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl38.getChildren();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str64 = objNodeImpl38.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl38.getChildren();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNull(objNode41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(Node(1.0))" + "'", str64.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList65);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Object obj8 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl1.getChildren();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "Node(100)" + "'", obj8.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setDepth((int) (short) 1);
        objNodeImpl19.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl7.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl7.setDepth((int) (short) 10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        objNodeImpl57.setDepth((int) '#');
        java.lang.Object obj65 = objNodeImpl57.getName();
        boolean boolean66 = objNodeImpl57.isRoot();
        objNodeImpl46.setContent((java.lang.Object) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList68 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = objNodeImpl46.copy();
        boolean boolean70 = objNodeImpl46.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode71 = objNodeImpl46.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objNodeList68);
        org.junit.Assert.assertNotNull(objNodeImpl69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(objNode71);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl52.copy();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        boolean boolean58 = objNodeImpl41.isLeaf();
        objNodeImpl41.setName("Node(Node(#))");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj11 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl8.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean15 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(100)" + "'", obj11.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.String str13 = objNodeImpl1.toString();
        java.lang.Class<?> wildcardClass14 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl1.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = null;
        try {
            objNodeImpl15.addChild(objNode16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(-1)" + "'", str13.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        objNodeImpl25.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.String str50 = objNodeImpl46.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl46.getParent();
        java.lang.Object obj52 = objNodeImpl46.getName();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        boolean boolean61 = objNodeImpl57.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl57.copy();
        boolean boolean63 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setDepth((int) (short) 1);
        objNodeImpl65.setName("hi!");
        objNodeImpl62.setContent((java.lang.Object) "hi!");
        boolean boolean73 = objNodeImpl62.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl62.getChildren();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl79.setContent((java.lang.Object) 1.0f);
        objNodeImpl77.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        boolean boolean83 = objNodeImpl79.isLeaf();
        boolean boolean84 = objNodeImpl79.isRoot();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = objNodeImpl25.copy();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objNodeImpl86);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        boolean boolean12 = objNodeImpl11.isLeaf();
        java.lang.String str13 = objNodeImpl11.toString();
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(Node(1.0))" + "'", str13.equals("Node(Node(1.0))"));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl10.getChildren();
        java.lang.String str37 = objNodeImpl10.toString();
        boolean boolean38 = objNodeImpl10.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(0)" + "'", str37.equals("Node(0)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.Object obj22 = objNodeImpl13.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(100)" + "'", obj22.equals("Node(100)"));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        objNodeImpl1.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        java.lang.String str12 = objNodeImpl1.toString();
        boolean boolean13 = objNodeImpl1.isRoot();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(100)" + "'", str12.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl6);
        boolean boolean8 = objNodeImpl7.isLeaf();
        objNodeImpl7.setDepth((int) 'a');
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.lang.String str9 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl5.getParent();
        boolean boolean11 = objNodeImpl5.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.String str14 = objNodeImpl1.toString();
        java.lang.String str15 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1)" + "'", str14.equals("Node(1)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1)" + "'", str15.equals("Node(1)"));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl1.getChildren();
        boolean boolean35 = objNodeImpl1.isRoot();
        java.lang.Object obj36 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl45.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl45.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.String str57 = objNodeImpl54.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.lang.String str65 = objNodeImpl61.toString();
        java.lang.Object obj66 = objNodeImpl61.getContent();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.String str69 = objNodeImpl54.toString();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj76 = objNodeImpl73.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = objNodeImpl73.copy();
        objNodeImpl73.setName("Node(1.0)");
        objNodeImpl71.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.lang.Object obj81 = objNodeImpl73.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = objNodeImpl73.copy();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        boolean boolean84 = objNodeImpl82.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "Node(1.0)" + "'", str65.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + 1.0f + "'", obj66.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl71);
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + "Node(100)" + "'", obj76.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl77);
        org.junit.Assert.assertTrue("'" + obj81 + "' != '" + "Node(1.0)" + "'", obj81.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Object obj44 = null;
        objNodeImpl39.setContent(obj44);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList59 = objNodeImpl53.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl53.copy();
        objNodeImpl60.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl60.getParent();
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl60);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.String str66 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl10.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList59);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode67);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode5 = objNodeImpl1.getParent();
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        objNodeImpl8.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        java.lang.String str21 = objNodeImpl18.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setName("Node()");
        java.lang.Object obj26 = objNodeImpl8.getName();
        java.lang.String str27 = objNodeImpl8.toString();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(objNode5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node()" + "'", obj26.equals("Node()"));
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Object obj6 = objNodeImpl1.getContent();
        java.lang.Object obj7 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl16.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl23.getParent();
        java.lang.Class<?> wildcardClass28 = objNodeImpl23.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl16.setContent((java.lang.Object) objNodeImpl23);
        java.lang.Object obj36 = objNodeImpl16.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setDepth((int) (short) 1);
        boolean boolean51 = objNodeImpl46.isRoot();
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        boolean boolean53 = objNodeImpl46.isRoot();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl16.copy();
        java.lang.String str56 = objNodeImpl55.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Class<?> wildcardClass65 = objNodeImpl60.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl55);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl1.copy();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + 1.0f + "'", obj6.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj7 + "' != '" + "Node(100)" + "'", obj7.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(Node(1.0))" + "'", str56.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl75);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl11.copy();
        java.lang.Object obj13 = objNodeImpl12.getName();
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(Node(1.0))" + "'", obj13.equals("Node(Node(1.0))"));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl29.getParent();
        java.lang.Object obj37 = null;
        objNodeImpl29.setContent(obj37);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl29.getChildren();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNode36);
        org.junit.Assert.assertNotNull(objNodeList39);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl24.getParent();
        boolean boolean26 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj29 = objNodeImpl28.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl28);
        objNodeImpl28.setName("Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setDepth((int) (short) 1);
        objNodeImpl34.setContent((java.lang.Object) objNodeImpl36);
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl36);
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        objNodeImpl3.setDepth((int) '#');
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl3.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode19);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.String str38 = objNodeImpl10.toString();
        java.lang.Object obj39 = null;
        objNodeImpl10.setContent(obj39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl42.copy();
        objNodeImpl49.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl49.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl56.getParent();
        java.lang.Class<?> wildcardClass61 = objNodeImpl56.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj66 = objNodeImpl63.getName();
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl49.setContent((java.lang.Object) objNodeImpl56);
        java.lang.Object obj69 = objNodeImpl49.getContent();
        objNodeImpl49.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl49.getParent();
        objNodeImpl49.setDepth((int) '#');
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl49.setDepth((int) (byte) 0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(0)" + "'", str38.equals("Node(0)"));
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertNull(objNode72);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        java.lang.String str17 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        java.lang.Object obj26 = objNodeImpl21.getContent();
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl5.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.lang.String str29 = objNodeImpl14.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl33.getParent();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl33.setDepth((int) (short) 1);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.Class<?> wildcardClass59 = objNodeImpl47.getClass();
        java.lang.Object obj60 = objNodeImpl47.getName();
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl33.getChildren();
        objNodeImpl33.setDepth(0);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + 1.0f + "'", obj26.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList62);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        boolean boolean31 = objNodeImpl30.isLeaf();
        java.lang.Object obj32 = objNodeImpl30.getName();
        java.lang.String str33 = objNodeImpl30.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + obj32 + "' != '" + "Node(Node(Node()))" + "'", obj32.equals("Node(Node(Node()))"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(Node(Node()))" + "'", str33.equals("Node(Node(Node()))"));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) 'a');
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Object obj77 = objNodeImpl17.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + "Node(100)" + "'", obj77.equals("Node(100)"));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Class<?> wildcardClass48 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration> genericDeclarationNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.GenericDeclaration>((java.lang.reflect.GenericDeclaration) wildcardClass48);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList25);
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList25);
        org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeListNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>>>(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        objNodeImpl35.setDepth((int) (short) 1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl35.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNull(objNode42);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        objNodeImpl12.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl12.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Class<?> wildcardClass24 = objNodeImpl19.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj29 = objNodeImpl26.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl12.setContent((java.lang.Object) objNodeImpl19);
        java.lang.Object obj32 = objNodeImpl12.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl34.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl34.copy();
        objNodeImpl41.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl48.getParent();
        java.lang.Class<?> wildcardClass53 = objNodeImpl48.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj58 = objNodeImpl55.getName();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        objNodeImpl41.setContent((java.lang.Object) objNodeImpl48);
        java.lang.Object obj61 = objNodeImpl41.getContent();
        objNodeImpl41.setName("Node(100)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.Class<?> wildcardClass66 = objNodeImpl1.getClass();
        objNodeImpl1.setDepth((int) '4');
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNull(objNode15);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(100)" + "'", obj58.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        objNodeImpl8.setDepth((-1));
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        boolean boolean20 = objNodeImpl8.isRoot();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        boolean boolean28 = objNodeImpl10.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setContent((java.lang.Object) '#');
        objNodeImpl1.setName("");
        objNodeImpl1.setDepth((int) (short) 10);
        boolean boolean14 = objNodeImpl1.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setDepth((int) (short) 1);
        objNodeImpl19.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl7.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl7.setDepth((int) 'a');
        objNodeImpl7.setDepth((int) '4');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        boolean boolean39 = objNodeImpl35.isLeaf();
        boolean boolean40 = objNodeImpl35.isRoot();
        objNodeImpl35.setName("Node([])");
        objNodeImpl35.setDepth((int) (short) 100);
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl15.copy();
        java.lang.Object obj17 = objNodeImpl15.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(Node(1.0))" + "'", obj17.equals("Node(Node(1.0))"));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        boolean boolean84 = objNodeImpl30.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl85 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) boolean84);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        objNodeImpl3.setName("Node(100)");
        boolean boolean13 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl21.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList75 = objNodeImpl21.getChildren();
        objNodeImpl21.setDepth((int) 'a');
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeList75);
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl5.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl5.copy();
        objNodeImpl12.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode15 = objNodeImpl12.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Class<?> wildcardClass24 = objNodeImpl19.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj29 = objNodeImpl26.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl12.setContent((java.lang.Object) objNodeImpl19);
        java.lang.Object obj32 = objNodeImpl12.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl34.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl34.copy();
        objNodeImpl41.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = objNodeImpl48.getParent();
        java.lang.Class<?> wildcardClass53 = objNodeImpl48.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj58 = objNodeImpl55.getName();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        objNodeImpl41.setContent((java.lang.Object) objNodeImpl48);
        java.lang.Object obj61 = objNodeImpl41.getContent();
        objNodeImpl41.setName("Node(100)");
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        java.lang.String str66 = objNodeImpl12.toString();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertNull(objNode15);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNull(objNode52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(100)" + "'", obj58.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(Node(1.0))" + "'", str66.equals("Node(Node(1.0))"));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        java.lang.Object obj13 = objNodeImpl1.getContent();
        objNodeImpl1.setDepth((int) (short) 1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + (byte) 100 + "'", obj13.equals((byte) 100));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setDepth((int) (short) 1);
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl13.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Class<?> wildcardClass50 = objNodeImpl32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl32);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl13);
        java.lang.Object obj54 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        boolean boolean63 = objNodeImpl57.isLeaf();
        objNodeImpl57.setContent((java.lang.Object) (-1));
        java.lang.Object obj66 = objNodeImpl57.getName();
        boolean boolean67 = objNodeImpl57.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = objNodeImpl57.copy();
        java.lang.String str69 = objNodeImpl57.toString();
        boolean boolean70 = objNodeImpl57.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl76.setContent((java.lang.Object) 1.0f);
        objNodeImpl74.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl74.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl74.copy();
        java.lang.Class<?> wildcardClass82 = objNodeImpl74.getClass();
        java.lang.Class<?> wildcardClass83 = objNodeImpl74.getClass();
        boolean boolean84 = objNodeImpl74.isLeaf();
        objNodeImpl74.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = objNodeImpl74.copy();
        objNodeImpl72.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl90.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode93 = objNodeImpl90.getParent();
        boolean boolean94 = objNodeImpl90.isLeaf();
        objNodeImpl74.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl90);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl90);
        java.lang.String str97 = objNodeImpl57.toString();
        objNodeImpl3.setContent((java.lang.Object) str97);
        java.lang.Class<?> wildcardClass99 = objNodeImpl3.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNull(objNode55);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objNodeImpl68);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(-1)" + "'", str69.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(objNodeImpl81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(objNodeImpl87);
        org.junit.Assert.assertNull(objNode93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + str97 + "' != '" + "Node(Node(1.0))" + "'", str97.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl1.setDepth((int) (short) 10);
        boolean boolean15 = objNodeImpl1.isRoot();
        java.lang.String str16 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(-1)" + "'", str16.equals("Node(-1)"));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        boolean boolean47 = objNodeImpl44.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl49.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl49.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.String str61 = objNodeImpl58.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str69 = objNodeImpl65.toString();
        java.lang.Object obj70 = objNodeImpl65.getContent();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.String str73 = objNodeImpl58.toString();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj77 = objNodeImpl44.getContent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode79 = objNodeImpl23.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode80 = objNodeImpl23.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList55);
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(1.0)" + "'", str61.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 1.0f + "'", obj70.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Node(1.0)" + "'", str73.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode79);
        org.junit.Assert.assertNotNull(objNode80);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl8.setContent((java.lang.Object) 'a');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean58 = objNodeImpl52.isLeaf();
        objNodeImpl52.setContent((java.lang.Object) (-1));
        java.lang.Object obj61 = objNodeImpl52.getName();
        boolean boolean62 = objNodeImpl52.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl52.copy();
        java.lang.String str64 = objNodeImpl52.toString();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setDepth((int) (short) 1);
        objNodeImpl67.setContent((java.lang.Object) objNodeImpl69);
        objNodeImpl67.setDepth((int) (byte) 0);
        objNodeImpl67.setDepth((int) (short) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList88 = objNodeImpl82.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = objNodeImpl82.copy();
        java.lang.Class<?> wildcardClass90 = objNodeImpl82.getClass();
        java.lang.Class<?> wildcardClass91 = objNodeImpl82.getClass();
        boolean boolean92 = objNodeImpl82.isLeaf();
        objNodeImpl82.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl95 = objNodeImpl82.copy();
        objNodeImpl80.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl97 = objNodeImpl80.copy();
        objNodeImpl67.setContent((java.lang.Object) objNodeImpl80);
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + obj61 + "' != '" + "Node(100)" + "'", obj61.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(-1)" + "'", str64.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(objNodeList88);
        org.junit.Assert.assertNotNull(objNodeImpl89);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(objNodeImpl95);
        org.junit.Assert.assertNotNull(objNodeImpl97);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        boolean boolean17 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        boolean boolean32 = objNodeImpl27.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean34 = objNodeImpl27.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str43 = objNodeImpl39.toString();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        objNodeImpl39.setDepth((int) (byte) 100);
        boolean boolean47 = objNodeImpl39.isRoot();
        boolean boolean48 = objNodeImpl39.isLeaf();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl39.getChildren();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.Object obj51 = objNodeImpl39.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        objNodeImpl21.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl21.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl28.getParent();
        java.lang.Class<?> wildcardClass33 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl21.setContent((java.lang.Object) objNodeImpl28);
        java.lang.Object obj41 = objNodeImpl21.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl43.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setDepth((int) (short) 1);
        boolean boolean56 = objNodeImpl51.isRoot();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        boolean boolean58 = objNodeImpl51.isRoot();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl21.copy();
        java.lang.String str61 = objNodeImpl60.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl81.setContent((java.lang.Object) 1.0f);
        objNodeImpl79.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode85 = objNodeImpl81.getParent();
        java.lang.Class<?> wildcardClass86 = objNodeImpl81.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl88.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj91 = objNodeImpl88.getName();
        objNodeImpl81.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl88);
        objNodeImpl81.setName("");
        objNodeImpl60.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        java.lang.Class<?> wildcardClass97 = objNodeImpl3.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(Node(1.0))" + "'", str61.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + "Node(100)" + "'", obj91.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl1.setName("Node(1.0)");
        java.lang.Object obj39 = objNodeImpl1.getName();
        objNodeImpl1.setDepth((int) (byte) 0);
        java.lang.Object obj42 = objNodeImpl1.getContent();
        java.lang.String str43 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(1.0)" + "'", obj39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.lang.Object obj8 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        objNodeImpl1.setDepth((int) '#');
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + obj8 + "' != '" + "Node(100)" + "'", obj8.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean38 = objNodeImpl10.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl10.getParent();
        java.lang.String str40 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objNode39);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl28.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl86 = objNodeImpl28.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl90 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl90.setContent((java.lang.Object) 1.0f);
        objNodeImpl88.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl90);
        boolean boolean94 = objNodeImpl88.isLeaf();
        java.lang.Class<?> wildcardClass95 = objNodeImpl88.getClass();
        java.lang.String str96 = objNodeImpl88.toString();
        java.lang.Object obj97 = objNodeImpl88.getContent();
        boolean boolean98 = objNodeImpl88.isLeaf();
        objNodeImpl86.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl88);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(objNodeImpl86);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + str96 + "' != '" + "Node(100)" + "'", str96.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj97 + "' != '" + (byte) 100 + "'", obj97.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        java.lang.String str16 = objNodeImpl9.toString();
        objNodeImpl9.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl9);
        boolean boolean20 = objNodeImpl9.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(1.0)" + "'", str16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        java.lang.String str13 = objNodeImpl3.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl3.getChildren();
        java.lang.String str15 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        objNodeImpl1.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        java.lang.Class<?> wildcardClass22 = objNodeImpl14.getClass();
        java.lang.Class<?> wildcardClass23 = objNodeImpl14.getClass();
        boolean boolean24 = objNodeImpl14.isLeaf();
        objNodeImpl14.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl14.copy();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(objNodeImpl27);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setDepth((int) (byte) -1);
        objNodeImpl1.setDepth(1);
        java.lang.Object obj12 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (byte) 100 + "'", obj12.equals((byte) 100));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean47 = objNodeImpl8.isLeaf();
        boolean boolean48 = objNodeImpl8.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        java.lang.Object obj10 = objNodeImpl8.getContent();
        java.lang.String str11 = objNodeImpl8.toString();
        java.lang.Object obj12 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(1.0)" + "'", str11.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + 1.0f + "'", obj12.equals(1.0f));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        boolean boolean37 = objNodeImpl36.isLeaf();
        boolean boolean38 = objNodeImpl36.isRoot();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl36);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.String str45 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        objNodeImpl47.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str53 = objNodeImpl49.toString();
        java.lang.Object obj54 = objNodeImpl49.getContent();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        objNodeImpl60.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        boolean boolean66 = objNodeImpl60.isLeaf();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList68 = objNodeImpl49.getChildren();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        java.lang.String str70 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(objNode40);
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "Node(1.0)" + "'", str53.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + 1.0f + "'", obj54.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(objNodeList68);
        org.junit.Assert.assertTrue("'" + str70 + "' != '" + "Node(Node(100))" + "'", str70.equals("Node(Node(100))"));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setName("Node(Node(1))");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl3.setDepth((int) (byte) 100);
        boolean boolean18 = objNodeImpl3.isLeaf();
        boolean boolean19 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        boolean boolean27 = objNodeImpl23.isLeaf();
        java.lang.Object obj28 = objNodeImpl23.getContent();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.lang.Class<?> wildcardClass30 = objNodeImpl3.getClass();
        java.lang.Object obj31 = objNodeImpl3.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0f + "'", obj28.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList11 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setDepth((int) (short) 1);
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl13.setName("Node(1.0)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        objNodeImpl45.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Class<?> wildcardClass50 = objNodeImpl32.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl32);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl13);
        java.lang.Object obj54 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList91 = objNodeImpl84.getChildren();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.Object obj93 = objNodeImpl84.getContent();
        java.lang.Object obj94 = objNodeImpl84.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertNotNull(objNodeList91);
        org.junit.Assert.assertTrue("'" + obj93 + "' != '" + 1.0f + "'", obj93.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj94 + "' != '" + 1.0f + "'", obj94.equals(1.0f));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl1.copy();
        objNodeImpl15.setName("Node(0.0)");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl15);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl32.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl32.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl68);
        java.lang.Object obj81 = objNodeImpl61.getContent();
        objNodeImpl61.setName("Node(100)");
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList86 = objNodeImpl32.getChildren();
        java.lang.Class<?> wildcardClass87 = objNodeList86.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(objNodeList86);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl21.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList75 = objNodeImpl21.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl21.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeList75);
        org.junit.Assert.assertNotNull(objNodeList76);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str37 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl41.getParent();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl41.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl41.isRoot();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList52);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(objNodeList52);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        java.lang.Class<?> wildcardClass25 = objNodeImpl17.getClass();
        java.lang.Class<?> wildcardClass26 = objNodeImpl17.getClass();
        boolean boolean27 = objNodeImpl17.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        boolean boolean35 = objNodeImpl31.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl31.copy();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl11.getParent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNode39);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        objNodeImpl1.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setDepth((int) 'a');
        java.lang.Class<?> wildcardClass23 = objNodeImpl20.getClass();
        java.lang.String str24 = objNodeImpl20.toString();
        boolean boolean25 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl34.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl34.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        java.lang.String str46 = objNodeImpl43.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.String str54 = objNodeImpl50.toString();
        java.lang.Object obj55 = objNodeImpl50.getContent();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.lang.String str58 = objNodeImpl43.toString();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl43.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl62.copy();
        objNodeImpl62.setName("Node(1.0)");
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList70 = objNodeImpl62.getChildren();
        objNodeImpl62.setName("Node(100)");
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl20);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "Node(100)" + "'", str24.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(1.0)" + "'", str46.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(1.0)" + "'", str54.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + 1.0f + "'", obj55.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Node(1.0)" + "'", str58.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertNotNull(objNodeList70);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        boolean boolean32 = objNodeImpl28.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl28.copy();
        objNodeImpl28.setDepth((int) '#');
        boolean boolean36 = objNodeImpl28.isRoot();
        boolean boolean37 = objNodeImpl28.isLeaf();
        objNodeImpl28.setName("Node(-1)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList41);
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objNodeList41);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl3.setName("");
        java.lang.String str17 = objNodeImpl3.toString();
        java.lang.Object obj18 = objNodeImpl3.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + "" + "'", obj18.equals(""));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        objNodeImpl5.setName("Node(100)");
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl5.getParent();
        java.lang.Object obj10 = objNodeImpl5.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl5.getParent();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNull(objNode11);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl3.setName("");
        objNodeImpl3.setName("hi!");
        boolean boolean19 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        objNodeImpl5.setName("Node(100)");
        java.lang.String str8 = objNodeImpl5.toString();
        objNodeImpl5.setDepth(0);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl43);
        boolean boolean46 = objNodeImpl45.isRoot();
        java.lang.String str47 = objNodeImpl45.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl45.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(Node(Node(Node())))" + "'", str47.equals("Node(Node(Node(Node())))"));
        org.junit.Assert.assertNull(objNode48);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        boolean boolean7 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass9);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        objNodeImpl32.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl39.getParent();
        java.lang.Class<?> wildcardClass44 = objNodeImpl39.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj49 = objNodeImpl46.getName();
        objNodeImpl39.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl39);
        java.lang.Object obj52 = objNodeImpl32.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl68.getParent();
        java.lang.Class<?> wildcardClass73 = objNodeImpl68.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj78 = objNodeImpl75.getName();
        objNodeImpl68.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl61.setContent((java.lang.Object) objNodeImpl68);
        java.lang.Object obj81 = objNodeImpl61.getContent();
        objNodeImpl61.setName("Node(100)");
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList86 = objNodeImpl32.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList87 = objNodeImpl32.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + "Node(100)" + "'", obj49.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNull(objNode72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertTrue("'" + obj78 + "' != '" + "Node(100)" + "'", obj78.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj81);
        org.junit.Assert.assertNotNull(objNodeList86);
        org.junit.Assert.assertNotNull(objNodeList87);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        java.lang.Object obj9 = objNodeImpl3.getName();
        boolean boolean10 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("Node(class java.lang.Object)");
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + "Node(100)" + "'", obj9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl41.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl41.copy();
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj48 = objNodeImpl1.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl1.getParent();
        java.lang.Object obj50 = objNodeImpl1.getContent();
        boolean boolean51 = objNodeImpl1.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (byte) 100 + "'", obj48.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + (byte) 100 + "'", obj50.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        java.lang.Class<?> wildcardClass7 = objNodeImpl6.getClass();
        objNodeImpl6.setName("Node(0)");
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl29);
        boolean boolean39 = objNodeImpl29.isRoot();
        java.lang.String str40 = objNodeImpl29.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        boolean boolean14 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass24 = objNodeImpl16.getClass();
        java.lang.Object obj25 = objNodeImpl16.getContent();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        objNodeImpl6.setContent((java.lang.Object) objNodeImpl8);
        java.lang.Object obj28 = objNodeImpl6.getContent();
        java.lang.Class<?> wildcardClass29 = obj28.getClass();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + (byte) 100 + "'", obj25.equals((byte) 100));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        java.lang.Object obj13 = null;
        objNodeImpl8.setContent(obj13);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl8.getParent();
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        java.lang.Class<?> wildcardClass19 = obj17.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        boolean boolean28 = objNodeImpl24.isLeaf();
        boolean boolean29 = objNodeImpl24.isRoot();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl47.getParent();
        java.lang.Class<?> wildcardClass52 = objNodeImpl47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj57 = objNodeImpl54.getName();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl47);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl40.copy();
        java.lang.Object obj61 = objNodeImpl60.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj66 = objNodeImpl63.getName();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl63.getParent();
        objNodeImpl60.setContent((java.lang.Object) objNode67);
        objNodeImpl20.setContent((java.lang.Object) objNode67);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + "Node(100)" + "'", obj57.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(100)" + "'", obj66.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode67);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        boolean boolean9 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = null;
        objNodeImpl10.setParent(objNode11);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeImpl10);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        boolean boolean24 = objNodeImpl18.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        java.lang.Class<?> wildcardClass34 = objNodeImpl26.getClass();
        java.lang.Object obj35 = objNodeImpl26.getContent();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl26.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl26.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl26.getChildren();
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl7);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setDepth((int) (short) 1);
        objNodeImpl44.setContent((java.lang.Object) objNodeImpl46);
        objNodeImpl44.setDepth((int) (byte) 0);
        objNodeImpl7.setContent((java.lang.Object) (byte) 0);
        objNodeImpl7.setName("Node(Node(1.0))");
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + (byte) 100 + "'", obj35.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeList40);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl11.getChildren();
        java.lang.Object obj31 = objNodeImpl11.getName();
        java.lang.String str32 = objNodeImpl11.toString();
        objNodeImpl11.setDepth((int) (short) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl38.getParent();
        java.lang.Class<?> wildcardClass43 = objNodeImpl38.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj48 = objNodeImpl45.getName();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        objNodeImpl45.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass52 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode53 = objNodeImpl45.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNode53);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(Node())" + "'", str32.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNode53);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass19 = objNodeImpl8.getClass();
        java.lang.Object obj20 = null;
        objNodeImpl8.setContent(obj20);
        objNodeImpl8.setName("Node(-1)");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        java.lang.Object obj14 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList39 = objNodeImpl33.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl33.copy();
        objNodeImpl40.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl40);
        objNodeImpl27.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl48.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = objNodeImpl48.copy();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList54 = objNodeImpl48.getChildren();
        objNodeImpl1.setContent((java.lang.Object) objNodeList54);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + (byte) 100 + "'", obj14.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList39);
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNotNull(objNodeImpl52);
        org.junit.Assert.assertNotNull(objNodeList54);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        boolean boolean18 = objNodeImpl9.isLeaf();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl21.copy();
        objNodeImpl28.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl28.setContent((java.lang.Object) objNodeImpl35);
        java.lang.Object obj48 = objNodeImpl28.getContent();
        objNodeImpl28.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl28.getChildren();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.lang.Class<?> wildcardClass53 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass53);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl28.getParent();
        java.lang.Class<?> wildcardClass33 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.Class<?> wildcardClass40 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj43 = objNodeImpl42.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl42);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl28.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = objNodeImpl55.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        java.lang.String str75 = objNodeImpl71.toString();
        java.lang.Object obj76 = objNodeImpl71.getContent();
        objNodeImpl64.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        java.lang.String str79 = objNodeImpl64.toString();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl64.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl83.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj86 = objNodeImpl83.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl87 = objNodeImpl83.copy();
        objNodeImpl83.setName("Node(1.0)");
        objNodeImpl81.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        java.lang.Object obj91 = objNodeImpl83.getName();
        objNodeImpl83.setName("Node(class java.lang.Object)");
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode95 = objNodeImpl83.getParent();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        java.lang.Object obj97 = objNodeImpl83.getContent();
        objNodeImpl83.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(objNodeImpl62);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str75 + "' != '" + "Node(1.0)" + "'", str75.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 1.0f + "'", obj76.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str79 + "' != '" + "Node(1.0)" + "'", str79.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl81);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "Node(100)" + "'", obj86.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl87);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + "Node(1.0)" + "'", obj91.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode95);
        org.junit.Assert.assertTrue("'" + obj97 + "' != '" + 1.0f + "'", obj97.equals(1.0f));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        objNodeImpl21.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.Object obj47 = new java.lang.Object();
        java.lang.Class<?> wildcardClass48 = obj47.getClass();
        java.lang.Class<?> wildcardClass49 = obj47.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass49);
        objNodeImpl37.setContent((java.lang.Object) wildcardClass49);
        java.lang.String str52 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        objNodeImpl54.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        java.lang.String str67 = objNodeImpl64.toString();
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        objNodeImpl54.setName("Node(#)");
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode72 = objNodeImpl37.getParent();
        objNodeImpl21.setParent(objNode72);
        objNodeImpl21.setName("Node(Node(Node()))");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl21.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(class java.lang.Object)" + "'", str52.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "Node(1.0)" + "'", str67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode72);
        org.junit.Assert.assertNotNull(objNodeList76);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>> strComparableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "Node(Node(Node(Node())))");
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        boolean boolean9 = objNodeImpl3.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList10 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.String str25 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        java.lang.Object obj34 = objNodeImpl29.getContent();
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.lang.String str37 = objNodeImpl22.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl41.getParent();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl41.setDepth((int) (short) 1);
        boolean boolean50 = objNodeImpl41.isRoot();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str52 = objNodeImpl11.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeList10);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + 1.0f + "'", obj34.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "Node(Node(1.0))" + "'", str52.equals("Node(Node(1.0))"));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        boolean boolean28 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl32.getParent();
        java.lang.Object obj37 = null;
        objNodeImpl32.setContent(obj37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl46.copy();
        objNodeImpl53.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl53.getParent();
        objNodeImpl40.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl40.setName("hi!");
        java.lang.String str60 = objNodeImpl40.toString();
        objNodeImpl40.setName("Node(Node(1.0))");
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl40.setName("Node(1.0)");
        java.lang.Object obj66 = objNodeImpl40.getName();
        java.lang.Object obj67 = objNodeImpl40.getName();
        java.lang.Class<?> wildcardClass68 = obj67.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "Node(Node())" + "'", str60.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + obj66 + "' != '" + "Node(1.0)" + "'", obj66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj67 + "' != '" + "Node(1.0)" + "'", obj67.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.String str31 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.String str39 = objNodeImpl35.toString();
        java.lang.Object obj40 = objNodeImpl35.getContent();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.lang.String str43 = objNodeImpl28.toString();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl12);
        java.lang.Object obj46 = new java.lang.Object();
        java.lang.Class<?> wildcardClass47 = obj46.getClass();
        java.lang.Class<?> wildcardClass48 = obj46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl53.isLeaf();
        boolean boolean58 = objNodeImpl53.isRoot();
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl53.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl53.getParent();
        objNodeImpl3.setParent(objNode62);
        java.lang.Class<?> wildcardClass64 = objNode62.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(1.0)" + "'", str31.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Node(1.0)" + "'", str39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj34 = objNodeImpl17.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl38.getParent();
        java.lang.Object obj43 = null;
        objNodeImpl38.setContent(obj43);
        objNodeImpl38.setName("Node(1.0)");
        objNodeImpl38.setDepth(100);
        boolean boolean49 = objNodeImpl38.isRoot();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl38.setDepth((int) (byte) 1);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj34 + "' != '" + "Node(100)" + "'", obj34.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.String str15 = objNodeImpl11.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl11.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl20.getParent();
        java.lang.Object obj25 = null;
        objNodeImpl20.setContent(obj25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl11.setName("");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.lang.Object obj37 = objNodeImpl11.getName();
        boolean boolean38 = objNodeImpl11.isRoot();
        java.lang.Object obj39 = objNodeImpl11.getName();
        java.lang.Object obj40 = objNodeImpl11.getName();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "" + "'", obj37.equals(""));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "" + "'", obj39.equals(""));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "" + "'", obj40.equals(""));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        boolean boolean25 = objNodeImpl24.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl24.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl26);
        java.lang.Object obj28 = objNodeImpl26.getContent();
        java.lang.Object obj29 = objNodeImpl26.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0f + "'", obj28.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl9.copy();
        java.lang.Object obj11 = objNodeImpl10.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.lang.String str19 = objNodeImpl15.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl15.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl24.getParent();
        java.lang.Object obj29 = null;
        objNodeImpl24.setContent(obj29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl32.copy();
        java.lang.Object obj39 = objNodeImpl32.getContent();
        java.lang.Object obj40 = objNodeImpl32.getName();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.String str49 = objNodeImpl45.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl45.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl54.getParent();
        java.lang.Object obj59 = null;
        objNodeImpl54.setContent(obj59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = objNodeImpl62.copy();
        java.lang.Object obj69 = objNodeImpl62.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList70 = objNodeImpl62.getChildren();
        java.lang.Class<?> wildcardClass71 = objNodeList70.getClass();
        objNodeImpl32.setContent((java.lang.Object) wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(1.0)" + "'", obj11.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Node(1.0)" + "'", str19.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode20);
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + 1.0f + "'", obj39.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl68);
        org.junit.Assert.assertTrue("'" + obj69 + "' != '" + 1.0f + "'", obj69.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList70);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        boolean boolean9 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        java.lang.String str12 = objNodeImpl1.toString();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(100)" + "'", str12.equals("Node(100)"));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl19.getParent();
        boolean boolean23 = objNodeImpl19.isLeaf();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.Object obj25 = objNodeImpl3.getName();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "" + "'", obj25.equals(""));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl1.copy();
        boolean boolean7 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setDepth((int) (byte) -1);
        java.lang.String str11 = objNodeImpl8.toString();
        java.lang.Object obj12 = objNodeImpl8.getName();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(1.0)" + "'", str11.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + "Node(1.0)" + "'", obj12.equals("Node(1.0)"));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test389");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList7);
        java.lang.String str9 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl11.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        java.lang.Object obj28 = objNodeImpl19.getContent();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        objNodeImpl19.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl34.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl34.copy();
        java.lang.Class<?> wildcardClass42 = objNodeImpl34.getClass();
        java.lang.Class<?> wildcardClass43 = objNodeImpl34.getClass();
        boolean boolean44 = objNodeImpl34.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl34.copy();
        java.lang.String str46 = objNodeImpl45.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl45.copy();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl52.getParent();
        java.lang.Class<?> wildcardClass57 = objNodeImpl52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj62 = objNodeImpl59.getName();
        objNodeImpl52.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        objNodeImpl52.setName("");
        java.lang.String str66 = objNodeImpl52.toString();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl52.getParent();
        objNodeImpl52.setName("Node(Node(100))");
        objNodeImpl52.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node([])" + "'", str9.equals("Node([])"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + (byte) 100 + "'", obj28.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(100)" + "'", str46.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode69);
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test390");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl3.getParent();
        java.lang.String str10 = objNodeImpl3.toString();
        objNodeImpl3.setName("Node(Node(1.0))");
        java.lang.Object obj13 = objNodeImpl3.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(1.0)" + "'", str10.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test391");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl17.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        boolean boolean37 = objNodeImpl31.isLeaf();
        objNodeImpl31.setContent((java.lang.Object) (-1));
        java.lang.Object obj40 = objNodeImpl31.getName();
        boolean boolean41 = objNodeImpl31.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = objNodeImpl31.copy();
        java.lang.String str43 = objNodeImpl31.toString();
        java.lang.Class<?> wildcardClass44 = objNodeImpl31.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList45 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = objNodeImpl31.copy();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj48 = objNodeImpl31.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertNotNull(objNode28);
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objNodeImpl42);
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(-1)" + "'", str43.equals("Node(-1)"));
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(objNodeList45);
        org.junit.Assert.assertNotNull(objNodeImpl46);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + (-1) + "'", obj48.equals((-1)));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test392");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        java.lang.Object obj13 = objNodeImpl3.getName();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test393");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        objNodeImpl1.setDepth((int) (byte) 100);
        java.lang.String str8 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        boolean boolean16 = objNodeImpl10.isLeaf();
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        objNodeImpl10.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl10.copy();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl1.setDepth((int) (byte) 10);
        boolean boolean24 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        java.lang.Class<?> wildcardClass34 = objNodeImpl26.getClass();
        java.lang.Class<?> wildcardClass35 = objNodeImpl26.getClass();
        boolean boolean36 = objNodeImpl26.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl26.copy();
        java.lang.String str38 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl37.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl37.getChildren();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl37);
        boolean boolean42 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        java.lang.String str47 = objNodeImpl44.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.lang.String str55 = objNodeImpl51.toString();
        java.lang.Object obj56 = objNodeImpl51.getContent();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl51.getChildren();
        java.lang.Class<?> wildcardClass62 = objNodeImpl51.getClass();
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl51);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(100)" + "'", str38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "Node(1.0)" + "'", str47.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "Node(1.0)" + "'", str55.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + 1.0f + "'", obj56.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test394");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        objNodeImpl1.setDepth((int) (short) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass38 = objNodeImpl20.getClass();
        java.lang.Object obj39 = objNodeImpl20.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        boolean boolean47 = objNodeImpl41.isLeaf();
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl50.setDepth((int) (short) 100);
        boolean boolean58 = objNodeImpl50.isLeaf();
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setDepth((int) (short) 1);
        boolean boolean67 = objNodeImpl62.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl62);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl70.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = objNodeImpl70.copy();
        objNodeImpl77.setDepth((int) 'a');
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl77);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList82 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode83 = objNodeImpl50.getParent();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objNodeList76);
        org.junit.Assert.assertNotNull(objNodeImpl77);
        org.junit.Assert.assertNotNull(objNodeList82);
        org.junit.Assert.assertNotNull(objNode83);
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test395");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean12 = objNodeImpl8.isLeaf();
        boolean boolean13 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl8.getParent();
        java.lang.String str15 = objNodeImpl8.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setName("Node(100)");
        objNodeImpl8.setName("Node(1.0)");
        objNodeImpl8.setDepth((int) (short) 1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test396");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.lang.Object obj30 = objNodeImpl11.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        boolean boolean38 = objNodeImpl32.isLeaf();
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        objNodeImpl41.setDepth((int) (short) 100);
        boolean boolean49 = objNodeImpl41.isLeaf();
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setDepth((int) (short) 1);
        boolean boolean58 = objNodeImpl53.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList67 = objNodeImpl61.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = objNodeImpl61.copy();
        objNodeImpl68.setDepth((int) 'a');
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl53.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNodeList67);
        org.junit.Assert.assertNotNull(objNodeImpl68);
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test397");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        java.lang.Object obj25 = objNodeImpl17.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        boolean boolean33 = objNodeImpl29.isLeaf();
        boolean boolean34 = objNodeImpl29.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl29.getParent();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl29);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        boolean boolean41 = objNodeImpl38.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode42 = objNodeImpl38.getParent();
        boolean boolean43 = objNodeImpl38.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl45.getChildren();
        objNodeImpl45.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        java.lang.String str58 = objNodeImpl55.toString();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl38.getParent();
        java.lang.String str62 = objNodeImpl38.toString();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl38);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + 1.0f + "'", obj25.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(objNode42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Node(1.0)" + "'", str58.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(1.0)" + "'", str62.equals("Node(1.0)"));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test398");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        java.lang.Object obj13 = null;
        objNodeImpl8.setContent(obj13);
        objNodeImpl8.setName("Node(Node(100))");
        try {
            java.lang.String str17 = objNodeImpl8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test399");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl7.setName("Node()");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test400");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Object obj20 = null;
        objNodeImpl15.setContent(obj20);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj26 = objNodeImpl23.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl36);
        java.lang.Class<?> wildcardClass41 = objNodeImpl23.getClass();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        boolean boolean47 = objNodeImpl44.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl49.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = objNodeImpl49.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        java.lang.String str61 = objNodeImpl58.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str69 = objNodeImpl65.toString();
        java.lang.Object obj70 = objNodeImpl65.getContent();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl49.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.String str73 = objNodeImpl58.toString();
        objNodeImpl58.setName("Node(1.0)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Object obj77 = objNodeImpl44.getContent();
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode79 = objNodeImpl23.getParent();
        java.lang.Object obj80 = objNodeImpl23.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertTrue("'" + obj26 + "' != '" + "Node(100)" + "'", obj26.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList55);
        org.junit.Assert.assertNotNull(objNodeImpl56);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(1.0)" + "'", str61.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + 1.0f + "'", obj70.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str73 + "' != '" + "Node(1.0)" + "'", str73.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertNotNull(objNode79);
        org.junit.Assert.assertTrue("'" + obj80 + "' != '" + "Node(100)" + "'", obj80.equals("Node(100)"));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test401");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        objNodeImpl8.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList28 = objNodeImpl22.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = objNodeImpl22.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        java.lang.String str34 = objNodeImpl31.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str42 = objNodeImpl38.toString();
        java.lang.Object obj43 = objNodeImpl38.getContent();
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.lang.String str46 = objNodeImpl31.toString();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl31.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj53 = objNodeImpl50.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = objNodeImpl50.copy();
        objNodeImpl50.setName("Node(1.0)");
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.Object obj58 = objNodeImpl50.getName();
        objNodeImpl50.setName("Node(Node(1))");
        objNodeImpl8.setContent((java.lang.Object) "Node(Node(1))");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeImpl13);
        org.junit.Assert.assertNotNull(objNodeList28);
        org.junit.Assert.assertNotNull(objNodeImpl29);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Node(1.0)" + "'", str34.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(1.0)" + "'", str42.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + 1.0f + "'", obj43.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(1.0)" + "'", str46.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertTrue("'" + obj53 + "' != '" + "Node(100)" + "'", obj53.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl54);
        org.junit.Assert.assertTrue("'" + obj58 + "' != '" + "Node(1.0)" + "'", obj58.equals("Node(1.0)"));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test402");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        boolean boolean9 = objNodeImpl1.isLeaf();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getName();
        java.lang.Object obj12 = objNodeImpl1.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + "Node(100)" + "'", obj11.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj12 + "' != '" + (byte) 100 + "'", obj12.equals((byte) 100));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test403");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        boolean boolean10 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.String str31 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        java.lang.String str39 = objNodeImpl35.toString();
        java.lang.Object obj40 = objNodeImpl35.getContent();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.lang.String str43 = objNodeImpl28.toString();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl12);
        java.lang.Object obj46 = objNodeImpl12.getName();
        java.lang.Object obj47 = objNodeImpl12.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList55 = objNodeImpl49.getChildren();
        objNodeImpl49.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        java.lang.String str62 = objNodeImpl59.toString();
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList64 = objNodeImpl59.getChildren();
        objNodeImpl12.setContent((java.lang.Object) objNodeList64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList64);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(1.0)" + "'", str31.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "Node(1.0)" + "'", str39.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + 1.0f + "'", obj40.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "Node(1.0)" + "'", str43.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + "Node(100)" + "'", obj46.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + "Node(100)" + "'", obj47.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList55);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(1.0)" + "'", str62.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList64);
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test404");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl1.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass6 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = annotatedElementNodeImpl7.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable> serializableNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable>((java.io.Serializable) wildcardClass8);
        org.junit.Assert.assertNull(objNode4);
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test405");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        objNodeImpl3.setName("Node([])");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl13.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = objNodeImpl13.copy();
        objNodeImpl20.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl20.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode31 = objNodeImpl27.getParent();
        java.lang.Class<?> wildcardClass32 = objNodeImpl27.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj37 = objNodeImpl34.getName();
        objNodeImpl27.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        objNodeImpl20.setContent((java.lang.Object) objNodeImpl27);
        java.lang.Object obj40 = objNodeImpl20.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList48 = objNodeImpl42.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setDepth((int) (short) 1);
        boolean boolean55 = objNodeImpl50.isRoot();
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean57 = objNodeImpl50.isRoot();
        objNodeImpl20.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean59 = objNodeImpl20.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl20.copy();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        java.lang.Object obj62 = objNodeImpl3.getName();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNodeImpl20);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNull(objNode31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(100)" + "'", obj37.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(objNodeList48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node([])" + "'", obj62.equals("Node([])"));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test406");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        boolean boolean25 = objNodeImpl24.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl24.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        objNodeImpl28.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.String str41 = objNodeImpl38.toString();
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl38.getChildren();
        objNodeImpl26.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl38.setDepth((int) '4');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl50.getParent();
        java.lang.Class<?> wildcardClass55 = objNodeImpl50.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj60 = objNodeImpl57.getName();
        objNodeImpl50.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        objNodeImpl57.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList71 = objNodeImpl65.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl73.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setDepth((int) (short) 1);
        boolean boolean78 = objNodeImpl73.isRoot();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        boolean boolean80 = objNodeImpl73.isRoot();
        boolean boolean81 = objNodeImpl73.isRoot();
        objNodeImpl57.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        objNodeImpl57.setDepth(10);
        java.lang.Object obj85 = objNodeImpl57.getName();
        objNodeImpl57.setName("Node(#)");
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl57);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList71);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + obj85 + "' != '" + "Node(100)" + "'", obj85.equals("Node(100)"));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test407");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        boolean boolean14 = objNodeImpl3.isRoot();
        boolean boolean15 = objNodeImpl3.isLeaf();
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test408");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setName("Node(#)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode45 = objNodeImpl41.getParent();
        java.lang.Class<?> wildcardClass46 = objNodeImpl41.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl41.copy();
        java.lang.Object obj48 = objNodeImpl41.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl41.getParent();
        java.lang.Object obj50 = objNodeImpl41.getContent();
        objNodeImpl10.setContent(obj50);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(objNode45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + 1.0f + "'", obj48.equals(1.0f));
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + 1.0f + "'", obj50.equals(1.0f));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test409");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        objNodeImpl34.setDepth(10);
        java.lang.Object obj37 = objNodeImpl34.getName();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + "Node(1.0)" + "'", obj37.equals("Node(1.0)"));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test410");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.String str14 = objNodeImpl11.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl11.getChildren();
        boolean boolean17 = objNodeImpl11.isRoot();
        java.lang.String str18 = objNodeImpl11.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        boolean boolean26 = objNodeImpl20.isLeaf();
        objNodeImpl20.setContent((java.lang.Object) (-1));
        java.lang.Object obj29 = objNodeImpl20.getName();
        boolean boolean30 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Object obj39 = null;
        objNodeImpl34.setContent(obj39);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList54 = objNodeImpl48.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl48.copy();
        objNodeImpl55.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl55.getParent();
        objNodeImpl42.setContent((java.lang.Object) objNodeImpl55);
        java.lang.Class<?> wildcardClass60 = objNodeImpl42.getClass();
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setName("Node(1.0)");
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setDepth(100);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1.0)" + "'", str14.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(1.0)" + "'", str18.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + "Node(100)" + "'", obj29.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList54);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test411");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class<?> wildcardClass37 = obj35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl38);
        java.lang.Object obj51 = objNodeImpl38.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode52 = null;
        try {
            objNodeImpl38.addChild(objNode52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(obj51);
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test412");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setDepth((int) (short) 1);
        boolean boolean43 = objNodeImpl38.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        boolean boolean45 = objNodeImpl38.isRoot();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl8.copy();
        java.lang.Object obj48 = objNodeImpl47.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = objNodeImpl47.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl47.copy();
        objNodeImpl51.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeImpl50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test413");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList17 = objNodeImpl10.getChildren();
        java.lang.String str18 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl22.getParent();
        java.lang.Object obj27 = null;
        objNodeImpl22.setContent(obj27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl22.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        objNodeImpl36.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList42 = objNodeImpl36.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl36.copy();
        objNodeImpl43.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl43.getParent();
        objNodeImpl30.setContent((java.lang.Object) objNodeImpl43);
        java.lang.Class<?> wildcardClass48 = objNodeImpl30.getClass();
        java.lang.Object obj49 = objNodeImpl30.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean57 = objNodeImpl51.isLeaf();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl10.setName("Node(1.0)");
        objNodeImpl10.setDepth((int) (byte) 100);
        java.lang.Class<?> wildcardClass64 = objNodeImpl10.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList17);
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "Node(0)" + "'", str18.equals("Node(0)"));
        org.junit.Assert.assertNull(objNode26);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList42);
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test414");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl28.getParent();
        java.lang.Object obj30 = objNodeImpl28.getContent();
        boolean boolean31 = objNodeImpl28.isRoot();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + 1.0f + "'", obj30.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test415");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setDepth((int) (short) 1);
        objNodeImpl1.setContent((java.lang.Object) objNodeImpl3);
        java.lang.Object obj9 = objNodeImpl3.getContent();
        boolean boolean10 = objNodeImpl3.isRoot();
        java.lang.Object obj11 = objNodeImpl3.getContent();
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + 1.0f + "'", obj11.equals(1.0f));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test416");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        boolean boolean28 = objNodeImpl8.isLeaf();
        objNodeImpl8.setName("");
        java.lang.String str31 = objNodeImpl8.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "Node(Node(1.0))" + "'", str31.equals("Node(Node(1.0))"));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test417");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.lang.String str9 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode10 = objNodeImpl5.getParent();
        boolean boolean11 = objNodeImpl5.isRoot();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl13.getParent();
        try {
            java.lang.Class<?> wildcardClass15 = objNode14.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(objNode14);
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test418");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str15 = objNodeImpl3.toString();
        java.lang.Object obj16 = objNodeImpl3.getContent();
        objNodeImpl3.setName("Node(Node())");
        java.lang.String str19 = objNodeImpl3.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + 1.0f + "'", obj16.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str19 + "' != '" + "Node(1.0)" + "'", str19.equals("Node(1.0)"));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test419");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.lang.String str33 = objNodeImpl29.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl29.getParent();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        objNodeImpl29.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl29.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList46 = objNodeImpl40.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = objNodeImpl40.copy();
        objNodeImpl47.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl47.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl54.getParent();
        java.lang.Class<?> wildcardClass59 = objNodeImpl54.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj64 = objNodeImpl61.getName();
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList74 = objNodeImpl68.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl68.copy();
        objNodeImpl75.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl75.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        objNodeImpl80.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode86 = objNodeImpl82.getParent();
        java.lang.Class<?> wildcardClass87 = objNodeImpl82.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl89.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj92 = objNodeImpl89.getName();
        objNodeImpl82.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl89);
        objNodeImpl75.setContent((java.lang.Object) objNodeImpl82);
        objNodeImpl47.setContent((java.lang.Object) objNodeImpl75);
        objNodeImpl29.setContent((java.lang.Object) objNodeImpl75);
        java.lang.Object obj97 = objNodeImpl29.getContent();
        boolean boolean98 = objNodeImpl29.isLeaf();
        boolean boolean99 = objNodeImpl29.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objNodeList46);
        org.junit.Assert.assertNotNull(objNodeImpl47);
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj64 + "' != '" + "Node(100)" + "'", obj64.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList74);
        org.junit.Assert.assertNotNull(objNodeImpl75);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertNull(objNode86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertTrue("'" + obj92 + "' != '" + "Node(100)" + "'", obj92.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test420");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl39.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj42 = objNodeImpl39.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList43 = objNodeImpl39.getChildren();
        java.lang.Object obj44 = new java.lang.Object();
        java.lang.Class<?> wildcardClass45 = obj44.getClass();
        java.lang.Class<?> wildcardClass46 = obj44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl49.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        boolean boolean55 = objNodeImpl51.isLeaf();
        boolean boolean56 = objNodeImpl51.isRoot();
        objNodeImpl47.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl51.setName("Node(1.0)");
        java.lang.Object obj60 = objNodeImpl51.getName();
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl39);
        java.lang.String str63 = objNodeImpl10.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + "Node(100)" + "'", obj42.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList43);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(1.0)" + "'", obj60.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str63 + "' != '" + "Node(0)" + "'", str63.equals("Node(0)"));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test421");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl6.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setDepth((int) (short) 1);
        boolean boolean19 = objNodeImpl14.isRoot();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        boolean boolean21 = objNodeImpl14.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode22 = objNodeImpl14.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.lang.String str30 = objNodeImpl26.toString();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl26.setDepth((int) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.String str38 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        java.lang.String str46 = objNodeImpl42.toString();
        java.lang.Object obj47 = objNodeImpl42.getContent();
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        java.lang.Class<?> wildcardClass54 = obj52.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass54);
        objNodeImpl42.setContent((java.lang.Object) wildcardClass54);
        java.lang.String str57 = objNodeImpl42.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        objNodeImpl59.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        java.lang.String str72 = objNodeImpl69.toString();
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl59.setName("Node(#)");
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode77 = objNodeImpl42.getParent();
        objNodeImpl26.setParent(objNode77);
        objNodeImpl26.setName("Node(Node(Node()))");
        objNodeImpl1.setContent((java.lang.Object) "Node(Node(Node()))");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(objNodeList12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(objNode22);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(1.0)" + "'", str30.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(1.0)" + "'", str38.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "Node(1.0)" + "'", str46.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj47 + "' != '" + 1.0f + "'", obj47.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(class java.lang.Object)" + "'", str57.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertTrue("'" + str72 + "' != '" + "Node(1.0)" + "'", str72.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode77);
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test422");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        java.lang.Object obj29 = objNodeImpl28.getContent();
        java.lang.String str30 = objNodeImpl28.toString();
        objNodeImpl28.setName("Node(a)");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "Node(Node(1.0))" + "'", str30.equals("Node(Node(1.0))"));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test423");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        objNodeImpl35.setDepth((int) (short) 1);
        java.lang.Object obj42 = objNodeImpl35.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + (byte) 100 + "'", obj42.equals((byte) 100));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test424");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence> charSequenceNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.CharSequence>((java.lang.CharSequence) "Node(Node(1.0))");
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test425");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = objNodeImpl5.copy();
        objNodeImpl5.setDepth(0);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertNotNull(objNodeImpl6);
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test426");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl11.getChildren();
        java.lang.Object obj31 = objNodeImpl11.getName();
        java.lang.String str32 = objNodeImpl11.toString();
        boolean boolean33 = objNodeImpl11.isRoot();
        objNodeImpl11.setDepth((int) (short) 10);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(Node())" + "'", str32.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test427");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl13.getParent();
        java.lang.Object obj18 = null;
        objNodeImpl13.setContent(obj18);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj24 = objNodeImpl21.getName();
        objNodeImpl13.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean26 = objNodeImpl13.isLeaf();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.Object obj28 = objNodeImpl13.getContent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + obj24 + "' != '" + "Node(100)" + "'", obj24.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(obj28);
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test428");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setDepth(1);
        boolean boolean27 = objNodeImpl10.isLeaf();
        java.lang.String str28 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl10.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode29);
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test429");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        boolean boolean25 = objNodeImpl19.isLeaf();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl8.copy();
        objNodeImpl28.setName("");
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNode27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test430");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl5.setContent((java.lang.Object) 1.0f);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl5);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl3.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl3.copy();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        boolean boolean13 = objNodeImpl3.isLeaf();
        objNodeImpl3.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl3.copy();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl18.copy();
        java.lang.Object obj20 = objNodeImpl18.getContent();
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + (short) 1 + "'", obj20.equals((short) 1));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test431");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl6.setContent((java.lang.Object) 1.0f);
        java.lang.String str9 = objNodeImpl6.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.lang.String str17 = objNodeImpl13.toString();
        java.lang.Object obj18 = objNodeImpl13.getContent();
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList22);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(1.0)" + "'", str9.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "Node(1.0)" + "'", str17.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + 1.0f + "'", obj18.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList22);
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test432");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.String str16 = objNodeImpl15.toString();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "Node(Node(1.0))" + "'", str16.equals("Node(Node(1.0))"));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test433");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setDepth((int) (short) 1);
        objNodeImpl25.setContent((java.lang.Object) objNodeImpl27);
        objNodeImpl25.setDepth((int) (byte) 0);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.Object obj36 = objNodeImpl3.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl3.getChildren();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + "Node(100)" + "'", obj36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList37);
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test434");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode43 = objNodeImpl40.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = objNodeImpl40.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl46.copy();
        objNodeImpl53.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode56 = objNodeImpl53.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl60.getParent();
        java.lang.Class<?> wildcardClass65 = objNodeImpl60.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl60);
        java.lang.Object obj73 = objNodeImpl53.getContent();
        objNodeImpl53.setName("Node(100)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode76 = objNodeImpl53.getParent();
        java.lang.Object obj77 = new java.lang.Object();
        java.lang.Class<?> wildcardClass78 = obj77.getClass();
        java.lang.Class<?> wildcardClass79 = obj77.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl80 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        boolean boolean88 = objNodeImpl84.isLeaf();
        boolean boolean89 = objNodeImpl84.isRoot();
        objNodeImpl80.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setName("Node(1.0)");
        java.lang.Object obj93 = objNodeImpl84.getName();
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl35.setName("Node(100)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode43);
        org.junit.Assert.assertNotNull(objNodeImpl44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertNull(objNode56);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertNull(objNode76);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + obj93 + "' != '" + "Node(1.0)" + "'", obj93.equals("Node(1.0)"));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test435");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl7.setDepth((int) (short) 1);
        boolean boolean12 = objNodeImpl7.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl7);
        objNodeImpl13.setDepth(10);
        java.lang.Object obj16 = objNodeImpl13.getContent();
        objNodeImpl13.setDepth((int) (byte) 0);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl1.setDepth((-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test436");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        boolean boolean17 = objNodeImpl7.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl7.getParent();
        java.lang.Object obj19 = objNodeImpl7.getName();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(1.0)" + "'", obj19.equals("Node(1.0)"));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test437");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setDepth((int) (short) 1);
        boolean boolean22 = objNodeImpl17.isRoot();
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl26.copy();
        objNodeImpl33.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl33.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Class<?> wildcardClass45 = objNodeImpl40.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl47 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl47.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj50 = objNodeImpl47.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl47);
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl40);
        java.lang.Object obj53 = objNodeImpl33.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl57.setContent((java.lang.Object) 1.0f);
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl55.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setDepth((int) (short) 1);
        boolean boolean68 = objNodeImpl63.isRoot();
        objNodeImpl55.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean70 = objNodeImpl63.isRoot();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl33.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) 'a');
        objNodeImpl33.setContent((java.lang.Object) 'a');
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Class<?> wildcardClass77 = objNodeImpl17.getClass();
        objNodeImpl17.setDepth((int) 'a');
        objNodeImpl17.setDepth((int) (short) 0);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test438");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList5 = objNodeImpl1.getChildren();
        java.lang.Object obj6 = new java.lang.Object();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        java.lang.Class<?> wildcardClass8 = obj6.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        boolean boolean17 = objNodeImpl13.isLeaf();
        boolean boolean18 = objNodeImpl13.isRoot();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        objNodeImpl13.setName("Node(1.0)");
        java.lang.Object obj22 = objNodeImpl13.getName();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl13);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl1.getChildren();
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList5);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + "Node(1.0)" + "'", obj22.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList24);
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test439");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        boolean boolean12 = objNodeImpl3.isLeaf();
        java.lang.Object obj13 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList21 = objNodeImpl15.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = objNodeImpl15.copy();
        java.lang.Class<?> wildcardClass23 = objNodeImpl15.getClass();
        java.lang.Class<?> wildcardClass24 = objNodeImpl15.getClass();
        boolean boolean25 = objNodeImpl15.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl15.copy();
        java.lang.String str27 = objNodeImpl26.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode28 = objNodeImpl26.getParent();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl26);
        java.lang.Object obj30 = objNodeImpl3.getContent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList21);
        org.junit.Assert.assertNotNull(objNodeImpl22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(100)" + "'", str27.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode28);
        org.junit.Assert.assertNotNull(obj30);
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test440");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        boolean boolean9 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        objNodeImpl8.setContent((java.lang.Object) "hi!");
        boolean boolean19 = objNodeImpl8.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeCollectionNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.util.Collection<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList20);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test441");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        objNodeImpl1.setName("Node(class java.lang.Object)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl13.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj16 = objNodeImpl13.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = objNodeImpl13.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = objNodeImpl17.copy();
        java.lang.Object obj19 = objNodeImpl17.getName();
        java.lang.Object obj20 = objNodeImpl17.getContent();
        java.lang.Object obj21 = objNodeImpl17.getName();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        boolean boolean23 = objNodeImpl17.isLeaf();
        objNodeImpl17.setName("Node(#)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl11);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl17);
        org.junit.Assert.assertNotNull(objNodeImpl18);
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(1.0)" + "'", obj19.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + 1.0f + "'", obj20.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj21 + "' != '" + "Node(1.0)" + "'", obj21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test442");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        boolean boolean17 = objNodeImpl9.isRoot();
        objNodeImpl9.setDepth((int) (byte) 100);
        objNodeImpl9.setName("Node(class org.misha.beanutils.tree.impl.NodeImpl)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        objNodeImpl23.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl25.getParent();
        java.lang.Class<?> wildcardClass30 = objNodeImpl25.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj35 = objNodeImpl32.getName();
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str37 = objNodeImpl25.toString();
        java.lang.Object obj38 = objNodeImpl25.getContent();
        boolean boolean39 = objNodeImpl25.isRoot();
        java.lang.Object obj40 = objNodeImpl25.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        boolean boolean48 = objNodeImpl42.isLeaf();
        objNodeImpl42.setContent((java.lang.Object) (-1));
        java.lang.Object obj51 = objNodeImpl42.getName();
        boolean boolean52 = objNodeImpl42.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = objNodeImpl42.copy();
        java.lang.String str54 = objNodeImpl42.toString();
        boolean boolean55 = objNodeImpl42.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl59.copy();
        java.lang.Class<?> wildcardClass67 = objNodeImpl59.getClass();
        java.lang.Class<?> wildcardClass68 = objNodeImpl59.getClass();
        boolean boolean69 = objNodeImpl59.isLeaf();
        objNodeImpl59.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = objNodeImpl59.copy();
        objNodeImpl57.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl75.getParent();
        boolean boolean79 = objNodeImpl75.isLeaf();
        objNodeImpl59.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        objNodeImpl42.setContent((java.lang.Object) objNodeImpl75);
        objNodeImpl25.setContent((java.lang.Object) objNodeImpl75);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + obj35 + "' != '" + "Node(100)" + "'", obj35.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0f + "'", obj38.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + obj40 + "' != '" + "Node(100)" + "'", obj40.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(objNodeImpl53);
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "Node(-1)" + "'", str54.equals("Node(-1)"));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(objNodeImpl72);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test443");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.Object obj27 = objNodeImpl3.getContent();
        java.lang.Object obj28 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.String str33 = objNodeImpl30.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.String str41 = objNodeImpl37.toString();
        java.lang.Object obj42 = objNodeImpl37.getContent();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl37.getChildren();
        java.lang.String str48 = objNodeImpl37.toString();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.Object obj50 = objNodeImpl37.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + "Node(100)" + "'", obj28.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "Node(1.0)" + "'", str33.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj50 + "' != '" + "Node(100)" + "'", obj50.equals("Node(100)"));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test444");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = objNodeImpl9.copy();
        objNodeImpl9.setName("Node(Node(1))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) "Node(Node(1))");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertNotNull(objNodeImpl10);
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test445");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        java.lang.Object obj16 = objNodeImpl7.getName();
        java.lang.Object obj17 = null;
        objNodeImpl7.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        boolean boolean23 = objNodeImpl20.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        boolean boolean31 = objNodeImpl27.isLeaf();
        boolean boolean32 = objNodeImpl27.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl27.getParent();
        java.lang.String str34 = objNodeImpl27.toString();
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        objNodeImpl27.setName("Node(100)");
        objNodeImpl7.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Class<?> wildcardClass39 = objNodeImpl7.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(objNode33);
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "Node(1.0)" + "'", str34.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test446");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.Object obj38 = objNodeImpl10.getName();
        objNodeImpl10.setName("Node(#)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = objNodeImpl10.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Object obj50 = null;
        objNodeImpl45.setContent(obj50);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj56 = objNodeImpl53.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = objNodeImpl59.copy();
        objNodeImpl66.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl66.getParent();
        objNodeImpl53.setContent((java.lang.Object) objNodeImpl66);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList71 = objNodeImpl53.getChildren();
        java.lang.Object obj72 = objNodeImpl53.getContent();
        objNodeImpl41.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        boolean boolean74 = objNodeImpl53.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertTrue("'" + obj56 + "' != '" + "Node(100)" + "'", obj56.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertNotNull(objNodeImpl66);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(objNodeList71);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test447");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setDepth((int) 'a');
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.String str23 = objNodeImpl8.toString();
        boolean boolean24 = objNodeImpl8.isLeaf();
        java.lang.Object obj25 = objNodeImpl8.getName();
        objNodeImpl8.setName("Node(Node(1.0))");
        objNodeImpl8.setDepth((int) (short) 0);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node()" + "'", str23.equals("Node()"));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test448");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>> strComparableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Comparable<java.lang.String>>((java.lang.Comparable<java.lang.String>) "Node(0)");
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test449");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        java.lang.Class<?> wildcardClass17 = objNodeImpl9.getClass();
        java.lang.Object obj18 = objNodeImpl9.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        objNodeImpl9.setName("Node(Node())");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList30 = objNodeImpl24.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = objNodeImpl24.copy();
        java.lang.Class<?> wildcardClass32 = objNodeImpl24.getClass();
        java.lang.Class<?> wildcardClass33 = objNodeImpl24.getClass();
        boolean boolean34 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl24.copy();
        java.lang.String str36 = objNodeImpl35.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl35.copy();
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode46 = objNodeImpl42.getParent();
        java.lang.Class<?> wildcardClass47 = objNodeImpl42.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl49.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj52 = objNodeImpl49.getName();
        objNodeImpl42.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl49);
        objNodeImpl42.setName("");
        java.lang.String str56 = objNodeImpl42.toString();
        objNodeImpl35.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl35.setDepth((int) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + obj18 + "' != '" + (byte) 100 + "'", obj18.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeList30);
        org.junit.Assert.assertNotNull(objNodeImpl31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(100)" + "'", str36.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(100)" + "'", obj52.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test450");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList24 = objNodeImpl18.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setDepth((int) (short) 1);
        boolean boolean31 = objNodeImpl26.isRoot();
        objNodeImpl18.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        boolean boolean33 = objNodeImpl26.isRoot();
        boolean boolean34 = objNodeImpl26.isRoot();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl10.setDepth(10);
        java.lang.String str38 = objNodeImpl10.toString();
        java.lang.Object obj39 = null;
        objNodeImpl10.setContent(obj39);
        try {
            org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>(obj39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "Node(0)" + "'", str38.equals("Node(0)"));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test451");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        objNodeImpl1.setContent((java.lang.Object) '#');
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.String str14 = objNodeImpl11.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl11.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "Node(1.0)" + "'", str14.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList16);
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test452");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl3);
        java.lang.Object obj16 = objNodeImpl3.getName();
        boolean boolean17 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode25 = objNodeImpl21.getParent();
        java.lang.Class<?> wildcardClass26 = objNodeImpl21.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj31 = objNodeImpl28.getName();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        objNodeImpl28.setContent((java.lang.Object) (byte) 0);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl28.getChildren();
        java.lang.String str36 = objNodeImpl28.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        objNodeImpl61.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode64 = objNodeImpl61.getParent();
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl61);
        java.lang.Class<?> wildcardClass66 = objNodeImpl48.getClass();
        java.lang.Object obj67 = objNodeImpl48.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        boolean boolean75 = objNodeImpl69.isLeaf();
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        objNodeImpl28.setName("Node(1.0)");
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode88 = objNodeImpl84.getParent();
        java.lang.Class<?> wildcardClass89 = objNodeImpl84.getClass();
        boolean boolean90 = objNodeImpl84.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList91 = objNodeImpl84.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl92 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl84);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList93 = objNodeImpl92.getChildren();
        java.lang.Object obj94 = objNodeImpl92.getName();
        java.lang.Class<?> wildcardClass95 = objNodeImpl92.getClass();
        objNodeImpl28.setContent((java.lang.Object) wildcardClass95);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(100)" + "'", obj16.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(objNode25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + obj31 + "' != '" + "Node(100)" + "'", obj31.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(0)" + "'", str36.equals("Node(0)"));
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertNull(objNode64);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(obj67);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(objNode88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(objNodeList91);
        org.junit.Assert.assertNotNull(objNodeList93);
        org.junit.Assert.assertTrue("'" + obj94 + "' != '" + "Node(Node(1.0))" + "'", obj94.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test453");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        boolean boolean8 = objNodeImpl3.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl10.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl10.copy();
        objNodeImpl3.setContent((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl3.getParent();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertNull(objNode17);
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test454");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl23.getParent();
        java.lang.Class<?> wildcardClass28 = objNodeImpl23.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj33 = objNodeImpl30.getName();
        objNodeImpl23.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl30.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setDepth((int) (short) 1);
        boolean boolean51 = objNodeImpl46.isRoot();
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        boolean boolean53 = objNodeImpl46.isRoot();
        boolean boolean54 = objNodeImpl46.isRoot();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl60.setContent((java.lang.Object) 1.0f);
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl60);
        boolean boolean64 = objNodeImpl58.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl66 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl68.setContent((java.lang.Object) 1.0f);
        objNodeImpl66.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl68);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList72 = objNodeImpl66.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = objNodeImpl66.copy();
        java.lang.Class<?> wildcardClass74 = objNodeImpl66.getClass();
        java.lang.Object obj75 = objNodeImpl66.getContent();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl77 = objNodeImpl66.copy();
        java.lang.String str78 = objNodeImpl66.toString();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl66);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + obj33 + "' != '" + "Node(100)" + "'", obj33.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(objNodeList72);
        org.junit.Assert.assertNotNull(objNodeImpl73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + (byte) 100 + "'", obj75.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeImpl77);
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(100)" + "'", str78.equals("Node(100)"));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test455");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl8.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList19 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode20 = objNodeImpl8.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeList19);
        org.junit.Assert.assertNotNull(objNode20);
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test456");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj4 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = objNodeImpl1.copy();
        objNodeImpl5.setName("Node(100)");
        java.lang.String str8 = objNodeImpl5.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode9 = objNodeImpl5.getParent();
        objNodeImpl5.setDepth(10);
        java.lang.Class<?> wildcardClass12 = objNodeImpl5.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass12);
        org.junit.Assert.assertTrue("'" + obj4 + "' != '" + "Node(100)" + "'", obj4.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl5);
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "Node(1.0)" + "'", str8.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode9);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test457");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = objNodeImpl3.copy();
        java.lang.Object obj10 = objNodeImpl3.getContent();
        java.lang.Class<?> wildcardClass11 = objNodeImpl3.getClass();
        java.lang.Class<?> wildcardClass12 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        objNodeImpl21.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode24 = objNodeImpl21.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl28.getParent();
        java.lang.Class<?> wildcardClass33 = objNodeImpl28.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj38 = objNodeImpl35.getName();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        objNodeImpl21.setContent((java.lang.Object) objNodeImpl28);
        java.lang.Object obj41 = objNodeImpl21.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList49 = objNodeImpl43.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setDepth((int) (short) 1);
        boolean boolean56 = objNodeImpl51.isRoot();
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        boolean boolean58 = objNodeImpl51.isRoot();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl60 = objNodeImpl21.copy();
        java.lang.String str61 = objNodeImpl60.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl60.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl79 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl81.setContent((java.lang.Object) 1.0f);
        objNodeImpl79.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode85 = objNodeImpl81.getParent();
        java.lang.Class<?> wildcardClass86 = objNodeImpl81.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl88.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj91 = objNodeImpl88.getName();
        objNodeImpl81.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl88);
        objNodeImpl81.setName("");
        objNodeImpl60.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        boolean boolean97 = objNodeImpl3.isLeaf();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeImpl9);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + 1.0f + "'", obj10.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNull(objNode24);
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + "Node(100)" + "'", obj38.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(objNodeList49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(objNodeImpl60);
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "Node(Node(1.0))" + "'", str61.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + "Node(100)" + "'", obj91.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test458");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        objNodeImpl8.setName("Node(100)");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = objNodeImpl32.copy();
        java.lang.Class<?> wildcardClass40 = objNodeImpl32.getClass();
        objNodeImpl32.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = objNodeImpl44.copy();
        objNodeImpl51.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl51.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode62 = objNodeImpl58.getParent();
        java.lang.Class<?> wildcardClass63 = objNodeImpl58.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj68 = objNodeImpl65.getName();
        objNodeImpl58.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        objNodeImpl51.setContent((java.lang.Object) objNodeImpl58);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode75 = objNodeImpl72.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl72.copy();
        objNodeImpl58.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        objNodeImpl32.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.lang.Class<?> wildcardClass79 = objNodeImpl32.getClass();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = objNodeImpl32.copy();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertNotNull(objNodeImpl39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertNotNull(objNodeImpl51);
        org.junit.Assert.assertNull(objNode54);
        org.junit.Assert.assertNull(objNode62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + obj68 + "' != '" + "Node(100)" + "'", obj68.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode75);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(objNodeImpl81);
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test459");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setDepth((int) (short) 1);
        boolean boolean6 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList15 = objNodeImpl9.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = objNodeImpl9.copy();
        objNodeImpl16.setDepth((int) 'a');
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj20 = objNodeImpl16.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl16.copy();
        java.lang.Class<?> wildcardClass22 = objNodeImpl16.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        boolean boolean27 = objNodeImpl24.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        java.lang.String str32 = objNodeImpl29.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.String str40 = objNodeImpl36.toString();
        java.lang.Object obj41 = objNodeImpl36.getContent();
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        objNodeImpl24.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl24);
        objNodeImpl44.setDepth(100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl50.setContent((java.lang.Object) 1.0f);
        objNodeImpl48.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        boolean boolean54 = objNodeImpl50.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = objNodeImpl50.copy();
        objNodeImpl50.setDepth((int) '#');
        boolean boolean58 = objNodeImpl50.isRoot();
        java.lang.Class<?> wildcardClass59 = objNodeImpl50.getClass();
        java.lang.Object obj60 = objNodeImpl50.getName();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        java.lang.Object obj62 = objNodeImpl50.getName();
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl50);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objNodeList15);
        org.junit.Assert.assertNotNull(objNodeImpl16);
        org.junit.Assert.assertTrue("'" + obj20 + "' != '" + "Node(100)" + "'", obj20.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + 1.0f + "'", obj41.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objNodeImpl55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + obj60 + "' != '" + "Node(100)" + "'", obj60.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj62 + "' != '" + "Node(100)" + "'", obj62.equals("Node(100)"));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test460");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.String str9 = objNodeImpl8.toString();
        java.lang.String str10 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl14.getParent();
        java.lang.Object obj19 = null;
        objNodeImpl14.setContent(obj19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode34 = objNodeImpl30.getParent();
        java.lang.Object obj35 = null;
        objNodeImpl30.setContent(obj35);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl14.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.Class<?> wildcardClass52 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl56.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl56);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList60 = objNodeImpl54.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = objNodeImpl54.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        java.lang.String str66 = objNodeImpl63.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl68 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl70.setContent((java.lang.Object) 1.0f);
        objNodeImpl68.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        java.lang.String str74 = objNodeImpl70.toString();
        java.lang.Object obj75 = objNodeImpl70.getContent();
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl70);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        java.lang.String str78 = objNodeImpl63.toString();
        objNodeImpl63.setName("Node(#)");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        objNodeImpl44.setName("");
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList85 = objNodeImpl8.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "Node(100)" + "'", str9.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "Node(100)" + "'", str10.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode18);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode34);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(objNodeList60);
        org.junit.Assert.assertNotNull(objNodeImpl61);
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "Node(1.0)" + "'", str66.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str74 + "' != '" + "Node(1.0)" + "'", str74.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + 1.0f + "'", obj75.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str78 + "' != '" + "Node(1.0)" + "'", str78.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList85);
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test461");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        objNodeImpl3.setName("Node(1.0)");
        objNodeImpl3.setDepth(100);
        java.lang.Object obj14 = objNodeImpl3.getName();
        java.lang.Object obj15 = objNodeImpl3.getContent();
        java.lang.Object obj16 = objNodeImpl3.getName();
        java.lang.Object obj17 = objNodeImpl3.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        objNodeImpl26.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode29 = objNodeImpl26.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        java.lang.Class<?> wildcardClass38 = objNodeImpl33.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj43 = objNodeImpl40.getName();
        objNodeImpl33.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        objNodeImpl26.setContent((java.lang.Object) objNodeImpl33);
        java.lang.Object obj46 = objNodeImpl26.getContent();
        objNodeImpl26.setName("Node(100)");
        java.lang.String str49 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList57 = objNodeImpl51.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = objNodeImpl51.copy();
        objNodeImpl58.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode61 = objNodeImpl58.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode69 = objNodeImpl65.getParent();
        java.lang.Class<?> wildcardClass70 = objNodeImpl65.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj75 = objNodeImpl72.getName();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl58.setContent((java.lang.Object) objNodeImpl65);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl58.copy();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        objNodeImpl3.setDepth((int) (short) 100);
        java.lang.Object obj83 = objNodeImpl3.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(1.0)" + "'", obj14.equals("Node(1.0)"));
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + obj16 + "' != '" + "Node(1.0)" + "'", obj16.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj17 + "' != '" + "Node(1.0)" + "'", obj17.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNull(objNode29);
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(Node(1.0))" + "'", str49.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(objNodeList57);
        org.junit.Assert.assertNotNull(objNodeImpl58);
        org.junit.Assert.assertNull(objNode61);
        org.junit.Assert.assertNull(objNode69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + obj75 + "' != '" + "Node(100)" + "'", obj75.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl78);
        org.junit.Assert.assertTrue("'" + obj83 + "' != '" + "Node(1.0)" + "'", obj83.equals("Node(1.0)"));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test462");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl31.getParent();
        java.lang.Class<?> wildcardClass36 = objNodeImpl31.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl38.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj41 = objNodeImpl38.getName();
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl24.setContent((java.lang.Object) objNodeImpl31);
        java.lang.Object obj44 = objNodeImpl24.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList52 = objNodeImpl46.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl54.setDepth((int) (short) 1);
        boolean boolean59 = objNodeImpl54.isRoot();
        objNodeImpl46.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        boolean boolean61 = objNodeImpl54.isRoot();
        objNodeImpl24.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl24.copy();
        boolean boolean64 = objNodeImpl63.isRoot();
        java.lang.Object obj65 = objNodeImpl63.getContent();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        boolean boolean67 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        objNodeImpl69.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList75 = objNodeImpl69.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeList75);
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        boolean boolean78 = objNodeImpl76.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + "Node(100)" + "'", obj41.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(objNodeList52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(objNodeList75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test463");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl18 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl18.setContent((java.lang.Object) 1.0f);
        objNodeImpl16.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl18);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList22 = objNodeImpl16.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = objNodeImpl16.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl25.setContent((java.lang.Object) 1.0f);
        java.lang.String str28 = objNodeImpl25.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.lang.String str36 = objNodeImpl32.toString();
        java.lang.Object obj37 = objNodeImpl32.getContent();
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        objNodeImpl16.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        java.lang.String str40 = objNodeImpl25.toString();
        objNodeImpl25.setName("Node(#)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl25);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj48 = objNodeImpl45.getName();
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.lang.String str50 = objNodeImpl8.toString();
        java.lang.Object obj51 = objNodeImpl8.getContent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList22);
        org.junit.Assert.assertNotNull(objNodeImpl23);
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "Node(1.0)" + "'", str36.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj37 + "' != '" + 1.0f + "'", obj37.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + 1.0f + "'", obj51.equals(1.0f));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test464");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl9 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl9.setContent((java.lang.Object) 1.0f);
        objNodeImpl9.setDepth((int) (short) 1);
        boolean boolean14 = objNodeImpl9.isRoot();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl9);
        boolean boolean16 = objNodeImpl9.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl9.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.String str25 = objNodeImpl21.toString();
        objNodeImpl9.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.lang.Class<?> wildcardClass27 = objNodeImpl9.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = objNodeImpl9.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setDepth((int) (short) 1);
        objNodeImpl30.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl38.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl38.copy();
        java.lang.Class<?> wildcardClass46 = objNodeImpl38.getClass();
        boolean boolean47 = objNodeImpl38.isLeaf();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList56 = objNodeImpl50.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = objNodeImpl50.copy();
        objNodeImpl57.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode60 = objNodeImpl57.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl64 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl64.setContent((java.lang.Object) 1.0f);
        objNodeImpl62.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl64);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode68 = objNodeImpl64.getParent();
        java.lang.Class<?> wildcardClass69 = objNodeImpl64.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl64.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl57.setContent((java.lang.Object) objNodeImpl64);
        java.lang.Object obj77 = objNodeImpl57.getContent();
        objNodeImpl57.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList80 = objNodeImpl57.getChildren();
        objNodeImpl30.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl57);
        java.lang.Class<?> wildcardClass82 = objNodeImpl30.getClass();
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        objNodeImpl28.setName("");
        java.lang.Object obj86 = objNodeImpl28.getName();
        objNodeImpl28.setDepth(1);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(objNode17);
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(objNodeImpl28);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objNodeList56);
        org.junit.Assert.assertNotNull(objNodeImpl57);
        org.junit.Assert.assertNull(objNode60);
        org.junit.Assert.assertNull(objNode68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj77);
        org.junit.Assert.assertNotNull(objNodeList80);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + obj86 + "' != '" + "" + "'", obj86.equals(""));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test465");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass8 = objNodeImpl1.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList9 = objNodeImpl1.getChildren();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(objNodeList9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test466");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        objNodeImpl3.setDepth((int) (byte) 100);
        boolean boolean18 = objNodeImpl3.isLeaf();
        boolean boolean19 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl23 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl23.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        boolean boolean27 = objNodeImpl23.isLeaf();
        java.lang.Object obj28 = objNodeImpl23.getContent();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl23);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode37 = objNodeImpl33.getParent();
        objNodeImpl33.setName("");
        objNodeImpl33.setName("Node(0)");
        boolean boolean42 = objNodeImpl33.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setDepth((int) (short) 1);
        boolean boolean49 = objNodeImpl44.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList50 = objNodeImpl44.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl54.setContent((java.lang.Object) 1.0f);
        objNodeImpl52.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        java.lang.String str58 = objNodeImpl54.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl54.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl63.setContent((java.lang.Object) 1.0f);
        objNodeImpl61.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl63);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode67 = objNodeImpl63.getParent();
        java.lang.Object obj68 = null;
        objNodeImpl63.setContent(obj68);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl71 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl71.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj74 = objNodeImpl71.getName();
        objNodeImpl63.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl54.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl71);
        objNodeImpl54.setName("");
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl54);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl81 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl83 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl83.setContent((java.lang.Object) 1.0f);
        objNodeImpl81.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl83);
        objNodeImpl81.setDepth((int) (short) 100);
        boolean boolean89 = objNodeImpl81.isLeaf();
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl81);
        java.lang.Object obj91 = objNodeImpl44.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl92 = objNodeImpl44.copy();
        objNodeImpl33.setContent((java.lang.Object) objNodeImpl44);
        objNodeImpl23.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj95 = objNodeImpl23.getName();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + obj28 + "' != '" + 1.0f + "'", obj28.equals(1.0f));
        org.junit.Assert.assertNull(objNode37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(objNodeList50);
        org.junit.Assert.assertTrue("'" + str58 + "' != '" + "Node(1.0)" + "'", str58.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNull(objNode67);
        org.junit.Assert.assertTrue("'" + obj74 + "' != '" + "Node(100)" + "'", obj74.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + obj91 + "' != '" + 1.0f + "'", obj91.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeImpl92);
        org.junit.Assert.assertTrue("'" + obj95 + "' != '" + "Node(100)" + "'", obj95.equals("Node(100)"));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test467");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        java.lang.Object obj28 = objNodeImpl8.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl44.getParent();
        java.lang.Class<?> wildcardClass49 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl37.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj57 = objNodeImpl37.getContent();
        objNodeImpl37.setName("Node(100)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        java.lang.Class<?> wildcardClass61 = objNodeImpl8.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        objNodeImpl63.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str69 = objNodeImpl65.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode70 = objNodeImpl65.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl74 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl74.setContent((java.lang.Object) 1.0f);
        objNodeImpl72.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl74);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode78 = objNodeImpl74.getParent();
        java.lang.Object obj79 = null;
        objNodeImpl74.setContent(obj79);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl82.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj85 = objNodeImpl82.getName();
        objNodeImpl74.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl82);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl88 = objNodeImpl82.copy();
        org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<org.misha.beanutils.tree.Node<java.lang.Object>>((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl88);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl88);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + str69 + "' != '" + "Node(1.0)" + "'", str69.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode70);
        org.junit.Assert.assertNull(objNode78);
        org.junit.Assert.assertTrue("'" + obj85 + "' != '" + "Node(100)" + "'", obj85.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl88);
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test468");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.lang.String str7 = objNodeImpl3.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl3.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl12.getParent();
        java.lang.Object obj17 = null;
        objNodeImpl12.setContent(obj17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl20.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj23 = objNodeImpl20.getName();
        objNodeImpl12.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl20);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = null;
        objNodeImpl3.setParent(objNode26);
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "Node(1.0)" + "'", str7.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode8);
        org.junit.Assert.assertNull(objNode16);
        org.junit.Assert.assertTrue("'" + obj23 + "' != '" + "Node(100)" + "'", obj23.equals("Node(100)"));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test469");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl10.getChildren();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl10.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl10.getParent();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNode27);
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test470");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.lang.Object obj44 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = objNodeImpl36.copy();
        boolean boolean46 = objNodeImpl36.isLeaf();
        objNodeImpl36.setDepth((int) (short) 1);
        java.lang.String str49 = objNodeImpl36.toString();
        java.lang.String str50 = objNodeImpl36.toString();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList51 = objNodeImpl36.getChildren();
        java.lang.Object obj52 = objNodeImpl36.getName();
        objNodeImpl36.setName("Node(Node(100))");
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(1.0)" + "'", obj44.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "Node(1.0)" + "'", str50.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList51);
        org.junit.Assert.assertTrue("'" + obj52 + "' != '" + "Node(1.0)" + "'", obj52.equals("Node(1.0)"));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test471");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        java.lang.Class<?> wildcardClass29 = objNodeImpl11.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl35.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl35);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl35.getParent();
        java.lang.Class<?> wildcardClass40 = objNodeImpl35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj45 = objNodeImpl42.getName();
        objNodeImpl35.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl42.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass49 = objNodeImpl42.getClass();
        objNodeImpl42.setDepth(0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl55.getParent();
        java.lang.Class<?> wildcardClass60 = objNodeImpl55.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl62.setContent((java.lang.Object) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl70.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl78.setDepth((int) (short) 1);
        boolean boolean83 = objNodeImpl78.isRoot();
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean85 = objNodeImpl78.isRoot();
        boolean boolean86 = objNodeImpl78.isRoot();
        objNodeImpl62.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl89 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl42);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertTrue("'" + obj45 + "' != '" + "Node(100)" + "'", obj45.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList76);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test472");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        objNodeImpl8.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode11 = objNodeImpl8.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl15.setContent((java.lang.Object) 1.0f);
        objNodeImpl13.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl15);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode19 = objNodeImpl15.getParent();
        java.lang.Class<?> wildcardClass20 = objNodeImpl15.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj25 = objNodeImpl22.getName();
        objNodeImpl15.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        objNodeImpl8.setContent((java.lang.Object) objNodeImpl15);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode32 = objNodeImpl29.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl29.copy();
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Object obj35 = new java.lang.Object();
        java.lang.Class<?> wildcardClass36 = obj35.getClass();
        java.lang.Class<?> wildcardClass37 = obj35.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass37);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl42.setContent((java.lang.Object) 1.0f);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        boolean boolean46 = objNodeImpl42.isLeaf();
        boolean boolean47 = objNodeImpl42.isRoot();
        objNodeImpl38.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl42);
        objNodeImpl33.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl38.setName("Node(Node())");
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNull(objNode11);
        org.junit.Assert.assertNull(objNode19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "Node(100)" + "'", obj25.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode32);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test473");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl29.setContent((java.lang.Object) 1.0f);
        objNodeImpl27.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl29);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList33 = objNodeImpl27.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl27.copy();
        java.lang.Class<?> wildcardClass35 = objNodeImpl27.getClass();
        java.lang.Object obj36 = objNodeImpl27.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        objNodeImpl10.setName("Node(Node(1.0))");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl43.setContent((java.lang.Object) 1.0f);
        objNodeImpl41.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl43);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList47 = objNodeImpl41.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = objNodeImpl41.copy();
        objNodeImpl48.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode51 = objNodeImpl48.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl55.setContent((java.lang.Object) 1.0f);
        objNodeImpl53.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl55);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode59 = objNodeImpl55.getParent();
        java.lang.Class<?> wildcardClass60 = objNodeImpl55.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl62 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl62.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj65 = objNodeImpl62.getName();
        objNodeImpl55.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl62);
        objNodeImpl48.setContent((java.lang.Object) objNodeImpl55);
        java.lang.Object obj68 = objNodeImpl48.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList76 = objNodeImpl70.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl78.setContent((java.lang.Object) 1.0f);
        objNodeImpl78.setDepth((int) (short) 1);
        boolean boolean83 = objNodeImpl78.isRoot();
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean85 = objNodeImpl78.isRoot();
        objNodeImpl48.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        boolean boolean87 = objNodeImpl78.isLeaf();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl78);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList33);
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + obj36 + "' != '" + (byte) 100 + "'", obj36.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList47);
        org.junit.Assert.assertNotNull(objNodeImpl48);
        org.junit.Assert.assertNull(objNode51);
        org.junit.Assert.assertNull(objNode59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertNotNull(objNodeList76);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test474");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl12.setContent((java.lang.Object) 1.0f);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl12);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl26.setContent((java.lang.Object) 1.0f);
        java.lang.String str29 = objNodeImpl26.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.String str37 = objNodeImpl33.toString();
        java.lang.Object obj38 = objNodeImpl33.getContent();
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        java.lang.String str41 = objNodeImpl26.toString();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = objNodeImpl26.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj48 = objNodeImpl45.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl49 = objNodeImpl45.copy();
        objNodeImpl45.setName("Node(1.0)");
        objNodeImpl43.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList53 = objNodeImpl45.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode54 = objNodeImpl45.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode55 = objNodeImpl45.getParent();
        objNodeImpl8.setContent((java.lang.Object) objNode55);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "Node(1.0)" + "'", str29.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj38 + "' != '" + 1.0f + "'", obj38.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "Node(1.0)" + "'", str41.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl43);
        org.junit.Assert.assertTrue("'" + obj48 + "' != '" + "Node(100)" + "'", obj48.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl49);
        org.junit.Assert.assertNotNull(objNodeList53);
        org.junit.Assert.assertNotNull(objNode54);
        org.junit.Assert.assertNotNull(objNode55);
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test475");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode4 = objNodeImpl3.getParent();
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode4);
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test476");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Class<?> wildcardClass8 = objNodeImpl3.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj13 = objNodeImpl10.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        objNodeImpl10.setContent((java.lang.Object) (byte) 0);
        java.lang.Class<?> wildcardClass17 = objNodeImpl10.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        boolean boolean22 = objNodeImpl19.isLeaf();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl25 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        objNodeImpl25.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList31 = objNodeImpl25.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = objNodeImpl25.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        java.lang.String str37 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl39 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        objNodeImpl39.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        java.lang.String str45 = objNodeImpl41.toString();
        java.lang.Object obj46 = objNodeImpl41.getContent();
        objNodeImpl34.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl25.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        java.lang.String str49 = objNodeImpl34.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl53 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl53.setContent((java.lang.Object) 1.0f);
        objNodeImpl51.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        java.lang.String str57 = objNodeImpl53.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode58 = objNodeImpl53.getParent();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl53);
        objNodeImpl19.setContent((java.lang.Object) objNodeImpl53);
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.lang.String str62 = objNodeImpl19.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = null;
        try {
            objNodeImpl19.addChild(objNode63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        }
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + "Node(100)" + "'", obj13.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertNotNull(objNodeList31);
        org.junit.Assert.assertNotNull(objNodeImpl32);
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "Node(1.0)" + "'", str37.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "Node(1.0)" + "'", str45.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj46 + "' != '" + 1.0f + "'", obj46.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "Node(1.0)" + "'", str49.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "Node(1.0)" + "'", str57.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode58);
        org.junit.Assert.assertTrue("'" + str62 + "' != '" + "Node(Node(1.0))" + "'", str62.equals("Node(Node(1.0))"));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test477");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl1.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) (-1));
        java.lang.Object obj10 = objNodeImpl1.getName();
        boolean boolean11 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl1.copy();
        objNodeImpl12.setDepth((int) (byte) 0);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 0);
        objNodeImpl15.setName("Node(1.0)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + obj10 + "' != '" + "Node(100)" + "'", obj10.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objNodeImpl12);
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test478");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode18 = objNodeImpl16.getParent();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNull(objNode18);
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test479");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl54 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl56 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl58 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl58.setContent((java.lang.Object) 1.0f);
        objNodeImpl56.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl58);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList62 = objNodeImpl56.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl63 = objNodeImpl56.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl65 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl65.setContent((java.lang.Object) 1.0f);
        java.lang.String str68 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl70 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl72 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl72.setContent((java.lang.Object) 1.0f);
        objNodeImpl70.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        java.lang.String str76 = objNodeImpl72.toString();
        java.lang.Object obj77 = objNodeImpl72.getContent();
        objNodeImpl65.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl72);
        objNodeImpl56.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl65);
        java.lang.String str80 = objNodeImpl65.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl82 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl84.setContent((java.lang.Object) 1.0f);
        objNodeImpl82.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str88 = objNodeImpl84.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode89 = objNodeImpl84.getParent();
        objNodeImpl65.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        objNodeImpl84.setDepth((int) (short) 1);
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl84);
        java.lang.String str94 = objNodeImpl10.toString();
        java.lang.String str95 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(objNodeList62);
        org.junit.Assert.assertNotNull(objNodeImpl63);
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "Node(1.0)" + "'", str68.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str76 + "' != '" + "Node(1.0)" + "'", str76.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj77 + "' != '" + 1.0f + "'", obj77.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str80 + "' != '" + "Node(1.0)" + "'", str80.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str88 + "' != '" + "Node(1.0)" + "'", str88.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode89);
        org.junit.Assert.assertTrue("'" + str94 + "' != '" + "Node(Node())" + "'", str94.equals("Node(Node())"));
        org.junit.Assert.assertTrue("'" + str95 + "' != '" + "Node(Node())" + "'", str95.equals("Node(Node())"));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test480");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        objNodeImpl10.setDepth((int) (byte) 10);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList35 = objNodeImpl29.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl29.copy();
        objNodeImpl36.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode39 = objNodeImpl36.getParent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList40 = objNodeImpl36.getChildren();
        objNodeImpl10.setContent((java.lang.Object) objNodeImpl36);
        java.lang.String str42 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl46 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl46.setContent((java.lang.Object) 1.0f);
        objNodeImpl44.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode50 = objNodeImpl46.getParent();
        objNodeImpl46.setName("");
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl46);
        java.lang.Class<?> wildcardClass54 = objNodeImpl46.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl55 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl46);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl57 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl59.setContent((java.lang.Object) 1.0f);
        objNodeImpl57.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl59);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode63 = objNodeImpl59.getParent();
        java.lang.Object obj64 = null;
        objNodeImpl59.setContent(obj64);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj70 = objNodeImpl67.getName();
        objNodeImpl59.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl73 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl75.setContent((java.lang.Object) 1.0f);
        objNodeImpl73.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl75);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList79 = objNodeImpl73.getChildren();
        objNodeImpl73.setContent((java.lang.Object) '#');
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl73);
        java.lang.Class<?> wildcardClass83 = objNodeImpl73.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type> typeNodeImpl84 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.Type>((java.lang.reflect.Type) wildcardClass83);
        objNodeImpl46.setContent((java.lang.Object) wildcardClass83);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeList35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNull(objNode39);
        org.junit.Assert.assertNotNull(objNodeList40);
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "Node(Node())" + "'", str42.equals("Node(Node())"));
        org.junit.Assert.assertNull(objNode50);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNull(objNode63);
        org.junit.Assert.assertTrue("'" + obj70 + "' != '" + "Node(100)" + "'", obj70.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList79);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test481");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList14 = objNodeImpl8.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        java.lang.String str20 = objNodeImpl17.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl24.setContent((java.lang.Object) 1.0f);
        objNodeImpl22.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.lang.String str28 = objNodeImpl24.toString();
        java.lang.Object obj29 = objNodeImpl24.getContent();
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        objNodeImpl8.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str32 = objNodeImpl17.toString();
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = objNodeImpl17.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl36.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj39 = objNodeImpl36.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = objNodeImpl36.copy();
        objNodeImpl36.setName("Node(1.0)");
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl36);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList44 = objNodeImpl34.getChildren();
        boolean boolean45 = objNodeImpl34.isRoot();
        org.junit.Assert.assertNotNull(objNodeList14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertTrue("'" + str20 + "' != '" + "Node(1.0)" + "'", str20.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "Node(1.0)" + "'", str28.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj29 + "' != '" + 1.0f + "'", obj29.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "Node(1.0)" + "'", str32.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNodeImpl34);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + "Node(100)" + "'", obj39.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeImpl40);
        org.junit.Assert.assertNotNull(objNodeList44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test482");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        objNodeImpl3.setDepth((int) '#');
        boolean boolean11 = objNodeImpl3.isRoot();
        boolean boolean12 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl16.setContent((java.lang.Object) 1.0f);
        objNodeImpl14.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList20 = objNodeImpl14.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = objNodeImpl14.copy();
        java.lang.Object obj22 = objNodeImpl21.getContent();
        boolean boolean23 = objNodeImpl21.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList32 = objNodeImpl26.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode33 = objNodeImpl26.getParent();
        boolean boolean34 = objNodeImpl26.isLeaf();
        java.lang.Class<?> wildcardClass35 = objNodeImpl26.getClass();
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl26);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNodeList20);
        org.junit.Assert.assertNotNull(objNodeImpl21);
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + (byte) 100 + "'", obj22.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(objNodeList32);
        org.junit.Assert.assertNotNull(objNode33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test483");
        org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable> serializableNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.io.Serializable>((java.io.Serializable) 100.0f);
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test484");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        java.lang.Object obj18 = new java.lang.Object();
        java.lang.Class<?> wildcardClass19 = obj18.getClass();
        java.lang.Class<?> wildcardClass20 = obj18.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement> annotatedElementNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.reflect.AnnotatedElement>((java.lang.reflect.AnnotatedElement) wildcardClass20);
        objNodeImpl8.setContent((java.lang.Object) wildcardClass20);
        java.lang.String str23 = objNodeImpl8.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl8.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl28.setContent((java.lang.Object) 1.0f);
        objNodeImpl26.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        boolean boolean32 = objNodeImpl28.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = objNodeImpl28.copy();
        objNodeImpl28.setDepth((int) '#');
        boolean boolean36 = objNodeImpl28.isRoot();
        boolean boolean37 = objNodeImpl28.isLeaf();
        objNodeImpl28.setName("Node(-1)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl28);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList41 = objNodeImpl8.getChildren();
        java.lang.Class<?> wildcardClass42 = objNodeList41.getClass();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "Node(class java.lang.Object)" + "'", str23.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(objNodeImpl33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(objNodeList41);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test485");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        boolean boolean12 = objNodeImpl8.isLeaf();
        boolean boolean13 = objNodeImpl8.isRoot();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode14 = objNodeImpl8.getParent();
        java.lang.String str15 = objNodeImpl8.toString();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        objNodeImpl8.setDepth(0);
        java.lang.Object obj19 = objNodeImpl8.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl21.setDepth((int) (short) 1);
        boolean boolean26 = objNodeImpl21.isRoot();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList27 = objNodeImpl21.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl29 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl31.setContent((java.lang.Object) 1.0f);
        objNodeImpl29.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        java.lang.String str35 = objNodeImpl31.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode36 = objNodeImpl31.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl40);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode44 = objNodeImpl40.getParent();
        java.lang.Object obj45 = null;
        objNodeImpl40.setContent(obj45);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl48 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl48.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj51 = objNodeImpl48.getName();
        objNodeImpl40.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl31.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl48);
        objNodeImpl31.setName("");
        objNodeImpl21.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl31);
        objNodeImpl21.setName("Node(1.0)");
        java.lang.Object obj59 = objNodeImpl21.getName();
        boolean boolean60 = objNodeImpl21.isRoot();
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(objNode14);
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "Node(1.0)" + "'", str15.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj19 + "' != '" + "Node(100)" + "'", obj19.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objNodeList27);
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "Node(1.0)" + "'", str35.equals("Node(1.0)"));
        org.junit.Assert.assertNull(objNode36);
        org.junit.Assert.assertNull(objNode44);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj59 + "' != '" + "Node(1.0)" + "'", obj59.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test486");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        objNodeImpl37.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode40 = objNodeImpl37.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode48 = objNodeImpl44.getParent();
        java.lang.Class<?> wildcardClass49 = objNodeImpl44.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl51 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl51.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj54 = objNodeImpl51.getName();
        objNodeImpl44.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl51);
        objNodeImpl37.setContent((java.lang.Object) objNodeImpl44);
        java.lang.Object obj57 = objNodeImpl37.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl59 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl61 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl61.setContent((java.lang.Object) 1.0f);
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl61);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList65 = objNodeImpl59.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl67.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setDepth((int) (short) 1);
        boolean boolean72 = objNodeImpl67.isRoot();
        objNodeImpl59.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        boolean boolean74 = objNodeImpl67.isRoot();
        objNodeImpl37.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl67);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl76 = objNodeImpl37.copy();
        boolean boolean77 = objNodeImpl76.isRoot();
        objNodeImpl17.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl76);
        java.lang.Class<?> wildcardClass79 = objNodeImpl76.getClass();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNull(objNode40);
        org.junit.Assert.assertNull(objNode48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + obj54 + "' != '" + "Node(100)" + "'", obj54.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertNotNull(objNodeList65);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(objNodeImpl76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test487");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.String str25 = objNodeImpl10.toString();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode26 = objNodeImpl10.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl28 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl30.setContent((java.lang.Object) 1.0f);
        objNodeImpl28.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl30);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList34 = objNodeImpl28.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl35 = objNodeImpl28.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl37.setContent((java.lang.Object) 1.0f);
        java.lang.String str40 = objNodeImpl37.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl42 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl44 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl44.setContent((java.lang.Object) 1.0f);
        objNodeImpl42.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        java.lang.String str48 = objNodeImpl44.toString();
        java.lang.Object obj49 = objNodeImpl44.getContent();
        objNodeImpl37.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl44);
        objNodeImpl28.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        objNodeImpl37.setDepth(1);
        boolean boolean54 = objNodeImpl37.isLeaf();
        objNodeImpl10.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl37);
        boolean boolean56 = objNodeImpl10.isRoot();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertTrue("'" + str25 + "' != '" + "Node(1.0)" + "'", str25.equals("Node(1.0)"));
        org.junit.Assert.assertNotNull(objNode26);
        org.junit.Assert.assertNotNull(objNodeList34);
        org.junit.Assert.assertNotNull(objNodeImpl35);
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "Node(1.0)" + "'", str40.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj49 + "' != '" + 1.0f + "'", obj49.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test488");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass25 = objNodeImpl10.getClass();
        objNodeImpl10.setDepth((int) '#');
        boolean boolean28 = objNodeImpl10.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test489");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        boolean boolean4 = objNodeImpl1.isLeaf();
        java.lang.Object obj5 = objNodeImpl1.getContent();
        java.lang.Object obj6 = objNodeImpl1.getName();
        java.lang.Class<?> wildcardClass7 = obj6.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + obj5 + "' != '" + 1.0f + "'", obj5.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "Node(100)" + "'", obj6.equals("Node(100)"));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test490");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        java.lang.Object obj2 = objNodeImpl1.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) objNodeImpl1);
        objNodeImpl1.setName("Node(Node(1.0))");
        java.lang.Object obj6 = objNodeImpl1.getName();
        java.lang.Object obj7 = new java.lang.Object();
        java.lang.Class<?> wildcardClass8 = obj7.getClass();
        java.lang.Class<?> wildcardClass9 = obj7.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass9);
        java.lang.String str11 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = objNodeImpl10.copy();
        boolean boolean13 = objNodeImpl12.isLeaf();
        objNodeImpl1.setContent((java.lang.Object) boolean13);
        org.junit.Assert.assertTrue("'" + obj2 + "' != '" + "Node(100)" + "'", obj2.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + obj6 + "' != '" + "Node(Node(1.0))" + "'", obj6.equals("Node(Node(1.0))"));
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "Node(class java.lang.Object)" + "'", str11.equals("Node(class java.lang.Object)"));
        org.junit.Assert.assertNotNull(objNodeImpl12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test491");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.Class<?> wildcardClass2 = obj0.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) wildcardClass2);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl5 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl7 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl7.setContent((java.lang.Object) 1.0f);
        objNodeImpl5.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        boolean boolean11 = objNodeImpl7.isLeaf();
        boolean boolean12 = objNodeImpl7.isRoot();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl7);
        objNodeImpl7.setName("Node(1.0)");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode16 = objNodeImpl7.getParent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode17 = objNodeImpl7.getParent();
        java.lang.Class<?> wildcardClass18 = objNode17.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objNode16);
        org.junit.Assert.assertNotNull(objNode17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test492");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode23 = objNodeImpl19.getParent();
        java.lang.Object obj24 = null;
        objNodeImpl19.setContent(obj24);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl27.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj30 = objNodeImpl27.getName();
        objNodeImpl19.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl33.setDepth((int) (short) 1);
        boolean boolean38 = objNodeImpl33.isRoot();
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.lang.Class<?> wildcardClass41 = objNodeImpl33.getClass();
        java.lang.Object obj42 = objNodeImpl33.getContent();
        java.lang.Object obj43 = objNodeImpl33.getName();
        boolean boolean44 = objNodeImpl33.isRoot();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode23);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node(100)" + "'", obj30.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + obj42 + "' != '" + 1.0f + "'", obj42.equals(1.0f));
        org.junit.Assert.assertTrue("'" + obj43 + "' != '" + "Node(100)" + "'", obj43.equals("Node(100)"));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test493");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl10 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl10.setContent((java.lang.Object) 1.0f);
        java.lang.String str13 = objNodeImpl10.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl17.setContent((java.lang.Object) 1.0f);
        objNodeImpl15.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str21 = objNodeImpl17.toString();
        java.lang.Object obj22 = objNodeImpl17.getContent();
        objNodeImpl10.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl10);
        java.lang.Class<?> wildcardClass25 = objNodeImpl10.getClass();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl10.getChildren();
        java.lang.String str27 = objNodeImpl10.toString();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "Node(1.0)" + "'", str13.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "Node(1.0)" + "'", str21.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj22 + "' != '" + 1.0f + "'", obj22.equals(1.0f));
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(1.0)" + "'", str27.equals("Node(1.0)"));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test494");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        boolean boolean7 = objNodeImpl3.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl3.copy();
        java.lang.Object obj9 = objNodeImpl3.getContent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        objNodeImpl11.setDepth((int) (short) 1);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl21 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl21.setContent((java.lang.Object) 1.0f);
        objNodeImpl19.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl21);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList25 = objNodeImpl19.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl26 = objNodeImpl19.copy();
        java.lang.Class<?> wildcardClass27 = objNodeImpl19.getClass();
        boolean boolean28 = objNodeImpl19.isLeaf();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl31 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl33 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl33.setContent((java.lang.Object) 1.0f);
        objNodeImpl31.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl33);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList37 = objNodeImpl31.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl38 = objNodeImpl31.copy();
        objNodeImpl38.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode41 = objNodeImpl38.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl43 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        objNodeImpl43.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl45);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode49 = objNodeImpl45.getParent();
        java.lang.Class<?> wildcardClass50 = objNodeImpl45.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj55 = objNodeImpl52.getName();
        objNodeImpl45.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl38.setContent((java.lang.Object) objNodeImpl45);
        java.lang.Object obj58 = objNodeImpl38.getContent();
        objNodeImpl38.setName("Node(100)");
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList61 = objNodeImpl38.getChildren();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl38);
        java.lang.String str64 = objNodeImpl38.toString();
        java.lang.Object obj65 = objNodeImpl38.getName();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl67 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl69 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl69.setContent((java.lang.Object) 1.0f);
        objNodeImpl67.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode73 = objNodeImpl69.getParent();
        java.lang.Class<?> wildcardClass74 = objNodeImpl69.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl75 = objNodeImpl69.copy();
        java.lang.Object obj76 = objNodeImpl69.getContent();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode77 = objNodeImpl69.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl78 = objNodeImpl69.copy();
        objNodeImpl38.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl69);
        boolean boolean80 = objNodeImpl69.isLeaf();
        objNodeImpl69.setDepth((int) '#');
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertTrue("'" + obj9 + "' != '" + 1.0f + "'", obj9.equals(1.0f));
        org.junit.Assert.assertNotNull(objNodeList25);
        org.junit.Assert.assertNotNull(objNodeImpl26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objNodeList37);
        org.junit.Assert.assertNotNull(objNodeImpl38);
        org.junit.Assert.assertNull(objNode41);
        org.junit.Assert.assertNull(objNode49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + obj55 + "' != '" + "Node(100)" + "'", obj55.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj58);
        org.junit.Assert.assertNotNull(objNodeList61);
        org.junit.Assert.assertTrue("'" + str64 + "' != '" + "Node(Node(1.0))" + "'", str64.equals("Node(Node(1.0))"));
        org.junit.Assert.assertTrue("'" + obj65 + "' != '" + "Node(100)" + "'", obj65.equals("Node(100)"));
        org.junit.Assert.assertNull(objNode73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(objNodeImpl75);
        org.junit.Assert.assertTrue("'" + obj76 + "' != '" + 1.0f + "'", obj76.equals(1.0f));
        org.junit.Assert.assertNull(objNode77);
        org.junit.Assert.assertNotNull(objNodeImpl78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test495");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        objNodeImpl17.setContent((java.lang.Object) '#');
        objNodeImpl3.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl17);
        java.lang.String str27 = objNodeImpl17.toString();
        boolean boolean28 = objNodeImpl17.isRoot();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl30 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        objNodeImpl30.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList36 = objNodeImpl30.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl37 = objNodeImpl30.copy();
        java.lang.Class<?> wildcardClass38 = objNodeImpl30.getClass();
        java.lang.Object obj39 = objNodeImpl30.getContent();
        objNodeImpl17.setContent((java.lang.Object) objNodeImpl30);
        java.lang.Object obj41 = objNodeImpl30.getContent();
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "Node(#)" + "'", str27.equals("Node(#)"));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(objNodeList36);
        org.junit.Assert.assertNotNull(objNodeImpl37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + obj39 + "' != '" + (byte) 100 + "'", obj39.equals((byte) 100));
        org.junit.Assert.assertTrue("'" + obj41 + "' != '" + (byte) 100 + "'", obj41.equals((byte) 100));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test496");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        boolean boolean10 = objNodeImpl1.isLeaf();
        java.lang.Object obj11 = objNodeImpl1.getContent();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList12 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>> objNodeIterableNodeImpl13 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>>((java.lang.Iterable<org.misha.beanutils.tree.Node<java.lang.Object>>) objNodeList12);
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + obj11 + "' != '" + (byte) 100 + "'", obj11.equals((byte) 100));
        org.junit.Assert.assertNotNull(objNodeList12);
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test497");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode7 = objNodeImpl3.getParent();
        java.lang.Object obj8 = null;
        objNodeImpl3.setContent(obj8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl11 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl11.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj14 = objNodeImpl11.getName();
        objNodeImpl3.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl11);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl17 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl19.setContent((java.lang.Object) 1.0f);
        objNodeImpl17.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl19);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList23 = objNodeImpl17.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl17.copy();
        objNodeImpl24.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode27 = objNodeImpl24.getParent();
        objNodeImpl11.setContent((java.lang.Object) objNodeImpl24);
        objNodeImpl11.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl32.setContent((java.lang.Object) 1.0f);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode35 = objNodeImpl32.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl36 = objNodeImpl32.copy();
        objNodeImpl11.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl32);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList38 = objNodeImpl32.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl40 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl40.setContent((java.lang.Object) 1.0f);
        boolean boolean43 = objNodeImpl40.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl45 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl45.setContent((java.lang.Object) 1.0f);
        java.lang.String str48 = objNodeImpl45.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl50 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl52 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl52.setContent((java.lang.Object) 1.0f);
        objNodeImpl50.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        java.lang.String str56 = objNodeImpl52.toString();
        java.lang.Object obj57 = objNodeImpl52.getContent();
        objNodeImpl45.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl40.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl52);
        objNodeImpl32.setContent((java.lang.Object) objNodeImpl52);
        org.junit.Assert.assertNull(objNode7);
        org.junit.Assert.assertTrue("'" + obj14 + "' != '" + "Node(100)" + "'", obj14.equals("Node(100)"));
        org.junit.Assert.assertNotNull(objNodeList23);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertNull(objNode27);
        org.junit.Assert.assertNull(objNode35);
        org.junit.Assert.assertNotNull(objNodeImpl36);
        org.junit.Assert.assertNotNull(objNodeList38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "Node(1.0)" + "'", str48.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "Node(1.0)" + "'", str56.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj57 + "' != '" + 1.0f + "'", obj57.equals(1.0f));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test498");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = objNodeImpl1.copy();
        java.lang.Class<?> wildcardClass9 = objNodeImpl1.getClass();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        boolean boolean11 = objNodeImpl1.isLeaf();
        objNodeImpl1.setName("");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = objNodeImpl1.copy();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl15 = objNodeImpl1.copy();
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList16 = objNodeImpl1.getChildren();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNodeImpl8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objNodeImpl14);
        org.junit.Assert.assertNotNull(objNodeImpl15);
        org.junit.Assert.assertNotNull(objNodeList16);
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test499");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl3 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl3.setContent((java.lang.Object) 1.0f);
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl3);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList7 = objNodeImpl1.getChildren();
        org.misha.beanutils.tree.Node<java.lang.Object> objNode8 = objNodeImpl1.getParent();
        boolean boolean9 = objNodeImpl1.isLeaf();
        java.lang.Class<?> wildcardClass10 = objNodeImpl1.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl12 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl14 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl14.setContent((java.lang.Object) 1.0f);
        objNodeImpl12.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl14);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList18 = objNodeImpl12.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl19 = objNodeImpl12.copy();
        objNodeImpl19.setContent((java.lang.Object) "");
        objNodeImpl19.setName("hi!");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl24 = objNodeImpl19.copy();
        java.lang.Object obj25 = objNodeImpl24.getContent();
        objNodeImpl24.setName("Node()");
        objNodeImpl1.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl24);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList29 = objNodeImpl24.getChildren();
        java.lang.Object obj30 = objNodeImpl24.getName();
        boolean boolean31 = objNodeImpl24.isLeaf();
        org.junit.Assert.assertNotNull(objNodeList7);
        org.junit.Assert.assertNotNull(objNode8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertNotNull(objNodeList18);
        org.junit.Assert.assertNotNull(objNodeImpl19);
        org.junit.Assert.assertNotNull(objNodeImpl24);
        org.junit.Assert.assertTrue("'" + obj25 + "' != '" + "" + "'", obj25.equals(""));
        org.junit.Assert.assertNotNull(objNodeList29);
        org.junit.Assert.assertTrue("'" + obj30 + "' != '" + "Node()" + "'", obj30.equals("Node()"));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test500");
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl1 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl1.setContent((java.lang.Object) 1.0f);
        java.lang.String str4 = objNodeImpl1.toString();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl6 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl8 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl8.setContent((java.lang.Object) 1.0f);
        objNodeImpl6.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        java.lang.String str12 = objNodeImpl8.toString();
        java.lang.Object obj13 = objNodeImpl8.getContent();
        objNodeImpl1.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl8);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl16 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (short) 1);
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl16);
        boolean boolean18 = objNodeImpl8.isLeaf();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl20 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl22 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl22.setContent((java.lang.Object) 1.0f);
        objNodeImpl20.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl22);
        java.util.List<org.misha.beanutils.tree.Node<java.lang.Object>> objNodeList26 = objNodeImpl20.getChildren();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl27 = objNodeImpl20.copy();
        objNodeImpl27.setContent((java.lang.Object) "");
        org.misha.beanutils.tree.Node<java.lang.Object> objNode30 = objNodeImpl27.getParent();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl32 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl34 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl34.setContent((java.lang.Object) 1.0f);
        objNodeImpl32.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl34);
        org.misha.beanutils.tree.Node<java.lang.Object> objNode38 = objNodeImpl34.getParent();
        java.lang.Class<?> wildcardClass39 = objNodeImpl34.getClass();
        org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object> objNodeImpl41 = new org.misha.beanutils.tree.impl.NodeImpl<java.lang.Object>((java.lang.Object) (byte) 100);
        objNodeImpl41.setContent((java.lang.Object) 1.0f);
        java.lang.Object obj44 = objNodeImpl41.getName();
        objNodeImpl34.addChild((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl41);
        objNodeImpl27.setContent((java.lang.Object) objNodeImpl34);
        java.lang.Object obj47 = objNodeImpl27.getContent();
        objNodeImpl27.setName("Node(100)");
        objNodeImpl8.setParent((org.misha.beanutils.tree.Node<java.lang.Object>) objNodeImpl27);
        java.lang.Object obj51 = objNodeImpl27.getName();
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "Node(1.0)" + "'", str4.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "Node(1.0)" + "'", str12.equals("Node(1.0)"));
        org.junit.Assert.assertTrue("'" + obj13 + "' != '" + 1.0f + "'", obj13.equals(1.0f));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(objNodeList26);
        org.junit.Assert.assertNotNull(objNodeImpl27);
        org.junit.Assert.assertNull(objNode30);
        org.junit.Assert.assertNull(objNode38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + obj44 + "' != '" + "Node(100)" + "'", obj44.equals("Node(100)"));
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertTrue("'" + obj51 + "' != '" + "Node(100)" + "'", obj51.equals("Node(100)"));
    }
}

